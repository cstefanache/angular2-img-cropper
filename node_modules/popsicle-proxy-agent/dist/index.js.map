{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Credits: https://github.com/request/request/blob/master/lib/getProxyFromURI.js\n\nimport { parse, Url } from 'url'\nimport HttpProxyAgent = require('http-proxy-agent')\nimport HttpsProxyAgent = require('https-proxy-agent')\n\n/**\n * Parsed results from `no_proxy` support.\n */\ninterface NoProxyValue {\n  hostname: string\n  port: string\n}\n\n/**\n * Return a function that will create proxy agents based on URL.\n */\nfunction proxy (options: proxy.Options) {\n  const noProxy = options.noProxy || process.env.NO_PROXY || process.env.no_proxy\n\n  if (noProxy === '*') {\n    return (urlStr: string): void => undefined\n  }\n\n  const noProxyList = parseNoProxy(noProxy)\n  const httpProxy = options.httpProxy || options.proxy || process.env.HTTP_PROXY || process.env.http_proxy\n  const httpsProxy = options.httpsProxy || options.proxy || process.env.HTTPS_PROXY || process.env.https_proxy\n  const httpProxyUrl = httpProxy ? parse(httpProxy) : undefined\n  const httpsProxyUrl = httpsProxy ? parse(httpsProxy) : undefined\n\n  return (urlStr: string) => {\n    const url = parse(urlStr)\n    const ignore = noProxy && urlInNoProxy(url, noProxyList)\n\n    if (url.protocol === 'https:') {\n      if (ignore || !httpsProxyUrl) {\n        return\n      }\n\n      return new HttpsProxyAgent(httpsProxyUrl)\n    }\n\n    if (ignore || !httpProxyUrl) {\n      return\n    }\n\n    return new HttpProxyAgent(httpProxyUrl)\n  }\n}\n\n/**\n * Normalize hostname for matching.\n */\nfunction formatHostname (hostname: string) {\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\n/**\n * Parse the no proxy string into an array.\n */\nfunction parseNoProxy (noProxy: string): NoProxyValue[] {\n  if (!noProxy) {\n    return []\n  }\n\n  return noProxy.split(',').map(zone => {\n    const location = zone.trim().toLowerCase()\n    const parts = location.split(':', 2)\n    const hostname = formatHostname(parts[0])\n    const port = parts[1]\n\n    return { hostname, port }\n  })\n}\n\n/**\n * Check if a url is in the no proxy configuration.\n */\nfunction urlInNoProxy (url: Url, noProxyList: NoProxyValue[]) {\n  const hostname = formatHostname(url.hostname)\n  const port = url.port || (url.protocol === 'https:' ? '443' : '80')\n\n  return noProxyList.some(noProxy => {\n    const isMatchedAt = hostname.indexOf(noProxy.hostname)\n    const hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxy.hostname.length\n\n    if (noProxy.port != null) {\n      return hostnameMatched && port === noProxy.port\n    }\n\n    return hostnameMatched\n  })\n}\n\nnamespace proxy {\n  /**\n   * Proxy options mirror standard environment variables.\n   */\n  export interface Options {\n    proxy?: string\n    httpProxy?: string\n    httpsProxy?: string\n    noProxy?: string\n  }\n}\n\nexport = proxy\n"]}