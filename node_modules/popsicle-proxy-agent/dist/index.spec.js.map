{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";AAAA,yBAAyC,UACzC,CAAC,CADkD;AACnD,oBAAsB,KACtB,CAAC,CAD0B;AAC3B,IAAO,IAAI,WAAW,WAAW,CAAC,CAAA;AAClC,IAAO,aAAa,WAAW,gBAAgB,CAAC,CAAA;AAChD,IAAO,WAAW,WAAW,SAAS,CAAC,CAAA;AAEvC,IAAI,CAAC,gBAAgB,EAAE,UAAA,CAAC;IACtB,IAAI,MAAmC,CAAA;IACvC,IAAI,WAAwC,CAAA;IAE5C,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAA,CAAC;QAChB,WAAW,GAAG,aAAa,CAAC,UAAU,GAAG,EAAE,GAAG;YAC5C,GAAG,CAAC,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,MAAM,GAAG,aAAa,CAAC,UAAU,GAAG,EAAE,GAAG;YACvC,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,MAAM,EAAE,CAAA;QACf,WAAW,CAAC,MAAM,EAAE,CAAA;QAEpB,CAAC,CAAC,GAAG,EAAE,CAAA;IACT,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAA,CAAC;QAC1B,IAAM,KAAK,GAAG,WAAW,CAAC;YACxB,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE;SACzB,CAAC,CAAA;QAEF,MAAM,CAAC,kBAAO,CAAC;YACb,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE;YACjB,SAAS,EAAE,0BAAe,CAAC;gBACzB,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aAC3B,CAAC;SACH,CAAC;aACC,IAAI,CAAC,UAAU,GAAG;YACjB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;YACxB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAA,CAAC;QAC1B,IAAM,KAAK,GAAG,WAAW,CAAC;YACxB,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE;YACxB,OAAO,EAAE,WAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ;SACtC,CAAC,CAAA;QAEF,MAAM,CAAC,kBAAO,CAAC;YACb,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE;YACjB,SAAS,EAAE,0BAAe,CAAC;gBACzB,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aAC3B,CAAC;SACH,CAAC;aACC,IAAI,CAAC,UAAU,GAAG;YACjB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;YACxB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,CAAC;QACf,MAAM,CAAC,KAAK,EAAE,CAAA;QACd,WAAW,CAAC,KAAK,EAAE,CAAA;QAEnB,CAAC,CAAC,GAAG,EAAE,CAAA;IACT,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { request, createTransport } from 'popsicle'\nimport { parse } from 'url'\nimport test = require('blue-tape')\nimport serverAddress = require('server-address')\nimport createProxy = require('./index')\n\ntest('popsicle proxy', t => {\n  let server: serverAddress.ServerAddress\n  let proxyServer: serverAddress.ServerAddress\n\n  t.test('before', t => {\n    proxyServer = serverAddress(function (req, res) {\n      res.end('proxy ' + req.url)\n    })\n\n    server = serverAddress(function (req, res) {\n      res.end('server ' + req.url)\n    })\n\n    server.listen()\n    proxyServer.listen()\n\n    t.end()\n  })\n\n  t.test('use proxy option', t => {\n    const proxy = createProxy({\n      proxy: proxyServer.url()\n    })\n\n    return request({\n      url: server.url(),\n      transport: createTransport({\n        agent: proxy(server.url())\n      })\n    })\n      .then(function (res) {\n        t.equal(res.status, 200)\n        t.equal(res.body, 'proxy ' + server.url())\n      })\n  })\n\n  t.test('support no proxy', t => {\n    const proxy = createProxy({\n      proxy: proxyServer.url(),\n      noProxy: parse(server.url()).hostname\n    })\n\n    return request({\n      url: server.url(),\n      transport: createTransport({\n        agent: proxy(server.url())\n      })\n    })\n      .then(function (res) {\n        t.equal(res.status, 200)\n        t.equal(res.body, 'server /')\n      })\n  })\n\n  t.test('after', t => {\n    server.close()\n    proxyServer.close()\n\n    t.end()\n  })\n})\n"]}