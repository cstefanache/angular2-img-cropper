{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import test = require('blue-tape')\nimport Promise = require('any-promise')\nimport { compose, NextFunction } from './index'\n\ntest('async middleware', t => {\n  t.test('middleware', t => {\n    const arr: number[] = []\n\n    const fn = compose<any>([\n      function (req: any, res: any, next: NextFunction<string>) {\n        arr.push(1)\n\n        return next().then(value => {\n          arr.push(5)\n\n          t.equal(value, 'propagate')\n\n          return 'done'\n        })\n      },\n      function (req: any, res: any, next: NextFunction<string>) {\n        arr.push(2)\n\n        return next().then(value => {\n          arr.push(4)\n\n          t.equal(value, 'hello')\n\n          return 'propagate'\n        })\n      }\n    ])\n\n    return fn({}, {}, () => {\n      arr.push(3)\n\n      return 'hello'\n    })\n      .then(() => {\n        t.deepEqual(arr, [1, 2, 3, 4, 5])\n      })\n  })\n\n  t.test('branch middleware by composing', t => {\n    const arr: number[] = []\n\n    const fn = compose<void>([\n      compose<void>([\n        function (ctx: any, next: NextFunction<void>) {\n          arr.push(1)\n\n          return next().catch(err => {\n            arr.push(3)\n          })\n        },\n        function (ctx: any, next: NextFunction<void>) {\n          arr.push(2)\n\n          return Promise.reject<void>(new Error('Boom!'))\n        }\n      ]),\n      function (ctx: any, next: NextFunction<void>) {\n        arr.push(4)\n\n        return next()\n      }\n    ])\n\n    return fn({}, (): void => undefined)\n      .then(() => {\n        t.deepEqual(arr, [1, 2, 3])\n      })\n  })\n\n  t.test('throw when input is not an array', t => {\n    t.throws(() => {\n      (compose as any)('test')\n    }, 'Expected middleware to be an array, got string')\n\n    t.end()\n  })\n\n  t.test('throw when values are not functions', t => {\n    t.throws(() => {\n      (compose as any)([1, 2, 3])\n    }, 'Expected middleware to contain functions, got number')\n\n    t.end()\n  })\n\n  t.test('throw when next is not a function', t => {\n    const fn = compose([])\n\n    t.throws(() => {\n      fn(true)\n    }, 'Expected the last argument to be `next()`, got boolean')\n\n    t.end()\n  })\n\n  t.test('throw when calling next() multiple times', t => {\n    const fn = compose([\n      function (value, next) {\n        return next().then(next)\n      }\n    ])\n\n    t.plan(1)\n\n    return fn({}, (): void => undefined)\n      .catch(err => {\n        t.equal(err.message, '`next()` called multiple times')\n      })\n  })\n})\n"]}