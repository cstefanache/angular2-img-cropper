{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA,IAAO,OAAO,WAAW,aAAa,CAAC,CAAA;AASvC,iBAA6B,UAAqD;IAChF,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,IAAI,SAAS,CAAC,6CAA2C,OAAO,UAAY,CAAC,CAAA;IACrF,CAAC;IAED,GAAG,CAAC,CAAa,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,CAAC;QAAvB,IAAM,EAAE,mBAAA;QACX,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;YAC7B,MAAM,IAAI,SAAS,CAAC,mDAAiD,OAAO,EAAI,CAAC,CAAA;QACnF,CAAC;KACF;IAED,MAAM,CAAC;QAAU,cAAc;aAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;YAAd,6BAAc;;QAC7B,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;QACd,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAEvB,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,SAAS,CAAC,oDAAoD,OAAO,IAAM,CAAC,CAAA;QACxF,CAAC;QAED,kBAAmB,GAAW;YAC5B,EAAE,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;gBACjB,MAAM,IAAI,SAAS,CAAC,gCAAgC,CAAC,CAAA;YACvD,CAAC;YAED,KAAK,GAAG,GAAG,CAAA;YAEX,IAAM,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA;YAElC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO;gBACxB,MAAM,CAAC,OAAO,CAAC,EAAE,eAAI,IAAI,SAAE;oBACzB,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAA;gBAC1B,CAAC,GAAC,CAAC,CAAA;YACL,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;IACpB,CAAC,CAAA;AACH,CAAC;AArCe,eAAO,UAqCtB,CAAA","sourcesContent":["import Promise = require('any-promise')\n\nexport interface NextFunction <T> {\n  (): Promise<T>\n}\n\n/**\n * Compose an array of middleware functions into a chain.\n */\nexport function compose <T> (middleware: Array<(...args: any[]) => T | Promise<T>>): (...args: any[]) => Promise<T> {\n  if (!Array.isArray(middleware)) {\n    throw new TypeError(`Expected middleware to be an array, got ${typeof middleware}`)\n  }\n\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') {\n      throw new TypeError(`Expected middleware to contain functions, got ${typeof fn}`)\n    }\n  }\n\n  return function (...args: any[]) {\n    let index = -1\n    const done = args.pop()\n\n    if (typeof done !== 'function') {\n      throw new TypeError(`Expected the last argument to be \\`next()\\`, got ${typeof done}`)\n    }\n\n    function dispatch (pos: number): Promise<any> {\n      if (pos <= index) {\n        throw new TypeError('`next()` called multiple times')\n      }\n\n      index = pos\n\n      const fn = middleware[pos] || done\n\n      return new Promise(resolve => {\n        return resolve(fn(...args, function next () {\n          return dispatch(pos + 1)\n        }))\n      })\n    }\n\n    return dispatch(0)\n  }\n}\n"]}