{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileTokenMetadata} from './compile_metadata';\nimport {isArray, isBlank, isPresent, isPrimitive, isStrictStringMap} from './facade/lang';\nimport * as o from './output/output_ast';\n\nexport const MODULE_SUFFIX = '';\n\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: any[]) => '-' + m[1].toLowerCase());\n}\n\nexport function splitAtColon(input: string, defaultValues: string[]): string[] {\n  return _splitAt(input, ':', defaultValues);\n}\n\nexport function splitAtPeriod(input: string, defaultValues: string[]): string[] {\n  return _splitAt(input, '.', defaultValues);\n}\n\nfunction _splitAt(input: string, character: string, defaultValues: string[]): string[] {\n  const characterIndex = input.indexOf(character);\n  if (characterIndex == -1) return defaultValues;\n  return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\n\nexport function sanitizeIdentifier(name: string): string {\n  return name.replace(/\\W/g, '_');\n}\n\nexport function visitValue(value: any, visitor: ValueVisitor, context: any): any {\n  if (isArray(value)) {\n    return visitor.visitArray(<any[]>value, context);\n  } else if (isStrictStringMap(value)) {\n    return visitor.visitStringMap(<{[key: string]: any}>value, context);\n  } else if (isBlank(value) || isPrimitive(value)) {\n    return visitor.visitPrimitive(value, context);\n  } else {\n    return visitor.visitOther(value, context);\n  }\n}\n\nexport interface ValueVisitor {\n  visitArray(arr: any[], context: any): any;\n  visitStringMap(map: {[key: string]: any}, context: any): any;\n  visitPrimitive(value: any, context: any): any;\n  visitOther(value: any, context: any): any;\n}\n\nexport class ValueTransformer implements ValueVisitor {\n  visitArray(arr: any[], context: any): any {\n    return arr.map(value => visitValue(value, this, context));\n  }\n  visitStringMap(map: {[key: string]: any}, context: any): any {\n    var result: {[key: string]: any} = {};\n    Object.keys(map).forEach(key => { result[key] = visitValue(map[key], this, context); });\n    return result;\n  }\n  visitPrimitive(value: any, context: any): any { return value; }\n  visitOther(value: any, context: any): any { return value; }\n}\n\nexport function assetUrl(pkg: string, path: string = null, type: string = 'src'): string {\n  if (path == null) {\n    return `asset:@angular/lib/${pkg}/index`;\n  } else {\n    return `asset:@angular/lib/${pkg}/src/${path}`;\n  }\n}\n\nexport function createDiTokenExpression(token: CompileTokenMetadata): o.Expression {\n  if (isPresent(token.value)) {\n    return o.literal(token.value);\n  } else if (token.identifierIsInstance) {\n    return o.importExpr(token.identifier)\n        .instantiate([], o.importType(token.identifier, [], [o.TypeModifier.Const]));\n  } else {\n    return o.importExpr(token.identifier);\n  }\n}\n\nexport class SyncAsyncResult<T> {\n  constructor(public syncResult: T, public asyncResult: Promise<T> = null) {\n    if (!asyncResult) {\n      this.asyncResult = Promise.resolve(syncResult);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}