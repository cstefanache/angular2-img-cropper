{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDirectiveMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {createDiTokenExpression} from '../util';\n\nimport {CompileView} from './compile_view';\n\nexport function getPropertyInView(\n    property: o.Expression, callingView: CompileView, definedView: CompileView): o.Expression {\n  if (callingView === definedView) {\n    return property;\n  } else {\n    var viewProp: o.Expression = o.THIS_EXPR;\n    var currView: CompileView = callingView;\n    while (currView !== definedView && isPresent(currView.declarationElement.view)) {\n      currView = currView.declarationElement.view;\n      viewProp = viewProp.prop('parent');\n    }\n    if (currView !== definedView) {\n      throw new Error(\n          `Internal error: Could not calculate a property in a parent view: ${property}`);\n    }\n    if (property instanceof o.ReadPropExpr) {\n      let readPropExpr: o.ReadPropExpr = property;\n      // Note: Don't cast for members of the AppView base class...\n      if (definedView.fields.some((field) => field.name == readPropExpr.name) ||\n          definedView.getters.some((field) => field.name == readPropExpr.name)) {\n        viewProp = viewProp.cast(definedView.classType);\n      }\n    }\n    return o.replaceVarInExpression(o.THIS_EXPR.name, viewProp, property);\n  }\n}\n\nexport function injectFromViewParentInjector(\n    token: CompileTokenMetadata, optional: boolean): o.Expression {\n  var args = [createDiTokenExpression(token)];\n  if (optional) {\n    args.push(o.NULL_EXPR);\n  }\n  return o.THIS_EXPR.prop('parentInjector').callMethod('get', args);\n}\n\nexport function getViewFactoryName(\n    component: CompileDirectiveMetadata, embeddedTemplateIndex: number): string {\n  return `viewFactory_${component.type.name}${embeddedTemplateIndex}`;\n}\n\nexport function createFlatArray(expressions: o.Expression[]): o.Expression {\n  var lastNonArrayExpressions: o.Expression[] = [];\n  var result: o.Expression = o.literalArr([]);\n  for (var i = 0; i < expressions.length; i++) {\n    var expr = expressions[i];\n    if (expr.type instanceof o.ArrayType) {\n      if (lastNonArrayExpressions.length > 0) {\n        result =\n            result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);\n        lastNonArrayExpressions = [];\n      }\n      result = result.callMethod(o.BuiltinMethod.ConcatArray, [expr]);\n    } else {\n      lastNonArrayExpressions.push(expr);\n    }\n  }\n  if (lastNonArrayExpressions.length > 0) {\n    result =\n        result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);\n  }\n  return result;\n}\n\nexport function createPureProxy(\n    fn: o.Expression, argCount: number, pureProxyProp: o.ReadPropExpr, view: CompileView) {\n  view.fields.push(new o.ClassField(pureProxyProp.name, null));\n  var pureProxyId =\n      argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;\n  if (!pureProxyId) {\n    throw new Error(`Unsupported number of argument for pure functions: ${argCount}`);\n  }\n  view.createMethod.addStmt(o.THIS_EXPR.prop(pureProxyProp.name)\n                                .set(o.importExpr(resolveIdentifier(pureProxyId)).callFn([fn]))\n                                .toStmt());\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}