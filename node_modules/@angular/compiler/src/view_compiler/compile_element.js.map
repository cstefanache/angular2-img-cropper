{"version":3,"file":"compile_element.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileIdentifierMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {ListWrapper, MapWrapper} from '../facade/collection';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, identifierToken, resolveIdentifier, resolveIdentifierToken} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ProviderAst, ProviderAstType, ReferenceAst, TemplateAst} from '../template_parser/template_ast';\nimport {createDiTokenExpression} from '../util';\n\nimport {CompileMethod} from './compile_method';\nimport {CompileQuery, addQueryToTokenMap, createQueryList} from './compile_query';\nimport {CompileView} from './compile_view';\nimport {InjectMethodVars} from './constants';\nimport {getPropertyInView, injectFromViewParentInjector} from './util';\n\nexport class CompileNode {\n  constructor(\n      public parent: CompileElement, public view: CompileView, public nodeIndex: number,\n      public renderNode: o.Expression, public sourceAst: TemplateAst) {}\n\n  isNull(): boolean { return !this.renderNode; }\n\n  isRootElement(): boolean { return this.view != this.parent.view; }\n}\n\nexport class CompileElement extends CompileNode {\n  static createNull(): CompileElement {\n    return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);\n  }\n\n  private _compViewExpr: o.Expression = null;\n  public appElement: o.ReadPropExpr;\n  public elementRef: o.Expression;\n  public injector: o.Expression;\n  public instances = new Map<any, o.Expression>();\n  private _resolvedProviders: Map<any, ProviderAst>;\n\n  private _queryCount = 0;\n  private _queries = new Map<any, CompileQuery[]>();\n  private _componentConstructorViewQueryLists: o.Expression[] = [];\n\n  public contentNodesByNgContentIndex: Array<o.Expression>[] = null;\n  public embeddedView: CompileView;\n  public referenceTokens: {[key: string]: CompileTokenMetadata};\n\n  constructor(\n      parent: CompileElement, view: CompileView, nodeIndex: number, renderNode: o.Expression,\n      sourceAst: TemplateAst, public component: CompileDirectiveMetadata,\n      private _directives: CompileDirectiveMetadata[],\n      private _resolvedProvidersArray: ProviderAst[], public hasViewContainer: boolean,\n      public hasEmbeddedView: boolean, references: ReferenceAst[]) {\n    super(parent, view, nodeIndex, renderNode, sourceAst);\n    this.referenceTokens = {};\n    references.forEach(ref => this.referenceTokens[ref.name] = ref.value);\n\n    this.elementRef =\n        o.importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);\n    this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);\n    this.injector = o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]);\n    this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, this.injector);\n    this.instances.set(\n        resolveIdentifierToken(Identifiers.Renderer).reference, o.THIS_EXPR.prop('renderer'));\n    if (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) {\n      this._createAppElement();\n    }\n  }\n\n  private _createAppElement() {\n    var fieldName = `_appEl_${this.nodeIndex}`;\n    var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n    // private is fine here as no child view will reference an AppElement\n    this.view.fields.push(new o.ClassField(\n        fieldName, o.importType(resolveIdentifier(Identifiers.AppElement)),\n        [o.StmtModifier.Private]));\n    var statement =\n        o.THIS_EXPR.prop(fieldName)\n            .set(o.importExpr(resolveIdentifier(Identifiers.AppElement)).instantiate([\n              o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode\n            ]))\n            .toStmt();\n    this.view.createMethod.addStmt(statement);\n    this.appElement = o.THIS_EXPR.prop(fieldName);\n    this.instances.set(resolveIdentifierToken(Identifiers.AppElement).reference, this.appElement);\n  }\n\n  public createComponentFactoryResolver(entryComponents: CompileIdentifierMetadata[]) {\n    if (!entryComponents || entryComponents.length === 0) {\n      return;\n    }\n    var createComponentFactoryResolverExpr =\n        o.importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([\n          o.literalArr(entryComponents.map((entryComponent) => o.importExpr(entryComponent))),\n          injectFromViewParentInjector(\n              resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)\n        ]);\n    var provider = new CompileProviderMetadata({\n      token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),\n      useValue: createComponentFactoryResolverExpr\n    });\n    // Add ComponentFactoryResolver as first provider as it does not have deps on other providers\n    // ProviderAstType.PrivateService as only the component and its view can see it,\n    // but nobody else\n    this._resolvedProvidersArray.unshift(new ProviderAst(\n        provider.token, false, true, [provider], ProviderAstType.PrivateService, [],\n        this.sourceAst.sourceSpan));\n  }\n\n  setComponentView(compViewExpr: o.Expression) {\n    this._compViewExpr = compViewExpr;\n    this.contentNodesByNgContentIndex =\n        new Array(this.component.template.ngContentSelectors.length);\n    for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n      this.contentNodesByNgContentIndex[i] = [];\n    }\n  }\n\n  setEmbeddedView(embeddedView: CompileView) {\n    this.embeddedView = embeddedView;\n    if (isPresent(embeddedView)) {\n      var createTemplateRefExpr =\n          o.importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([\n            this.appElement, this.embeddedView.viewFactory\n          ]);\n      var provider = new CompileProviderMetadata({\n        token: resolveIdentifierToken(Identifiers.TemplateRef),\n        useValue: createTemplateRefExpr\n      });\n      // Add TemplateRef as first provider as it does not have deps on other providers\n      this._resolvedProvidersArray.unshift(new ProviderAst(\n          provider.token, false, true, [provider], ProviderAstType.Builtin, [],\n          this.sourceAst.sourceSpan));\n    }\n  }\n\n  beforeChildren(): void {\n    if (this.hasViewContainer) {\n      this.instances.set(\n          resolveIdentifierToken(Identifiers.ViewContainerRef).reference,\n          this.appElement.prop('vcRef'));\n    }\n\n    this._resolvedProviders = new Map<any, ProviderAst>();\n    this._resolvedProvidersArray.forEach(\n        provider => this._resolvedProviders.set(provider.token.reference, provider));\n\n    // create all the provider instances, some in the view constructor,\n    // some as getters. We rely on the fact that they are already sorted topologically.\n    MapWrapper.values(this._resolvedProviders).forEach((resolvedProvider) => {\n      var providerValueExpressions = resolvedProvider.providers.map((provider) => {\n        if (isPresent(provider.useExisting)) {\n          return this._getDependency(\n              resolvedProvider.providerType,\n              new CompileDiDependencyMetadata({token: provider.useExisting}));\n        } else if (isPresent(provider.useFactory)) {\n          var deps = provider.deps || provider.useFactory.diDeps;\n          var depsExpr = deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useFactory).callFn(depsExpr);\n        } else if (isPresent(provider.useClass)) {\n          var deps = provider.deps || provider.useClass.diDeps;\n          var depsExpr = deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useClass)\n              .instantiate(depsExpr, o.importType(provider.useClass));\n        } else {\n          return convertValueToOutputAst(provider.useValue);\n        }\n      });\n      var propName = `_${resolvedProvider.token.name}_${this.nodeIndex}_${this.instances.size}`;\n      var instance = createProviderProperty(\n          propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider,\n          resolvedProvider.eager, this);\n      this.instances.set(resolvedProvider.token.reference, instance);\n    });\n\n    for (var i = 0; i < this._directives.length; i++) {\n      var directive = this._directives[i];\n      var directiveInstance = this.instances.get(identifierToken(directive.type).reference);\n      directive.queries.forEach((queryMeta) => { this._addQuery(queryMeta, directiveInstance); });\n    }\n    var queriesWithReads: _QueryWithRead[] = [];\n    MapWrapper.values(this._resolvedProviders).forEach((resolvedProvider) => {\n      var queriesForProvider = this._getQueriesFor(resolvedProvider.token);\n      ListWrapper.addAll(\n          queriesWithReads,\n          queriesForProvider.map(query => new _QueryWithRead(query, resolvedProvider.token)));\n    });\n    Object.keys(this.referenceTokens).forEach(varName => {\n      var token = this.referenceTokens[varName];\n      var varValue: o.Expression;\n      if (isPresent(token)) {\n        varValue = this.instances.get(token.reference);\n      } else {\n        varValue = this.renderNode;\n      }\n      this.view.locals.set(varName, varValue);\n      var varToken = new CompileTokenMetadata({value: varName});\n      ListWrapper.addAll(\n          queriesWithReads,\n          this._getQueriesFor(varToken).map(query => new _QueryWithRead(query, varToken)));\n    });\n    queriesWithReads.forEach((queryWithRead) => {\n      var value: o.Expression;\n      if (isPresent(queryWithRead.read.identifier)) {\n        // query for an identifier\n        value = this.instances.get(queryWithRead.read.reference);\n      } else {\n        // query for a reference\n        var token = this.referenceTokens[queryWithRead.read.value];\n        if (isPresent(token)) {\n          value = this.instances.get(token.reference);\n        } else {\n          value = this.elementRef;\n        }\n      }\n      if (isPresent(value)) {\n        queryWithRead.query.addValue(value, this.view);\n      }\n    });\n\n    if (isPresent(this.component)) {\n      var componentConstructorViewQueryList = isPresent(this.component) ?\n          o.literalArr(this._componentConstructorViewQueryLists) :\n          o.NULL_EXPR;\n      var compExpr = isPresent(this.getComponent()) ? this.getComponent() : o.NULL_EXPR;\n      this.view.createMethod.addStmt(\n          this.appElement\n              .callMethod(\n                  'initComponent',\n                  [compExpr, componentConstructorViewQueryList, this._compViewExpr])\n              .toStmt());\n    }\n  }\n\n  afterChildren(childNodeCount: number) {\n    MapWrapper.values(this._resolvedProviders).forEach((resolvedProvider) => {\n      // Note: afterChildren is called after recursing into children.\n      // This is good so that an injector match in an element that is closer to a requesting element\n      // matches first.\n      var providerExpr = this.instances.get(resolvedProvider.token.reference);\n      // Note: view providers are only visible on the injector of that element.\n      // This is not fully correct as the rules during codegen don't allow a directive\n      // to get hold of a view provdier on the same element. We still do this semantic\n      // as it simplifies our model to having only one runtime injector per element.\n      var providerChildNodeCount =\n          resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;\n      this.view.injectorGetMethod.addStmt(createInjectInternalCondition(\n          this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n    });\n\n    MapWrapper.values(this._queries)\n        .forEach(\n            (queries) => queries.forEach(\n                (query) => query.afterChildren(\n                    this.view.createMethod, this.view.updateContentQueriesMethod)));\n  }\n\n  addContentNode(ngContentIndex: number, nodeExpr: o.Expression) {\n    this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n  }\n\n  getComponent(): o.Expression {\n    return isPresent(this.component) ?\n        this.instances.get(identifierToken(this.component.type).reference) :\n        null;\n  }\n\n  getProviderTokens(): o.Expression[] {\n    return MapWrapper.values(this._resolvedProviders)\n        .map((resolvedProvider) => createDiTokenExpression(resolvedProvider.token));\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): CompileQuery[] {\n    var result: CompileQuery[] = [];\n    var currentEl: CompileElement = this;\n    var distance = 0;\n    var queries: CompileQuery[];\n    while (!currentEl.isNull()) {\n      queries = currentEl._queries.get(token.reference);\n      if (isPresent(queries)) {\n        ListWrapper.addAll(\n            result, queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directives.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl.parent;\n    }\n    queries = this.view.componentView.viewQueries.get(token.reference);\n    if (isPresent(queries)) {\n      ListWrapper.addAll(result, queries);\n    }\n    return result;\n  }\n\n  private _addQuery(queryMeta: CompileQueryMetadata, directiveInstance: o.Expression):\n      CompileQuery {\n    var propName = `_query_${queryMeta.selectors[0].name}_${this.nodeIndex}_${this._queryCount++}`;\n    var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);\n    var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n    addQueryToTokenMap(this._queries, query);\n    return query;\n  }\n\n  private _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata): o.Expression {\n    var result: o.Expression = null;\n    // constructor content query\n    if (!result && isPresent(dep.query)) {\n      result = this._addQuery(dep.query, null).queryList;\n    }\n\n    // constructor view query\n    if (!result && isPresent(dep.viewQuery)) {\n      result = createQueryList(\n          dep.viewQuery, null,\n          `_viewQuery_${dep.viewQuery.selectors[0].name}_${this.nodeIndex}_${this._componentConstructorViewQueryLists.length}`,\n          this.view);\n      this._componentConstructorViewQueryLists.push(result);\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtins with special visibility\n      if (!result) {\n        if (dep.token.reference ===\n            resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {\n          if (requestingProviderType === ProviderAstType.Component) {\n            return this._compViewExpr.prop('ref');\n          } else {\n            return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n          }\n        }\n      }\n      // access regular providers on the element\n      if (!result) {\n        let resolvedProvider = this._resolvedProviders.get(dep.token.reference);\n        // don't allow directives / public services to access private services.\n        // only components and private services can access private services.\n        if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||\n                                 requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) {\n          return null;\n        }\n        result = this.instances.get(dep.token.reference);\n      }\n    }\n    return result;\n  }\n\n  private _getDependency(requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata):\n      o.Expression {\n    var currElement: CompileElement = this;\n    var result: o.Expression = null;\n    if (dep.isValue) {\n      result = o.literal(dep.value);\n    }\n    if (!result && !dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep);\n    }\n    // check parent elements\n    while (!result && !currElement.parent.isNull()) {\n      currElement = currElement.parent;\n      result = currElement._getLocalDependency(\n          ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));\n    }\n\n    if (!result) {\n      result = injectFromViewParentInjector(dep.token, dep.isOptional);\n    }\n    if (!result) {\n      result = o.NULL_EXPR;\n    }\n    return getPropertyInView(result, this.view, currElement.view);\n  }\n}\n\nfunction createInjectInternalCondition(\n    nodeIndex: number, childNodeCount: number, provider: ProviderAst,\n    providerExpr: o.Expression): o.Statement {\n  var indexCondition: o.Expression;\n  if (childNodeCount > 0) {\n    indexCondition = o.literal(nodeIndex)\n                         .lowerEquals(InjectMethodVars.requestNodeIndex)\n                         .and(InjectMethodVars.requestNodeIndex.lowerEquals(\n                             o.literal(nodeIndex + childNodeCount)));\n  } else {\n    indexCondition = o.literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);\n  }\n  return new o.IfStmt(\n      InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition),\n      [new o.ReturnStatement(providerExpr)]);\n}\n\nfunction createProviderProperty(\n    propName: string, provider: ProviderAst, providerValueExpressions: o.Expression[],\n    isMulti: boolean, isEager: boolean, compileElement: CompileElement): o.Expression {\n  var view = compileElement.view;\n  var resolvedProviderValueExpr: o.Expression;\n  var type: o.Type;\n  if (isMulti) {\n    resolvedProviderValueExpr = o.literalArr(providerValueExpressions);\n    type = new o.ArrayType(o.DYNAMIC_TYPE);\n  } else {\n    resolvedProviderValueExpr = providerValueExpressions[0];\n    type = providerValueExpressions[0].type;\n  }\n  if (!type) {\n    type = o.DYNAMIC_TYPE;\n  }\n  if (isEager) {\n    view.fields.push(new o.ClassField(propName, type));\n    view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n  } else {\n    var internalField = `_${propName}`;\n    view.fields.push(new o.ClassField(internalField, type));\n    var getter = new CompileMethod(view);\n    getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n    // Note: Equals is important for JS so that it also checks the undefined case!\n    getter.addStmt(new o.IfStmt(\n        o.THIS_EXPR.prop(internalField).isBlank(),\n        [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n    getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));\n    view.getters.push(new o.ClassGetter(propName, getter.finish(), type));\n  }\n  return o.THIS_EXPR.prop(propName);\n}\n\nclass _QueryWithRead {\n  public read: CompileTokenMetadata;\n  constructor(public query: CompileQuery, match: CompileTokenMetadata) {\n    this.read = query.meta.read || match;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}