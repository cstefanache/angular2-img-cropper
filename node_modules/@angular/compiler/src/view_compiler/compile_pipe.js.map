{"version":3,"file":"compile_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompilePipeMetadata} from '../compile_metadata';\nimport {Identifiers, resolveIdentifier, resolveIdentifierToken} from '../identifiers';\nimport * as o from '../output/output_ast';\n\nimport {CompileView} from './compile_view';\nimport {createPureProxy, getPropertyInView, injectFromViewParentInjector} from './util';\n\nexport class CompilePipe {\n  static call(view: CompileView, name: string, args: o.Expression[]): o.Expression {\n    var compView = view.componentView;\n    var meta = _findPipeMeta(compView, name);\n    var pipe: CompilePipe;\n    if (meta.pure) {\n      // pure pipes live on the component view\n      pipe = compView.purePipes.get(name);\n      if (!pipe) {\n        pipe = new CompilePipe(compView, meta);\n        compView.purePipes.set(name, pipe);\n        compView.pipes.push(pipe);\n      }\n    } else {\n      // Non pure pipes live on the view that called it\n      pipe = new CompilePipe(view, meta);\n      view.pipes.push(pipe);\n    }\n    return pipe._call(view, args);\n  }\n\n  instance: o.ReadPropExpr;\n  private _purePipeProxyCount = 0;\n\n  constructor(public view: CompileView, public meta: CompilePipeMetadata) {\n    this.instance = o.THIS_EXPR.prop(`_pipe_${meta.name}_${view.pipeCount++}`);\n    var deps = this.meta.type.diDeps.map((diDep) => {\n      if (diDep.token.reference ===\n          resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {\n        return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n      }\n      return injectFromViewParentInjector(diDep.token, false);\n    });\n    this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));\n    this.view.createMethod.resetDebugInfo(null, null);\n    this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name)\n                                       .set(o.importExpr(this.meta.type).instantiate(deps))\n                                       .toStmt());\n  }\n\n  get pure(): boolean { return this.meta.pure; }\n\n  private _call(callingView: CompileView, args: o.Expression[]): o.Expression {\n    if (this.meta.pure) {\n      // PurePipeProxies live on the view that called them.\n      var purePipeProxyInstance =\n          o.THIS_EXPR.prop(`${this.instance.name}_${this._purePipeProxyCount++}`);\n      var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);\n      createPureProxy(\n          pipeInstanceSeenFromPureProxy.prop('transform')\n              .callMethod(o.BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]),\n          args.length, purePipeProxyInstance, callingView);\n      return o.importExpr(resolveIdentifier(Identifiers.castByValue))\n          .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])\n          .callFn(args);\n    } else {\n      return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);\n    }\n  }\n}\n\nfunction _findPipeMeta(view: CompileView, name: string): CompilePipeMetadata {\n  var pipeMeta: CompilePipeMetadata = null;\n  for (var i = view.pipeMetas.length - 1; i >= 0; i--) {\n    var localPipeMeta = view.pipeMetas[i];\n    if (localPipeMeta.name == name) {\n      pipeMeta = localPipeMeta;\n      break;\n    }\n  }\n  if (!pipeMeta) {\n    throw new Error(\n        `Illegal state: Could not find pipe ${name} although the parser should have detected this error!`);\n  }\n  return pipeMeta;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}