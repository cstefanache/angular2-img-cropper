{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isBlank} from '../facade/lang';\n\nexport class ParserError {\n  public message: string;\n  constructor(\n      message: string, public input: string, public errLocation: string, public ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nexport class ParseSpan {\n  constructor(public start: number, public end: number) {}\n}\n\nexport class AST {\n  constructor(public span: ParseSpan) {}\n  visit(visitor: AstVisitor, context: any = null): any { return null; }\n  toString(): string { return 'AST'; }\n}\n\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n  constructor(\n      span: ParseSpan, public prefix: string, public uninterpretedExpression: string,\n      public location: any) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n  toString(): string { return 'Quote'; }\n}\n\nexport class EmptyExpr extends AST {\n  visit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\n\nexport class ImplicitReceiver extends AST {\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nexport class Conditional extends AST {\n  constructor(span: ParseSpan, public condition: AST, public trueExp: AST, public falseExp: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nexport class PropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nexport class PropertyWrite extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public value: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nexport class SafePropertyRead extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nexport class KeyedRead extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nexport class KeyedWrite extends AST {\n  constructor(span: ParseSpan, public obj: AST, public key: AST, public value: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nexport class BindingPipe extends AST {\n  constructor(span: ParseSpan, public exp: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nexport class LiteralPrimitive extends AST {\n  constructor(span: ParseSpan, public value: any) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nexport class LiteralArray extends AST {\n  constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nexport class LiteralMap extends AST {\n  constructor(span: ParseSpan, public keys: any[], public values: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nexport class Interpolation extends AST {\n  constructor(span: ParseSpan, public strings: any[], public expressions: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nexport class Binary extends AST {\n  constructor(span: ParseSpan, public operation: string, public left: AST, public right: AST) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nexport class PrefixNot extends AST {\n  constructor(span: ParseSpan, public expression: AST) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nexport class MethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nexport class SafeMethodCall extends AST {\n  constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n    super(span);\n  }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nexport class FunctionCall extends AST {\n  constructor(span: ParseSpan, public target: AST, public args: any[]) { super(span); }\n  visit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nexport class ASTWithSource extends AST {\n  constructor(\n      public ast: AST, public source: string, public location: string,\n      public errors: ParserError[]) {\n    super(new ParseSpan(0, isBlank(source) ? 0 : source.length));\n  }\n  visit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n  toString(): string { return `${this.source} in ${this.location}`; }\n}\n\nexport class TemplateBinding {\n  constructor(\n      public key: string, public keyIsVar: boolean, public name: string,\n      public expression: ASTWithSource) {}\n}\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n}\n\nexport class RecursiveAstVisitor implements AstVisitor {\n  visitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n  visitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n  visitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n  visitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitFunctionCall(ast: FunctionCall, context: any): any {\n    ast.target.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n  visitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n  visitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n  visitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n  visitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n  visitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n  visitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n  visitQuote(ast: Quote, context: any): any { return null; }\n}\n\nexport class AstTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n  visitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n\n  visitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n\n  visitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\n  }\n\n  visitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n\n  visitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n\n  visitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n\n  visitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n\n  visitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n\n  visitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n\n  visitAll(asts: any[]): any[] {\n    var res = new Array(asts.length);\n    for (var i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  visitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n\n  visitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}