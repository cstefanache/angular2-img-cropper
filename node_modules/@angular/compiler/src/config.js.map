{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/config.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,iBAAiB,EAAE,SAAS,EAAC,MAAM,eAAe;OAGnD,EAAC,WAAW,EAAE,iBAAiB,EAAC,MAAM,eAAe;AAE5D;IACE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;AACnC,CAAC;AAED;IAOE,wBACI,EAOM;YAPN,4BAOM,EAPL,mBAAsC,EAAtC,2DAAsC,EAAE,4BAAiD,EAAjD,sEAAiD,EACzF,8BAAY,EAAE,sCAAgB,EAAE,cAAa,EAAb,kCAAa;QAOhD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,sBAAI,wCAAY;aAAhB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1E,CAAC;;;OAAA;IACD,sBAAI,4CAAgB;aAApB;YACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,KAAK,KAAK,CAAC,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAClF,CAAC;;;OAAA;IACH,qBAAC;AAAD,CAAC,AA7BD,IA6BC;AAED;;;;GAIG;AACH;IAAA;IAOA,CAAC;IANC,sBAAI,iCAAQ;aAAZ,cAA4C,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACrE,sBAAI,mCAAU;aAAd,cAA8C,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACvE,sBAAI,sCAAa;aAAjB,cAAiD,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC1E,sBAAI,sCAAa;aAAjB,cAAiD,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC1E,sBAAI,mCAAU;aAAd,cAA8C,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACvE,sBAAI,oCAAW;aAAf,cAA+C,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC1E,kBAAC;AAAD,CAAC,AAPD,IAOC;AAED;IAAA;QAEE,eAAU,GAAQ,IAAI,CAAC;QACvB,kBAAa,GAAQ,IAAI,CAAC;QAC1B,kBAAa,GAAQ,IAAI,CAAC;QAC1B,eAAU,GAAQ,IAAI,CAAC;QACvB,gBAAW,GAAQ,IAAI,CAAC;IAC1B,CAAC;IANC,sBAAI,wCAAQ;aAAZ,cAAiB,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;OAAA;;IAMpE,yBAAC;AAAD,CAAC,AAPD,IAOC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation, isDevMode} from '@angular/core';\n\nimport {CompileIdentifierMetadata} from './compile_metadata';\nimport {Identifiers, resolveIdentifier} from './identifiers';\n\nfunction unimplemented(): any {\n  throw new Error('unimplemented');\n}\n\nexport class CompilerConfig {\n  public renderTypes: RenderTypes;\n  public defaultEncapsulation: ViewEncapsulation;\n  private _genDebugInfo: boolean;\n  private _logBindingUpdate: boolean;\n  public useJit: boolean;\n\n  constructor(\n      {renderTypes = new DefaultRenderTypes(), defaultEncapsulation = ViewEncapsulation.Emulated,\n       genDebugInfo, logBindingUpdate, useJit = true}: {\n        renderTypes?: RenderTypes,\n        defaultEncapsulation?: ViewEncapsulation,\n        genDebugInfo?: boolean,\n        logBindingUpdate?: boolean,\n        useJit?: boolean\n      } = {}) {\n    this.renderTypes = renderTypes;\n    this.defaultEncapsulation = defaultEncapsulation;\n    this._genDebugInfo = genDebugInfo;\n    this._logBindingUpdate = logBindingUpdate;\n    this.useJit = useJit;\n  }\n\n  get genDebugInfo(): boolean {\n    return this._genDebugInfo === void 0 ? isDevMode() : this._genDebugInfo;\n  }\n  get logBindingUpdate(): boolean {\n    return this._logBindingUpdate === void 0 ? isDevMode() : this._logBindingUpdate;\n  }\n}\n\n/**\n * Types used for the renderer.\n * Can be replaced to specialize the generated output to a specific renderer\n * to help tree shaking.\n */\nexport abstract class RenderTypes {\n  get renderer(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderText(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderElement(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderComment(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderNode(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderEvent(): CompileIdentifierMetadata { return unimplemented(); }\n}\n\nexport class DefaultRenderTypes implements RenderTypes {\n  get renderer() { return resolveIdentifier(Identifiers.Renderer); };\n  renderText: any = null;\n  renderElement: any = null;\n  renderComment: any = null;\n  renderNode: any = null;\n  renderEvent: any = null;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}