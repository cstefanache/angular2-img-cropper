{"version":3,"file":"path_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/path_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,gDAAgD;AAChD,IAAI,aAAa,GAAG,gCAAgC,CAAC;AAErD;;GAEG;AACH;IAAA;IAIA,CAAC;IAHQ,6BAAa,GAApB,UAAqB,GAAW,IAAc,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAG7E,sBAAC;AAAD,CAAC,AAJD,IAIC;AAED;IAYE,kBAAmB,WAAmB,EAAS,aAAqB,EAAS,UAAkB;QAA5E,gBAAW,GAAX,WAAW,CAAQ;QAAS,kBAAa,GAAb,aAAa,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAQ;IAC/F,CAAC;IAZM,cAAK,GAAZ,UAAa,GAAW,EAAE,gBAAgC;QAAhC,gCAAgC,GAAhC,uBAAgC;QACxD,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC;QACD,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,SAAO,GAAG,+BAA4B,CAAC,CAAC;IAC1D,CAAC;IAIH,eAAC;AAAD,CAAC,AAdD,IAcC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// asset:<package-name>/<realm>/<path-to-module>\nvar _ASSET_URL_RE = /asset:([^\\/]+)\\/([^\\/]+)\\/(.+)/;\n\n/**\n * Interface that defines how import statements should be generated.\n */\nexport abstract class ImportGenerator {\n  static parseAssetUrl(url: string): AssetUrl { return AssetUrl.parse(url); }\n\n  abstract getImportPath(moduleUrlStr: string, importedUrlStr: string): string;\n}\n\nexport class AssetUrl {\n  static parse(url: string, allowNonMatching: boolean = true): AssetUrl {\n    const match = url.match(_ASSET_URL_RE);\n    if (match !== null) {\n      return new AssetUrl(match[1], match[2], match[3]);\n    }\n    if (allowNonMatching) {\n      return null;\n    }\n    throw new Error(`Url ${url} is not a valid asset: url`);\n  }\n\n  constructor(public packageName: string, public firstLevelDir: string, public modulePath: string) {\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}