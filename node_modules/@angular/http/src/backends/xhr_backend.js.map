{"version":3,"file":"xhr_backend.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/backends/xhr_backend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {__platform_browser_private__} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {isPresent, isString} from '../facade/lang';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      let _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (isPresent(req.withCredentials)) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      let onLoad = () => {\n        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n        // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n        // by IE10)\n        let body = _xhr.response === undefined ? _xhr.responseText : _xhr.response;\n        // Implicitly strip a potential XSSI prefix.\n        if (isString(body)) body = body.replace(XSSI_PREFIX, '');\n        let headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n\n        let url = getResponseURL(_xhr);\n\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        let statusText = _xhr.statusText || 'OK';\n\n        var responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (isPresent(baseResponseOptions)) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        let response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      let onError = (err: any) => {\n        var responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (isPresent(baseResponseOptions)) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (isPresent(req.headers)) {\n        req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n      }\n\n      // Select the correct buffer type to store the response\n      if (isPresent(req.responseType) && isPresent(_xhr.responseType)) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO #9100 */, _xhr: any /** TODO #9100 */) {\n    // Skip if a custom Content-Type header is provided\n    if (isPresent(req.headers) && isPresent(req.headers.get('Content-Type'))) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        var blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See {@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request) {\n    let xsrfToken = __platform_browser_private__.getDOM().getCookie(this._cookieName);\n    if (xsrfToken && !req.headers.has(this._headerName)) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @experimental\n */\n\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}