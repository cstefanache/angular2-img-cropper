{"version":3,"file":"common_tools.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/browser/tools/common_tools.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,cAAc,EAAe,MAAM,eAAe;OAEnD,EAAC,MAAM,EAAC,MAAM,uBAAuB;OACrC,EAAC,MAAM,EAAC,MAAM,sBAAsB;OACpC,EAAC,aAAa,EAAE,SAAS,EAAC,MAAM,mBAAmB;AAG1D;IACE,mCAAmB,SAAiB,EAAS,QAAgB;QAA1C,cAAS,GAAT,SAAS,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IACnE,gCAAC;AAAD,CAAC,AAFD,IAEC;AAED;;;GAGG;AACH;IAGE,sBAAY,GAAsB;QAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC;IAAC,CAAC;IACnF,mBAAC;AAAD,CAAC,AAJD,IAIC;AAED;;;GAGG;AACH;IAGE,yBAAY,GAAsB;QAAI,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAAC,CAAC;IAEvF;;;;;;;;;;;;;;;OAeG;IACH,6CAAmB,GAAnB,UAAoB,MAAW;QAC7B,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,kBAAkB,CAAC;QACrC,sFAAsF;QACtF,IAAI,mBAAmB,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,MAAM,IAAI,mBAAmB,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtC,CAAC;QACD,IAAI,KAAK,GAAG,MAAM,EAAE,CAAC,cAAc,EAAE,CAAC;QACtC,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,OAAO,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,cAAc,EAAE,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACnB,QAAQ,EAAE,CAAC;QACb,CAAC;QACD,IAAI,GAAG,GAAG,MAAM,EAAE,CAAC,cAAc,EAAE,CAAC;QACpC,EAAE,CAAC,CAAC,MAAM,IAAI,mBAAmB,CAAC,CAAC,CAAC;YAClC,wEAAwE;YACxE,0BAA0B;YAC1B,EAAE;YACF,sEAAsE;YAChE,MAAM,CAAC,OAAO,CAAC,UAAW,CAAC,WAAW,CAAC,CAAC;QAChD,CAAC;QACD,IAAI,SAAS,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAO,QAAQ,6BAA0B,CAAC,CAAC;QAC9D,MAAM,CAAC,OAAO,CAAC,GAAG,CAAI,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,kBAAe,CAAC,CAAC;QAE1E,MAAM,CAAC,IAAI,yBAAyB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IACH,sBAAC;AAAD,CAAC,AAjDD,IAiDC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {window} from '../../facade/browser';\nimport {NumberWrapper, isPresent} from '../../facade/lang';\n\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular debug tools. This object corresponds to the `ng`\n * global variable accessible in the dev console.\n */\nexport class AngularTools {\n  profiler: AngularProfiler;\n\n  constructor(ref: ComponentRef<any>) { this.profiler = new AngularProfiler(ref); }\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) { this.appRef = ref.injector.get(ApplicationRef); }\n\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    var record = isPresent(config) && config['record'];\n    var profileName = 'Change Detection';\n    // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n    var isProfilerAvailable = isPresent(window.console.profile);\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    var start = getDOM().performanceNow();\n    var numTicks = 0;\n    while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    var end = getDOM().performanceNow();\n    if (record && isProfilerAvailable) {\n      // need to cast to <any> because type checker thinks there's no argument\n      // while in fact there is:\n      //\n      // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n      (<any>window.console.profileEnd)(profileName);\n    }\n    var msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${NumberWrapper.toFixed(msPerTick, 2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}