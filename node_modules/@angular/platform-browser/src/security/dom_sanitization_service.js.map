{"version":3,"file":"dom_sanitization_service.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser/src/security/dom_sanitization_service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @stable\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: any): string;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n\n\nexport class DomSanitizerImpl extends DomSanitizer {\n  sanitize(ctx: SecurityContext, value: any): string {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle(value);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  private checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n  bypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n  bypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n  bypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() { return 'ResourceURL'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}