{"version":3,"file":"template_ref.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/template_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAOH;;;;;;;;;;;;GAYG;AACH;IAAA;IAgBA,CAAC;IAHC,sBAAI,mCAAU;QAZd;;;;;;;;;;WAUG;QACH,wCAAwC;aACxC,cAA+B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAG/C,kBAAC;AAAD,CAAC,AAhBD,IAgBC;AAED;IAAqC,gCAAc;IACjD,sBAAoB,WAAuB,EAAU,YAAsB;QAAI,iBAAO,CAAC;QAAnE,gBAAW,GAAX,WAAW,CAAY;QAAU,iBAAY,GAAZ,YAAY,CAAU;IAAa,CAAC;IAEzF,yCAAkB,GAAlB,UAAmB,OAAU;QAC3B,IAAI,IAAI,GAAe,IAAI,CAAC,YAAY,CACpC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9F,IAAI,CAAC,MAAM,CAAC,OAAO,IAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,sBAAI,oCAAU;aAAd,cAA+B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IACtE,mBAAC;AAAD,CAAC,AAXD,CAAqC,WAAW,GAW/C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AppElement} from './element';\nimport {ElementRef} from './element_ref';\nimport {AppView} from './view';\nimport {EmbeddedViewRef} from './view_ref';\n\n/**\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\n *\n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n * `TemplateRef` from a Component or a Directive via {@link Query}.\n *\n * To instantiate Embedded Views based on a Template, use\n * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n * View Container.\n * @stable\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The location in the View where the Embedded View logically belongs to.\n   *\n   * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`\n   * inherit from the contexts of this location.\n   *\n   * Typically new Embedded Views are attached to the View Container of this location, but in\n   * advanced use-cases, the View can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  get elementRef(): ElementRef { return null; }\n\n  abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n}\n\nexport class TemplateRef_<C> extends TemplateRef<C> {\n  constructor(private _appElement: AppElement, private _viewFactory: Function) { super(); }\n\n  createEmbeddedView(context: C): EmbeddedViewRef<C> {\n    var view: AppView<C> = this._viewFactory(\n        this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);\n    view.create(context || <any>{}, null, null);\n    return view.ref;\n  }\n\n  get elementRef(): ElementRef { return this._appElement.elementRef; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}