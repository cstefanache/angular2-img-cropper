{"version":3,"file":"reflection_capabilities.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/reflection/reflection_capabilities.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global, isFunction, isPresent, stringify} from '../facade/lang';\nimport {Type} from '../type';\n\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n\nexport class ReflectionCapabilities implements PlatformReflectionCapabilities {\n  private _reflect: any;\n\n  constructor(reflect?: any) { this._reflect = reflect || global.Reflect; }\n\n  isReflectionEnabled(): boolean { return true; }\n\n  factory<T>(t: Type<T>): (args: any[]) => T { return (...args: any[]) => new t(...args); }\n\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][] {\n    var result: any[][];\n\n    if (typeof paramTypes === 'undefined') {\n      result = new Array(paramAnnotations.length);\n    } else {\n      result = new Array(paramTypes.length);\n    }\n\n    for (var i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && isPresent(paramAnnotations[i])) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n\n  parameters(type: Type<any>): any[][] {\n    // Prefer the direct API.\n    if ((<any>type).parameters) {\n      return (<any>type).parameters;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>type).ctorParameters) {\n      const ctorParameters = (<any>type).ctorParameters;\n      const paramTypes = ctorParameters.map((ctorParam: any) => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(\n          (ctorParam: any) =>\n              ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {\n      const paramAnnotations = this._reflect.getMetadata('parameters', type);\n      const paramTypes = this._reflect.getMetadata('design:paramtypes', type);\n      if (paramTypes || paramAnnotations) {\n        return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n      }\n    }\n    // The array has to be filled with `undefined` because holes would be skipped by `some`\n    return new Array((<any>type.length)).fill(undefined);\n  }\n\n  annotations(typeOrFunc: Type<any>): any[] {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).annotations) {\n      let annotations = (<any>typeOrFunc).annotations;\n      if (isFunction(annotations) && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).decorators) {\n      return convertTsickleDecoratorIntoMetadata((<any>typeOrFunc).decorators);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect && this._reflect.getMetadata) {\n      const annotations = this._reflect.getMetadata('annotations', typeOrFunc);\n      if (annotations) return annotations;\n    }\n    return [];\n  }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).propMetadata) {\n      let propMetadata = (<any>typeOrFunc).propMetadata;\n      if (isFunction(propMetadata) && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).propDecorators) {\n      const propDecorators = (<any>typeOrFunc).propDecorators;\n      const propMetadata = <{[key: string]: any[]}>{};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect && this._reflect.getMetadata) {\n      const propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);\n      if (propMetadata) return propMetadata;\n    }\n    return {};\n  }\n\n  // Note: JavaScript does not support to query for interfaces during runtime.\n  // However, we can't throw here as the reflector will always call this method\n  // when asked for a lifecycle interface as this is what we check in Dart.\n  interfaces(type: Type<any>): any[] { return []; }\n\n  hasLifecycleHook(type: any, lcInterface: Type<any>, lcProperty: string): boolean {\n    if (!(type instanceof Type)) return false;\n\n    const proto = (<any>type).prototype;\n    return !!proto[lcProperty];\n  }\n\n  getter(name: string): GetterFn { return <GetterFn>new Function('o', 'return o.' + name + ';'); }\n\n  setter(name: string): SetterFn {\n    return <SetterFn>new Function('o', 'v', 'return o.' + name + ' = v;');\n  }\n\n  method(name: string): MethodFn {\n    const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n    return <MethodFn>new Function('o', 'args', functionBody);\n  }\n\n  // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n  importUri(type: any): string {\n    // StaticSymbol\n    if (typeof type === 'object' && type['filePath']) {\n      return type['filePath'];\n    }\n    // Runtime type\n    return `./${stringify(type)}`;\n  }\n\n  resolveIdentifier(name: string, moduleUrl: string, runtime: any): any { return runtime; }\n  resolveEnum(enumIdentifier: any, name: string): any { return enumIdentifier[name]; }\n}\n\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations: any[]): any[] {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}