{"version":3,"file":"change_detection_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/change_detection/change_detection_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,iBAAiB,EAAE,kBAAkB,EAAC,MAAM,sBAAsB;OACnE,EAAC,WAAW,EAAE,cAAc,EAAC,MAAM,gBAAgB;AAE1D,SAAQ,cAAc,QAAO,gBAAgB,CAAC;AAE9C,OAAO,IAAM,aAAa,GAAG;IAC3B,QAAQ,EAAE,cAAM,OAAA,eAAe,EAAf,CAAe;CAChC,CAAC;AAEF,6BAA6B,CAAM,EAAE,CAAM;IACzC,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;IAE/C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CACN,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,IAAI,CAAC;IAEd,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;GAkBG;AACH;IACE,sBAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;IAAG,CAAC;IAE5B,iBAAI,GAAX,UAAY,KAAU,IAAkB,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,mBAAC;AAAD,CAAC,AAJD,IAIC;AAED;;GAEG;AACH;IAAA;QACS,oBAAe,GAAG,KAAK,CAAC;IAWjC,CAAC;IATC,+BAAM,GAAN,UAAO,KAAU;QACf,EAAE,CAAC,CAAC,KAAK,YAAY,YAAY,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,8BAAK,GAAL,cAAU,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC,CAAC;IAC3C,qBAAC;AAAD,CAAC,AAZD,IAYC;AAED;;;GAGG;AACH;IACE,sBAAmB,aAAkB,EAAS,YAAiB;QAA5C,kBAAa,GAAb,aAAa,CAAK;QAAS,iBAAY,GAAZ,YAAY,CAAK;IAAG,CAAC;IAEnE;;OAEG;IACH,oCAAa,GAAb,cAA2B,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,aAAa,CAAC,CAAC,CAAC;IAC3E,mBAAC;AAAD,CAAC,AAPD,IAOC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {areIterablesEqual, isListLikeIterable} from '../facade/collection';\nimport {isPrimitive, looseIdentical} from '../facade/lang';\n\nexport {looseIdentical} from '../facade/lang';\n\nexport const UNINITIALIZED = {\n  toString: () => 'CD_INIT_VALUE'\n};\n\nexport function devModeEqual(a: any, b: any): boolean {\n  if (isListLikeIterable(a) && isListLikeIterable(b)) {\n    return areIterablesEqual(a, b, devModeEqual);\n\n  } else if (\n      !isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n    return true;\n\n  } else {\n    return looseIdentical(a, b);\n  }\n}\n\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference\n * has not changed.\n *\n * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n * @stable\n */\nexport class WrappedValue {\n  constructor(public wrapped: any) {}\n\n  static wrap(value: any): WrappedValue { return new WrappedValue(value); }\n}\n\n/**\n * Helper class for unwrapping WrappedValue s\n */\nexport class ValueUnwrapper {\n  public hasWrappedValue = false;\n\n  unwrap(value: any): any {\n    if (value instanceof WrappedValue) {\n      this.hasWrappedValue = true;\n      return value.wrapped;\n    }\n    return value;\n  }\n\n  reset() { this.hasWrappedValue = false; }\n}\n\n/**\n * Represents a basic change from a previous to a new value.\n * @stable\n */\nexport class SimpleChange {\n  constructor(public previousValue: any, public currentValue: any) {}\n\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange(): boolean { return this.previousValue === UNINITIALIZED; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}