{"version":3,"file":"platform_location.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/location/platform_location.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH;IAAA;IAgBA,CAAC;IAXC,sBAAI,sCAAQ;aAAZ,cAAyB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IACvC,sBAAI,oCAAM;aAAV,cAAuB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IACrC,sBAAI,kCAAI;aAAR,cAAqB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IASrC,uBAAC;AAAD,CAAC,AAhBD,IAgBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms\n * that angular supports. For example, the default `PlatformLocation` is {@link\n * BrowserPlatformLocation},\n * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when\n * they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by\n * the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class\n * they are all platform independent.\n *\n * @stable\n */\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n\n  get pathname(): string { return null; }\n  get search(): string { return null; }\n  get hash(): string { return null; }\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n}\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}