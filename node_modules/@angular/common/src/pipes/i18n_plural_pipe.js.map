{"version":3,"file":"i18n_plural_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/pipes/i18n_plural_pipe.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,IAAI,EAAgB,MAAM,eAAe;OAC1C,EAAC,OAAO,EAAE,WAAW,EAAC,MAAM,gBAAgB;OAC5C,EAAC,cAAc,EAAE,iBAAiB,EAAC,MAAM,iBAAiB;OAC1D,EAAC,wBAAwB,EAAC,MAAM,+BAA+B;AAEtE,IAAM,qBAAqB,GAAW,IAAI,CAAC;AAE3C;;;;;;;;;;;;;;;;GAgBG;AAEH;IACE,wBAAoB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IAAG,CAAC;IAErD,kCAAS,GAAT,UAAU,KAAa,EAAE,SAAoC;QAC3D,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAE9B,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,wBAAwB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAChE,CAAC;QAED,IAAM,GAAG,GAAG,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAEjF,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzE,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAC,EAAG,EAAE;KACzD,CAAC;IACF,kBAAkB;IACX,6BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,cAAc,GAAG;KACvB,CAAC;IACF,qBAAC;AAAD,CAAC,AArBD,IAqBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {isBlank, isStringMap} from '../facade/lang';\nimport {NgLocalization, getPluralCategory} from '../localization';\nimport {InvalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst _INTERPOLATION_REGEXP: RegExp = /#/g;\n\n/**\n * @ngModule CommonModule\n * @whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * @howToUse `expression | i18nPlural:mapping`\n * @description\n *\n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n *\n *  ## Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @experimental\n */\n\nexport class I18nPluralPipe implements PipeTransform {\n  constructor(private _localization: NgLocalization) {}\n\n  transform(value: number, pluralMap: {[count: string]: string}): string {\n    if (isBlank(value)) return '';\n\n    if (!isStringMap(pluralMap)) {\n      throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgLocalization, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}