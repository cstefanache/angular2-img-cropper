{"version":3,"file":"typescript.mocks.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/test/typescript.mocks.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nexport interface Directory { [name: string]: (Directory|string); }\n\nexport class Host implements ts.LanguageServiceHost {\n  constructor(private directory: Directory, private scripts: string[]) {}\n\n  getCompilationSettings(): ts.CompilerOptions {\n    return {\n      experimentalDecorators: true,\n      module: ts.ModuleKind.CommonJS,\n      target: ts.ScriptTarget.ES5\n    };\n  }\n\n  getScriptFileNames(): string[] { return this.scripts; }\n\n  getScriptVersion(fileName: string): string { return '1'; }\n\n  getScriptSnapshot(fileName: string): ts.IScriptSnapshot {\n    let content = this.getFileContent(fileName);\n    if (content) return ts.ScriptSnapshot.fromString(content);\n  }\n\n  getCurrentDirectory(): string { return '/'; }\n\n  getDefaultLibFileName(options: ts.CompilerOptions): string { return 'lib.d.ts'; }\n\n  private getFileContent(fileName: string): string {\n    const names = fileName.split('/');\n    if (names[names.length - 1] === 'lib.d.ts') {\n      return fs.readFileSync(ts.getDefaultLibFilePath(this.getCompilationSettings()), 'utf8');\n    }\n    let current: Directory|string = this.directory;\n    if (names.length && names[0] === '') names.shift();\n    for (const name of names) {\n      if (!current || typeof current === 'string') return undefined;\n      current = (<any>current)[name];\n    }\n    if (typeof current === 'string') return current;\n  }\n}\n\nexport class MockNode implements ts.Node {\n  constructor(\n      public kind: ts.SyntaxKind = ts.SyntaxKind.Identifier, public flags: ts.NodeFlags = 0,\n      public pos: number = 0, public end: number = 0) {}\n  getSourceFile(): ts.SourceFile { return null; }\n  getChildCount(sourceFile?: ts.SourceFile): number { return 0 }\n  getChildAt(index: number, sourceFile?: ts.SourceFile): ts.Node { return null; }\n  getChildren(sourceFile?: ts.SourceFile): ts.Node[] { return []; }\n  getStart(sourceFile?: ts.SourceFile): number { return 0; }\n  getFullStart(): number { return 0; }\n  getEnd(): number { return 0; }\n  getWidth(sourceFile?: ts.SourceFile): number { return 0; }\n  getFullWidth(): number { return 0; }\n  getLeadingTriviaWidth(sourceFile?: ts.SourceFile): number { return 0; }\n  getFullText(sourceFile?: ts.SourceFile): string { return ''; }\n  getText(sourceFile?: ts.SourceFile): string { return ''; }\n  getFirstToken(sourceFile?: ts.SourceFile): ts.Node { return null; }\n  getLastToken(sourceFile?: ts.SourceFile): ts.Node { return null; }\n}\n\nexport class MockIdentifier extends MockNode implements ts.Identifier {\n  public text: string;\n  public _primaryExpressionBrand: any;\n  public _memberExpressionBrand: any;\n  public _leftHandSideExpressionBrand: any;\n  public _incrementExpressionBrand: any;\n  public _unaryExpressionBrand: any;\n  public _expressionBrand: any;\n\n  constructor(\n      public name: string, kind: ts.SyntaxKind = ts.SyntaxKind.Identifier, flags: ts.NodeFlags = 0,\n      pos: number = 0, end: number = 0) {\n    super(kind, flags, pos, end);\n    this.text = name;\n  }\n}\n\nexport class MockVariableDeclaration extends MockNode implements ts.VariableDeclaration {\n  public _declarationBrand: any;\n\n  constructor(\n      public name: ts.Identifier, kind: ts.SyntaxKind = ts.SyntaxKind.VariableDeclaration,\n      flags: ts.NodeFlags = 0, pos: number = 0, end: number = 0) {\n    super(kind, flags, pos, end);\n  }\n\n  static of (name: string): MockVariableDeclaration {\n    return new MockVariableDeclaration(new MockIdentifier(name));\n  }\n}\n\nexport class MockSymbol implements ts.Symbol {\n  constructor(\n      public name: string, private node: ts.Declaration = MockVariableDeclaration.of(name),\n      public flags: ts.SymbolFlags = 0) {}\n\n  getFlags(): ts.SymbolFlags { return this.flags; }\n  getName(): string { return this.name; }\n  getDeclarations(): ts.Declaration[] { return [this.node]; }\n  getDocumentationComment(): ts.SymbolDisplayPart[] { return []; }\n\n  static of (name: string): MockSymbol { return new MockSymbol(name); }\n}\n\nexport function expectNoDiagnostics(diagnostics: ts.Diagnostic[]) {\n  for (const diagnostic of diagnostics) {\n    let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n    let {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n    console.log(`${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);\n  }\n  expect(diagnostics.length).toBe(0);\n}\n\nexport function expectValidSources(service: ts.LanguageService, program: ts.Program) {\n  expectNoDiagnostics(service.getCompilerOptionsDiagnostics());\n  for (const sourceFile of program.getSourceFiles()) {\n    expectNoDiagnostics(service.getSyntacticDiagnostics(sourceFile.fileName));\n    expectNoDiagnostics(service.getSemanticDiagnostics(sourceFile.fileName));\n  }\n}\n\nexport function allChildren<T>(node: ts.Node, cb: (node: ts.Node) => T): T {\n  return ts.forEachChild(node, child => {\n    const result = cb(node);\n    if (result) {\n      return result;\n    }\n    return allChildren(child, cb);\n  })\n}\n\nexport function findClass(sourceFile: ts.SourceFile, name: string): ts.ClassDeclaration {\n  return ts.forEachChild(\n      sourceFile, node => isClass(node) && isNamed(node.name, name) ? node : undefined);\n}\n\nexport function findVar(sourceFile: ts.SourceFile, name: string): ts.VariableDeclaration {\n  return allChildren(\n      sourceFile, node => isVar(node) && isNamed(node.name, name) ? node : undefined);\n}\n\nexport function isClass(node: ts.Node): node is ts.ClassDeclaration {\n  return node.kind === ts.SyntaxKind.ClassDeclaration;\n}\n\nexport function isNamed(node: ts.Node, name: string): node is ts.Identifier {\n  return node.kind === ts.SyntaxKind.Identifier && (<ts.Identifier>node).text === name;\n}\n\nexport function isVar(node: ts.Node): node is ts.VariableDeclaration {\n  return node.kind === ts.SyntaxKind.VariableDeclaration;\n}\n"]}