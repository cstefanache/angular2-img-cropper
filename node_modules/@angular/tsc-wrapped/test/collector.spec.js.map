{"version":3,"file":"collector.spec.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/test/collector.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\nimport {MetadataCollector} from '../src/collector';\nimport {ClassMetadata, ConstructorMetadata, ModuleMetadata} from '../src/schema';\n\nimport {Directory, Host, expectValidSources} from './typescript.mocks';\n\ndescribe('Collector', () => {\n  let documentRegistry = ts.createDocumentRegistry();\n  let host: ts.LanguageServiceHost;\n  let service: ts.LanguageService;\n  let program: ts.Program;\n  let collector: MetadataCollector;\n\n  beforeEach(() => {\n    host = new Host(FILES, [\n      '/app/app.component.ts',\n      '/app/cases-data.ts',\n      '/app/error-cases.ts',\n      '/promise.ts',\n      '/unsupported-1.ts',\n      '/unsupported-2.ts',\n      'import-star.ts',\n      'exported-functions.ts',\n      'exported-enum.ts',\n      'exported-consts.ts',\n      'local-symbol-ref.ts',\n      'local-function-ref.ts',\n      'local-symbol-ref-func.ts',\n      'local-symbol-ref-func-dynamic.ts',\n      'private-enum.ts',\n      're-exports.ts',\n      'static-field-reference.ts',\n      'static-method.ts',\n      'static-method-call.ts',\n      'static-method-with-if.ts',\n      'static-method-with-default.ts',\n    ]);\n    service = ts.createLanguageService(host, documentRegistry);\n    program = service.getProgram();\n    collector = new MetadataCollector();\n  });\n\n  it('should not have errors in test data', () => { expectValidSources(service, program); });\n\n  it('should return undefined for modules that have no metadata', () => {\n    const sourceFile = program.getSourceFile('app/hero.ts');\n    const metadata = collector.getMetadata(sourceFile);\n    expect(metadata).toBeUndefined();\n  });\n\n  it('should be able to collect a simple component\\'s metadata', () => {\n    const sourceFile = program.getSourceFile('app/hero-detail.component.ts');\n    const metadata = collector.getMetadata(sourceFile);\n    expect(metadata).toEqual({\n      __symbolic: 'module',\n      version: 1,\n      metadata: {\n        HeroDetailComponent: {\n          __symbolic: 'class',\n          decorators: [{\n            __symbolic: 'call',\n            expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Component'},\n            arguments: [{\n              selector: 'my-hero-detail',\n              template: `\n        <div *ngIf=\"hero\">\n          <h2>{{hero.name}} details!</h2>\n          <div><label>id: </label>{{hero.id}}</div>\n          <div>\n            <label>name: </label>\n            <input [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n          </div>\n        </div>\n      `\n            }]\n          }],\n          members: {\n            hero: [{\n              __symbolic: 'property',\n              decorators: [{\n                __symbolic: 'call',\n                expression:\n                    {__symbolic: 'reference', module: 'angular2/core', name: 'Input'}\n              }]\n            }]\n          }\n        }\n      }\n    });\n  });\n\n  it('should be able to get a more complicated component\\'s metadata', () => {\n    const sourceFile = program.getSourceFile('/app/app.component.ts');\n    const metadata = collector.getMetadata(sourceFile);\n    expect(metadata).toEqual({\n      __symbolic: 'module',\n      version: 1,\n      metadata: {\n        AppComponent: {\n          __symbolic: 'class',\n          decorators: [{\n            __symbolic: 'call',\n            expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Component'},\n            arguments: [{\n              selector: 'my-app',\n              template: `\n        <h2>My Heroes</h2>\n        <ul class=\"heroes\">\n          <li *ngFor=\"#hero of heroes\"\n            (click)=\"onSelect(hero)\"\n            [class.selected]=\"hero === selectedHero\">\n            <span class=\"badge\">{{hero.id | lowercase}}</span> {{hero.name | uppercase}}\n          </li>\n        </ul>\n        <my-hero-detail [hero]=\"selectedHero\"></my-hero-detail>\n        `,\n              directives: [\n                {\n                  __symbolic: 'reference',\n                  module: './hero-detail.component',\n                  name: 'HeroDetailComponent',\n                },\n                {__symbolic: 'reference', module: 'angular2/common', name: 'NgFor'}\n              ],\n              providers: [{__symbolic: 'reference', module: './hero.service', default: true}],\n              pipes: [\n                {__symbolic: 'reference', module: 'angular2/common', name: 'LowerCasePipe'},\n                {__symbolic: 'reference', module: 'angular2/common', name: 'UpperCasePipe'}\n              ]\n            }]\n          }],\n          members: {\n            __ctor__: [{\n              __symbolic: 'constructor',\n              parameters: [{__symbolic: 'reference', module: './hero.service', default: true}]\n            }],\n            onSelect: [{__symbolic: 'method'}],\n            ngOnInit: [{__symbolic: 'method'}],\n            getHeroes: [{__symbolic: 'method'}]\n          }\n        }\n      }\n    });\n  });\n\n  it('should return the values of exported variables', () => {\n    const sourceFile = program.getSourceFile('/app/mock-heroes.ts');\n    const metadata = collector.getMetadata(sourceFile);\n    expect(metadata).toEqual({\n      __symbolic: 'module',\n      version: 1,\n      metadata: {\n        HEROES: [\n          {'id': 11, 'name': 'Mr. Nice'}, {'id': 12, 'name': 'Narco'},\n          {'id': 13, 'name': 'Bombasto'}, {'id': 14, 'name': 'Celeritas'},\n          {'id': 15, 'name': 'Magneta'}, {'id': 16, 'name': 'RubberMan'},\n          {'id': 17, 'name': 'Dynama'}, {'id': 18, 'name': 'Dr IQ'}, {'id': 19, 'name': 'Magma'},\n          {'id': 20, 'name': 'Tornado'}\n        ]\n      }\n    });\n  });\n\n  it('should return undefined for modules that have no metadata', () => {\n    const sourceFile = program.getSourceFile('/app/error-cases.ts');\n    expect(sourceFile).toBeTruthy(sourceFile);\n    const metadata = collector.getMetadata(sourceFile);\n    expect(metadata).toBeUndefined();\n  });\n\n  let casesFile: ts.SourceFile;\n  let casesMetadata: ModuleMetadata;\n\n  beforeEach(() => {\n    casesFile = program.getSourceFile('/app/cases-data.ts');\n    casesMetadata = collector.getMetadata(casesFile);\n  });\n\n  it('should provide any reference for an any ctor parameter type', () => {\n    const casesAny = <ClassMetadata>casesMetadata.metadata['CaseAny'];\n    expect(casesAny).toBeTruthy();\n    const ctorData = casesAny.members['__ctor__'];\n    expect(ctorData).toEqual(\n        [{__symbolic: 'constructor', parameters: [{__symbolic: 'reference', name: 'any'}]}]);\n  });\n\n  it('should record annotations on set and get declarations', () => {\n    const propertyData = {\n      name: [{\n        __symbolic: 'property',\n        decorators: [{\n          __symbolic: 'call',\n          expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Input'},\n          arguments: ['firstName']\n        }]\n      }]\n    };\n    const caseGetProp = <ClassMetadata>casesMetadata.metadata['GetProp'];\n    expect(caseGetProp.members).toEqual(propertyData);\n    const caseSetProp = <ClassMetadata>casesMetadata.metadata['SetProp'];\n    expect(caseSetProp.members).toEqual(propertyData);\n    const caseFullProp = <ClassMetadata>casesMetadata.metadata['FullProp'];\n    expect(caseFullProp.members).toEqual(propertyData);\n  });\n\n  it('should record references to parameterized types', () => {\n    const casesForIn = <ClassMetadata>casesMetadata.metadata['NgFor'];\n    expect(casesForIn).toEqual({\n      __symbolic: 'class',\n      decorators: [{\n        __symbolic: 'call',\n        expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Injectable'}\n      }],\n      members: {\n        __ctor__: [{\n          __symbolic: 'constructor',\n          parameters: [{\n            __symbolic: 'reference',\n            name: 'ClassReference',\n            arguments: [{__symbolic: 'reference', name: 'NgForRow'}]\n          }]\n        }]\n      }\n    });\n  });\n\n  it('should report errors for destructured imports', () => {\n    let unsupported1 = program.getSourceFile('/unsupported-1.ts');\n    let metadata = collector.getMetadata(unsupported1);\n    expect(metadata).toEqual({\n      __symbolic: 'module',\n      version: 1,\n      metadata: {\n        a: {__symbolic: 'error', message: 'Destructuring not supported', line: 1, character: 16},\n        b: {__symbolic: 'error', message: 'Destructuring not supported', line: 1, character: 19},\n        c: {__symbolic: 'error', message: 'Destructuring not supported', line: 2, character: 16},\n        d: {__symbolic: 'error', message: 'Destructuring not supported', line: 2, character: 19},\n        e: {__symbolic: 'error', message: 'Variable not initialized', line: 3, character: 15}\n      }\n    });\n  });\n\n  it('should report an error for references to unexpected types', () => {\n    let unsupported1 = program.getSourceFile('/unsupported-2.ts');\n    let metadata = collector.getMetadata(unsupported1);\n    let barClass = <ClassMetadata>metadata.metadata['Bar'];\n    let ctor = <ConstructorMetadata>barClass.members['__ctor__'][0];\n    let parameter = ctor.parameters[0];\n    expect(parameter).toEqual({\n      __symbolic: 'error',\n      message: 'Reference to non-exported class',\n      line: 3,\n      character: 4,\n      context: {className: 'Foo'}\n    });\n  });\n\n  it('should be able to handle import star type references', () => {\n    let importStar = program.getSourceFile('/import-star.ts');\n    let metadata = collector.getMetadata(importStar);\n    let someClass = <ClassMetadata>metadata.metadata['SomeClass'];\n    let ctor = <ConstructorMetadata>someClass.members['__ctor__'][0];\n    let parameters = ctor.parameters;\n    expect(parameters).toEqual([\n      {__symbolic: 'reference', module: 'angular2/common', name: 'NgFor'}\n    ]);\n  });\n\n  it('should be able to record functions', () => {\n    let exportedFunctions = program.getSourceFile('/exported-functions.ts');\n    let metadata = collector.getMetadata(exportedFunctions);\n    expect(metadata).toEqual({\n      __symbolic: 'module',\n      version: 1,\n      metadata: {\n        one: {\n          __symbolic: 'function',\n          parameters: ['a', 'b', 'c'],\n          value: {\n            a: {__symbolic: 'reference', name: 'a'},\n            b: {__symbolic: 'reference', name: 'b'},\n            c: {__symbolic: 'reference', name: 'c'}\n          }\n        },\n        two: {\n          __symbolic: 'function',\n          parameters: ['a', 'b', 'c'],\n          value: {\n            a: {__symbolic: 'reference', name: 'a'},\n            b: {__symbolic: 'reference', name: 'b'},\n            c: {__symbolic: 'reference', name: 'c'}\n          }\n        },\n        three: {\n          __symbolic: 'function',\n          parameters: ['a', 'b', 'c'],\n          value: [\n            {__symbolic: 'reference', name: 'a'}, {__symbolic: 'reference', name: 'b'},\n            {__symbolic: 'reference', name: 'c'}\n          ]\n        },\n        supportsState: {\n          __symbolic: 'function',\n          parameters: [],\n          value: {\n            __symbolic: 'pre',\n            operator: '!',\n            operand: {\n              __symbolic: 'pre',\n              operator: '!',\n              operand: {\n                __symbolic: 'select',\n                expression: {\n                  __symbolic: 'select',\n                  expression: {__symbolic: 'reference', name: 'window'},\n                  member: 'history'\n                },\n                member: 'pushState'\n              }\n            }\n          }\n        }\n      }\n    });\n  });\n\n  it('should be able to handle import star type references', () => {\n    let importStar = program.getSourceFile('/import-star.ts');\n    let metadata = collector.getMetadata(importStar);\n    let someClass = <ClassMetadata>metadata.metadata['SomeClass'];\n    let ctor = <ConstructorMetadata>someClass.members['__ctor__'][0];\n    let parameters = ctor.parameters;\n    expect(parameters).toEqual([\n      {__symbolic: 'reference', module: 'angular2/common', name: 'NgFor'}\n    ]);\n  });\n\n  it('should be able to collect the value of an enum', () => {\n    let enumSource = program.getSourceFile('/exported-enum.ts');\n    let metadata = collector.getMetadata(enumSource);\n    let someEnum: any = metadata.metadata['SomeEnum'];\n    expect(someEnum).toEqual({A: 0, B: 1, C: 100, D: 101});\n  });\n\n  it('should ignore a non-export enum', () => {\n    let enumSource = program.getSourceFile('/private-enum.ts');\n    let metadata = collector.getMetadata(enumSource);\n    let publicEnum: any = metadata.metadata['PublicEnum'];\n    let privateEnum: any = metadata.metadata['PrivateEnum'];\n    expect(publicEnum).toEqual({a: 0, b: 1, c: 2});\n    expect(privateEnum).toBeUndefined();\n  });\n\n  it('should be able to collect enums initialized from consts', () => {\n    let enumSource = program.getSourceFile('/exported-enum.ts');\n    let metadata = collector.getMetadata(enumSource);\n    let complexEnum: any = metadata.metadata['ComplexEnum'];\n    expect(complexEnum).toEqual({\n      A: 0,\n      B: 1,\n      C: 30,\n      D: 40,\n      E: {__symbolic: 'reference', module: './exported-consts', name: 'constValue'}\n    });\n  });\n\n  it('should be able to collect a simple static method', () => {\n    let staticSource = program.getSourceFile('/static-method.ts');\n    let metadata = collector.getMetadata(staticSource);\n    expect(metadata).toBeDefined();\n    let classData = <ClassMetadata>metadata.metadata['MyModule'];\n    expect(classData).toBeDefined();\n    expect(classData.statics).toEqual({\n      with: {\n        __symbolic: 'function',\n        parameters: ['comp'],\n        value: [\n          {__symbolic: 'reference', name: 'MyModule'},\n          {provider: 'a', useValue: {__symbolic: 'reference', name: 'comp'}}\n        ]\n      }\n    });\n  });\n\n  it('should be able to collect a call to a static method', () => {\n    let staticSource = program.getSourceFile('/static-method-call.ts');\n    let metadata = collector.getMetadata(staticSource);\n    expect(metadata).toBeDefined();\n    let classData = <ClassMetadata>metadata.metadata['Foo'];\n    expect(classData).toBeDefined();\n    expect(classData.decorators).toEqual([{\n      __symbolic: 'call',\n      expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Component'},\n      arguments: [{\n        providers: {\n          __symbolic: 'call',\n          expression: {\n            __symbolic: 'select',\n            expression: {__symbolic: 'reference', module: './static-method', name: 'MyModule'},\n            member: 'with'\n          },\n          arguments: ['a']\n        }\n      }]\n    }]);\n  });\n\n  it('should be able to collect a static field', () => {\n    let staticSource = program.getSourceFile('/static-field.ts');\n    let metadata = collector.getMetadata(staticSource);\n    expect(metadata).toBeDefined();\n    let classData = <ClassMetadata>metadata.metadata['MyModule'];\n    expect(classData).toBeDefined();\n    expect(classData.statics).toEqual({VALUE: 'Some string'});\n  });\n\n  it('should be able to collect a reference to a static field', () => {\n    let staticSource = program.getSourceFile('/static-field-reference.ts');\n    let metadata = collector.getMetadata(staticSource);\n    expect(metadata).toBeDefined();\n    let classData = <ClassMetadata>metadata.metadata['Foo'];\n    expect(classData).toBeDefined();\n    expect(classData.decorators).toEqual([{\n      __symbolic: 'call',\n      expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Component'},\n      arguments: [{\n        providers: [{\n          provide: 'a',\n          useValue: {\n            __symbolic: 'select',\n            expression: {__symbolic: 'reference', module: './static-field', name: 'MyModule'},\n            member: 'VALUE'\n          }\n        }]\n      }]\n    }]);\n  });\n\n  it('should be able to collect a method with a conditional expression', () => {\n    let source = program.getSourceFile('/static-method-with-if.ts');\n    let metadata = collector.getMetadata(source);\n    expect(metadata).toBeDefined();\n    let classData = <ClassMetadata>metadata.metadata['MyModule'];\n    expect(classData).toBeDefined();\n    expect(classData.statics).toEqual({\n      with: {\n        __symbolic: 'function',\n        parameters: ['cond'],\n        value: [\n          {__symbolic: 'reference', name: 'MyModule'}, {\n            provider: 'a',\n            useValue: {\n              __symbolic: 'if',\n              condition: {__symbolic: 'reference', name: 'cond'},\n              thenExpression: '1',\n              elseExpression: '2'\n            }\n          }\n        ]\n      }\n    });\n  });\n\n  it('should be able to collect a method with a default parameter', () => {\n    let source = program.getSourceFile('/static-method-with-default.ts');\n    let metadata = collector.getMetadata(source);\n    expect(metadata).toBeDefined();\n    let classData = <ClassMetadata>metadata.metadata['MyModule'];\n    expect(classData).toBeDefined();\n    expect(classData.statics).toEqual({\n      with: {\n        __symbolic: 'function',\n        parameters: ['comp', 'foo', 'bar'],\n        defaults: [undefined, true, false],\n        value: [\n          {__symbolic: 'reference', name: 'MyModule'}, {\n            __symbolic: 'if',\n            condition: {__symbolic: 'reference', name: 'foo'},\n            thenExpression: {provider: 'a', useValue: {__symbolic: 'reference', name: 'comp'}},\n            elseExpression: {provider: 'b', useValue: {__symbolic: 'reference', name: 'comp'}}\n          },\n          {\n            __symbolic: 'if',\n            condition: {__symbolic: 'reference', name: 'bar'},\n            thenExpression: {provider: 'c', useValue: {__symbolic: 'reference', name: 'comp'}},\n            elseExpression: {provider: 'd', useValue: {__symbolic: 'reference', name: 'comp'}}\n          }\n        ]\n      }\n    });\n  });\n\n  it('should be able to collect re-exported symbols', () => {\n    let source = program.getSourceFile('/re-exports.ts');\n    let metadata = collector.getMetadata(source);\n    expect(metadata.exports).toEqual([\n      {from: './static-field', export: ['MyModule']},\n      {from: './static-field-reference', export: [{name: 'Foo', as: 'OtherModule'}]},\n      {from: 'angular2/core'}\n    ]);\n  });\n\n  it('should collect an error symbol if collecting a reference to a non-exported symbol', () => {\n    let source = program.getSourceFile('/local-symbol-ref.ts');\n    let metadata = collector.getMetadata(source);\n    expect(metadata.metadata).toEqual({\n      REQUIRED_VALIDATOR: {\n        __symbolic: 'error',\n        message: 'Reference to a local symbol',\n        line: 3,\n        character: 8,\n        context: {name: 'REQUIRED'}\n      },\n      SomeComponent: {\n        __symbolic: 'class',\n        decorators: [{\n          __symbolic: 'call',\n          expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Component'},\n          arguments: [{providers: [{__symbolic: 'reference', name: 'REQUIRED_VALIDATOR'}]}]\n        }]\n      }\n    });\n  });\n\n  it('should collect an error symbol if collecting a reference to a non-exported function', () => {\n    let source = program.getSourceFile('/local-function-ref.ts');\n    let metadata = collector.getMetadata(source);\n    expect(metadata.metadata).toEqual({\n      REQUIRED_VALIDATOR: {\n        __symbolic: 'error',\n        message: 'Reference to a non-exported function',\n        line: 3,\n        character: 13,\n        context: {name: 'required'}\n      },\n      SomeComponent: {\n        __symbolic: 'class',\n        decorators: [{\n          __symbolic: 'call',\n          expression: {__symbolic: 'reference', module: 'angular2/core', name: 'Component'},\n          arguments: [{providers: [{__symbolic: 'reference', name: 'REQUIRED_VALIDATOR'}]}]\n        }]\n      }\n    })\n  });\n\n  it('should collect an error for a simple function that references a local variable', () => {\n    let source = program.getSourceFile('/local-symbol-ref-func.ts');\n    let metadata = collector.getMetadata(source);\n    expect(metadata.metadata).toEqual({\n      foo: {\n        __symbolic: 'function',\n        parameters: ['index'],\n        value: {\n          __symbolic: 'error',\n          message: 'Reference to a local symbol',\n          line: 1,\n          character: 8,\n          context: {name: 'localSymbol'}\n        }\n      }\n    })\n  });\n\n  describe('in strict mode', () => {\n    it('should throw if an error symbol is collecting a reference to a non-exported symbol', () => {\n      let source = program.getSourceFile('/local-symbol-ref.ts');\n      expect(() => collector.getMetadata(source, true)).toThrowError(/Reference to a local symbol/);\n    });\n\n    it('should throw if an error if collecting a reference to a non-exported function', () => {\n      let source = program.getSourceFile('/local-function-ref.ts');\n      expect(() => collector.getMetadata(source, true))\n          .toThrowError(/Reference to a non-exported function/);\n    });\n\n    it('should throw for references to unexpected types', () => {\n      let unsupported1 = program.getSourceFile('/unsupported-2.ts');\n      expect(() => collector.getMetadata(unsupported1, true))\n          .toThrowError(/Reference to non-exported class/);\n    });\n  })\n});\n\n// TODO: Do not use \\` in a template literal as it confuses clang-format\nconst FILES: Directory = {\n  'app': {\n    'app.component.ts': `\n      import {Component as MyComponent, OnInit} from 'angular2/core';\n      import * as common from 'angular2/common';\n      import {Hero} from './hero';\n      import {HeroDetailComponent} from './hero-detail.component';\n      import HeroService from './hero.service';\n      // thrown away\n      import 'angular2/core';\n\n      @MyComponent({\n        selector: 'my-app',\n        template:` +\n        '`' +\n        `\n        <h2>My Heroes</h2>\n        <ul class=\"heroes\">\n          <li *ngFor=\"#hero of heroes\"\n            (click)=\"onSelect(hero)\"\n            [class.selected]=\"hero === selectedHero\">\n            <span class=\"badge\">{{hero.id | lowercase}}</span> {{hero.name | uppercase}}\n          </li>\n        </ul>\n        <my-hero-detail [hero]=\"selectedHero\"></my-hero-detail>\n        ` +\n        '`' +\n        `,\n        directives: [HeroDetailComponent, common.NgFor],\n        providers: [HeroService],\n        pipes: [common.LowerCasePipe, common.UpperCasePipe]\n      })\n      export class AppComponent implements OnInit {\n        public title = 'Tour of Heroes';\n        public heroes: Hero[];\n        public selectedHero: Hero;\n\n        constructor(private _heroService: HeroService) { }\n\n        onSelect(hero: Hero) { this.selectedHero = hero; }\n\n        ngOnInit() {\n            this.getHeroes()\n        }\n\n        getHeroes() {\n          this._heroService.getHeroesSlowly().then(heros => this.heroes = heros);\n        }\n      }`,\n    'hero.ts': `\n      export interface Hero {\n        id: number;\n        name: string;\n      }`,\n    'hero-detail.component.ts': `\n      import {Component, Input} from 'angular2/core';\n      import {Hero} from './hero';\n\n      @Component({\n        selector: 'my-hero-detail',\n        template: ` +\n        '`' +\n        `\n        <div *ngIf=\"hero\">\n          <h2>{{hero.name}} details!</h2>\n          <div><label>id: </label>{{hero.id}}</div>\n          <div>\n            <label>name: </label>\n            <input [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n          </div>\n        </div>\n      ` +\n        '`' +\n        `,\n      })\n      export class HeroDetailComponent {\n        @Input() public hero: Hero;\n      }`,\n    'mock-heroes.ts': `\n      import {Hero as Hero} from './hero';\n\n      export const HEROES: Hero[] = [\n          {\"id\": 11, \"name\": \"Mr. Nice\"},\n          {\"id\": 12, \"name\": \"Narco\"},\n          {\"id\": 13, \"name\": \"Bombasto\"},\n          {\"id\": 14, \"name\": \"Celeritas\"},\n          {\"id\": 15, \"name\": \"Magneta\"},\n          {\"id\": 16, \"name\": \"RubberMan\"},\n          {\"id\": 17, \"name\": \"Dynama\"},\n          {\"id\": 18, \"name\": \"Dr IQ\"},\n          {\"id\": 19, \"name\": \"Magma\"},\n          {\"id\": 20, \"name\": \"Tornado\"}\n      ];`,\n    'default-exporter.ts': `\n      let a: string;\n      export default a;\n    `,\n    'hero.service.ts': `\n      import {Injectable} from 'angular2/core';\n      import {HEROES} from './mock-heroes';\n      import {Hero} from './hero';\n\n      @Injectable()\n      class HeroService {\n          getHeros() {\n              return Promise.resolve(HEROES);\n          }\n\n          getHeroesSlowly() {\n              return new Promise<Hero[]>(resolve =>\n                setTimeout(()=>resolve(HEROES), 2000)); // 2 seconds\n          }\n      }\n      export default HeroService;`,\n    'cases-data.ts': `\n      import {Injectable, Input} from 'angular2/core';\n\n      @Injectable()\n      export class CaseAny {\n        constructor(param: any) {}\n      }\n\n      @Injectable()\n      export class GetProp {\n        private _name: string;\n        @Input('firstName') get name(): string {\n          return this._name;\n        }\n      }\n\n      @Injectable()\n      export class SetProp {\n        private _name: string;\n        @Input('firstName') set name(value: string) {\n          this._name = value;\n        }\n      }\n\n      @Injectable()\n      export class FullProp {\n        private _name: string;\n        @Input('firstName') get name(): string {\n          return this._name;\n        }\n        set name(value: string) {\n          this._name = value;\n        }\n      }\n\n      export class ClassReference<T> { }\n      export class NgForRow {\n\n      }\n\n      @Injectable()\n      export class NgFor {\n        constructor (public ref: ClassReference<NgForRow>) {}\n      }\n     `,\n    'error-cases.ts': `\n      import HeroService from './hero.service';\n\n      export class CaseCtor {\n        constructor(private _heroService: HeroService) { }\n      }\n    `\n  },\n  'promise.ts': `\n    interface PromiseLike<T> {\n        then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;\n        then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;\n    }\n\n    interface Promise<T> {\n        then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;\n        then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;\n        catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;\n        catch(onrejected?: (reason: any) => void): Promise<T>;\n    }\n\n    interface PromiseConstructor {\n        prototype: Promise<any>;\n        new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n        reject(reason: any): Promise<void>;\n        reject<T>(reason: any): Promise<T>;\n        resolve<T>(value: T | PromiseLike<T>): Promise<T>;\n        resolve(): Promise<void>;\n    }\n\n    declare var Promise: PromiseConstructor;\n  `,\n  'unsupported-1.ts': `\n    export let {a, b} = {a: 1, b: 2};\n    export let [c, d] = [1, 2];\n    export let e;\n  `,\n  'unsupported-2.ts': `\n    import {Injectable} from 'angular2/core';\n\n    class Foo {}\n\n    @Injectable()\n    export class Bar {\n      constructor(private f: Foo) {}\n    }\n  `,\n  'import-star.ts': `\n    import {Injectable} from 'angular2/core';\n    import * as common from 'angular2/common';\n\n    @Injectable()\n    export class SomeClass {\n      constructor(private f: common.NgFor) {}\n    }\n  `,\n  'exported-functions.ts': `\n    export function one(a: string, b: string, c: string) {\n      return {a: a, b: b, c: c};\n    }\n    export function two(a: string, b: string, c: string) {\n      return {a, b, c};\n    }\n    export function three({a, b, c}: {a: string, b: string, c: string}) {\n      return [a, b, c];\n    }\n    export function supportsState(): boolean {\n     return !!window.history.pushState;\n    }\n  `,\n  'exported-enum.ts': `\n    import {constValue} from './exported-consts';\n\n    export const someValue = 30;\n    export enum SomeEnum { A, B, C = 100, D };\n    export enum ComplexEnum { A, B, C = someValue, D = someValue + 10, E = constValue };\n  `,\n  'exported-consts.ts': `\n    export const constValue = 100;\n  `,\n  'static-method.ts': `\n    import {Injectable} from 'angular2/core';\n\n    @Injectable()\n    export class MyModule {\n      static with(comp: any): any[] {\n        return [\n          MyModule,\n          { provider: 'a', useValue: comp }\n        ];\n      }\n    }\n  `,\n  'static-method-with-default.ts': `\n    import {Injectable} from 'angular2/core';\n\n    @Injectable()\n    export class MyModule {\n      static with(comp: any, foo: boolean = true, bar: boolean = false): any[] {\n        return [\n          MyModule,\n          foo ? { provider: 'a', useValue: comp } : {provider: 'b', useValue: comp},\n          bar ? { provider: 'c', useValue: comp } : {provider: 'd', useValue: comp}\n        ];\n      }\n    }\n  `,\n  'static-method-call.ts': `\n    import {Component} from 'angular2/core';\n    import {MyModule} from './static-method';\n\n    @Component({\n      providers: MyModule.with('a')\n    })\n    export class Foo { }\n  `,\n  'static-field.ts': `\n    import {Injectable} from 'angular2/core';\n\n    @Injectable()\n    export class MyModule {\n      static VALUE = 'Some string';\n    }\n  `,\n  'static-field-reference.ts': `\n    import {Component} from 'angular2/core';\n    import {MyModule} from './static-field';\n\n    @Component({\n      providers: [ { provide: 'a', useValue: MyModule.VALUE } ]\n    })\n    export class Foo { }\n  `,\n  'static-method-with-if.ts': `\n    import {Injectable} from 'angular2/core';\n\n    @Injectable()\n    export class MyModule {\n      static with(cond: boolean): any[] {\n        return [\n          MyModule,\n          { provider: 'a', useValue: cond ? '1' : '2' }\n        ];\n      }\n    }\n  `,\n  're-exports.ts': `\n    export {MyModule} from './static-field';\n    export {Foo as OtherModule} from './static-field-reference';\n    export * from 'angular2/core';\n  `,\n  'local-symbol-ref.ts': `\n    import {Component, Validators} from 'angular2/core';\n\n    var REQUIRED;\n\n    export const REQUIRED_VALIDATOR: any = {\n      provide: 'SomeToken',\n      useValue: REQUIRED,\n      multi: true\n    };\n\n    @Component({\n      providers: [REQUIRED_VALIDATOR]\n    })\n    export class SomeComponent {}\n  `,\n  'private-enum.ts': `\n    export enum PublicEnum { a, b, c }\n    enum PrivateEnum { e, f, g }\n  `,\n  'local-function-ref.ts': `\n    import {Component, Validators} from 'angular2/core';\n\n    function required() {}\n\n    export const REQUIRED_VALIDATOR: any = {\n      provide: 'SomeToken',\n      useValue: required,\n      multi: true\n    };\n\n    @Component({\n      providers: [REQUIRED_VALIDATOR]\n    })\n    export class SomeComponent {}\n  `,\n  'local-symbol-ref-func.ts': `\n    var localSymbol: any[];\n\n    export function foo(index: number): string {\n      return localSymbol[index];\n    }\n  `,\n  'node_modules': {\n    'angular2': {\n      'core.d.ts': `\n          export interface Type extends Function { }\n          export interface TypeDecorator {\n              <T extends Type>(type: T): T;\n              (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n              annotations: any[];\n          }\n          export interface ComponentDecorator extends TypeDecorator { }\n          export interface ComponentFactory {\n              (obj: {\n                  selector?: string;\n                  inputs?: string[];\n                  outputs?: string[];\n                  properties?: string[];\n                  events?: string[];\n                  host?: {\n                      [key: string]: string;\n                  };\n                  bindings?: any[];\n                  providers?: any[];\n                  exportAs?: string;\n                  moduleId?: string;\n                  queries?: {\n                      [key: string]: any;\n                  };\n                  viewBindings?: any[];\n                  viewProviders?: any[];\n                  templateUrl?: string;\n                  template?: string;\n                  styleUrls?: string[];\n                  styles?: string[];\n                  directives?: Array<Type | any[]>;\n                  pipes?: Array<Type | any[]>;\n              }): ComponentDecorator;\n          }\n          export declare var Component: ComponentFactory;\n          export interface InputFactory {\n              (bindingPropertyName?: string): any;\n              new (bindingPropertyName?: string): any;\n          }\n          export declare var Input: InputFactory;\n          export interface InjectableFactory {\n              (): any;\n          }\n          export declare var Injectable: InjectableFactory;\n          export interface OnInit {\n              ngOnInit(): any;\n          }\n          export class Validators {\n            static required(): void;\n          }\n      `,\n      'common.d.ts': `\n        export declare class NgFor {\n            ngForOf: any;\n            ngForTemplate: any;\n            ngDoCheck(): void;\n        }\n        export declare class LowerCasePipe  {\n          transform(value: string, args?: any[]): string;\n        }\n        export declare class UpperCasePipe {\n            transform(value: string, args?: any[]): string;\n        }\n      `\n    }\n  }\n};\n"]}