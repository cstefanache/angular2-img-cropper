{"version":3,"file":"compiler_host.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/src/compiler_host.ts"],"names":[],"mappings":"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","sourcesContent":["import {writeFileSync} from 'fs';\nimport {convertDecorators} from 'tsickle';\nimport * as ts from 'typescript';\n\nimport NgOptions from './options';\nimport {MetadataCollector} from './collector';\n\n\n/**\n * Implementation of CompilerHost that forwards all methods to another instance.\n * Useful for partial implementations to override only methods they care about.\n */\nexport abstract class DelegatingHost implements ts.CompilerHost {\n  constructor(protected delegate: ts.CompilerHost) {}\n  getSourceFile =\n      (fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) =>\n          this.delegate.getSourceFile(fileName, languageVersion, onError);\n\n  getCancellationToken = () => this.delegate.getCancellationToken();\n  getDefaultLibFileName = (options: ts.CompilerOptions) =>\n      this.delegate.getDefaultLibFileName(options);\n  getDefaultLibLocation = () => this.delegate.getDefaultLibLocation();\n  writeFile: ts.WriteFileCallback = this.delegate.writeFile;\n  getCurrentDirectory = () => this.delegate.getCurrentDirectory();\n  getDirectories = (path: string): string[] =>\n      (this.delegate as any).getDirectories?(this.delegate as any).getDirectories(path): [];\n  getCanonicalFileName = (fileName: string) => this.delegate.getCanonicalFileName(fileName);\n  useCaseSensitiveFileNames = () => this.delegate.useCaseSensitiveFileNames();\n  getNewLine = () => this.delegate.getNewLine();\n  fileExists = (fileName: string) => this.delegate.fileExists(fileName);\n  readFile = (fileName: string) => this.delegate.readFile(fileName);\n  trace = (s: string) => this.delegate.trace(s);\n  directoryExists = (directoryName: string) => this.delegate.directoryExists(directoryName);\n}\n\nexport class TsickleHost extends DelegatingHost {\n  // Additional diagnostics gathered by pre- and post-emit transformations.\n  public diagnostics: ts.Diagnostic[] = [];\n  private TSICKLE_SUPPORT = `\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n`;\n  constructor(delegate: ts.CompilerHost, private program: ts.Program) { super(delegate); }\n\n  getSourceFile =\n      (fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) => {\n        const originalContent = this.delegate.readFile(fileName);\n        let newContent = originalContent;\n        if (!/\\.d\\.ts$/.test(fileName)) {\n          try {\n            const converted = convertDecorators(\n                this.program.getTypeChecker(), this.program.getSourceFile(fileName));\n            if (converted.diagnostics) {\n              this.diagnostics.push(...converted.diagnostics);\n            }\n            newContent = converted.output + this.TSICKLE_SUPPORT;\n          } catch (e) {\n            console.error('Cannot convertDecorators on file', fileName);\n            throw e;\n          }\n        }\n        return ts.createSourceFile(fileName, newContent, languageVersion, true);\n      };\n}\n\nconst IGNORED_FILES = /\\.ngfactory\\.js$|\\.css\\.js$|\\.css\\.shim\\.js$/;\n\nexport class MetadataWriterHost extends DelegatingHost {\n  private metadataCollector = new MetadataCollector();\n  constructor(\n      delegate: ts.CompilerHost, private program: ts.Program, private ngOptions: NgOptions) {\n    super(delegate);\n  }\n\n  private writeMetadata(emitFilePath: string, sourceFile: ts.SourceFile) {\n    // TODO: replace with DTS filePath when https://github.com/Microsoft/TypeScript/pull/8412 is\n    // released\n    if (/*DTS*/ /\\.js$/.test(emitFilePath)) {\n      const path = emitFilePath.replace(/*DTS*/ /\\.js$/, '.metadata.json');\n      const metadata =\n          this.metadataCollector.getMetadata(sourceFile, !!this.ngOptions.strictMetadataEmit);\n      if (metadata && metadata.metadata) {\n        const metadataText = JSON.stringify(metadata);\n        writeFileSync(path, metadataText, {encoding: 'utf-8'});\n      }\n    }\n  }\n\n  writeFile: ts.WriteFileCallback =\n      (fileName: string, data: string, writeByteOrderMark: boolean,\n       onError?: (message: string) => void, sourceFiles?: ts.SourceFile[]) => {\n        if (/\\.d\\.ts$/.test(fileName)) {\n          // Let the original file be written first; this takes care of creating parent directories\n          this.delegate.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n\n          // TODO: remove this early return after https://github.com/Microsoft/TypeScript/pull/8412\n          // is\n          // released\n          return;\n        }\n\n        if (IGNORED_FILES.test(fileName)) {\n          return;\n        }\n\n        if (!sourceFiles) {\n          throw new Error(\n              'Metadata emit requires the sourceFiles are passed to WriteFileCallback. ' +\n              'Update to TypeScript ^1.9.0-dev');\n        }\n        if (sourceFiles.length > 1) {\n          throw new Error('Bundled emit with --out is not supported');\n        }\n        this.writeMetadata(fileName, sourceFiles[0]);\n      };\n}\n"]}