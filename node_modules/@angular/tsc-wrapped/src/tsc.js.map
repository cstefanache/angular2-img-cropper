{"version":3,"file":"tsc.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/src/tsc.ts"],"names":[],"mappings":"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","sourcesContent":["import {existsSync} from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport AngularCompilerOptions from './options';\nimport {TsickleHost} from './compiler_host';\n\n/**\n * Our interface to the TypeScript standard compiler.\n * If you write an Angular compiler plugin for another build tool,\n * you should implement a similar interface.\n */\nexport interface CompilerInterface {\n  readConfiguration(project: string, basePath: string):\n      {parsed: ts.ParsedCommandLine, ngOptions: AngularCompilerOptions};\n  typeCheck(compilerHost: ts.CompilerHost, program: ts.Program): void;\n  emit(compilerHost: ts.CompilerHost, program: ts.Program): number;\n}\n\nconst DEBUG = false;\n\nfunction debug(msg: string, ...o: any[]) {\n  if (DEBUG) console.log(msg, ...o);\n}\n\nexport function formatDiagnostics(diags: ts.Diagnostic[]): string {\n  return diags\n      .map((d) => {\n        let res = ts.DiagnosticCategory[d.category];\n        if (d.file) {\n          res += ' at ' + d.file.fileName + ':';\n          const {line, character} = d.file.getLineAndCharacterOfPosition(d.start);\n          res += (line + 1) + ':' + (character + 1) + ':';\n        }\n        res += ' ' + ts.flattenDiagnosticMessageText(d.messageText, '\\n');\n        return res;\n      })\n      .join('\\n');\n}\n\nexport function check(diags: ts.Diagnostic[]) {\n  if (diags && diags.length && diags[0]) {\n    throw new Error(formatDiagnostics(diags));\n  }\n}\n\nexport class Tsc implements CompilerInterface {\n  public ngOptions: AngularCompilerOptions;\n  public parsed: ts.ParsedCommandLine;\n  private basePath: string;\n\n  constructor(private readFile = ts.sys.readFile, private readDirectory = ts.sys.readDirectory) {}\n\n  readConfiguration(project: string, basePath: string) {\n    this.basePath = basePath;\n\n    // Allow a directory containing tsconfig.json as the project value\n    // Note, TS@next returns an empty array, while earlier versions throw\n    try {\n      if (this.readDirectory(project).length > 0) {\n        project = path.join(project, 'tsconfig.json');\n      }\n    } catch (e) {\n      // Was not a directory, continue on assuming it's a file\n    }\n\n    const {config, error} = ts.readConfigFile(project, this.readFile);\n    check([error]);\n\n    // Do not inline `host` into `parseJsonConfigFileContent` until after\n    // g3 is updated to the latest TypeScript.\n    // The issue is that old typescript only has `readDirectory` while\n    // the newer TypeScript has additional `useCaseSensitiveFileNames` and\n    // `fileExists`. Inlining will trigger an error of extra parameters.\n    let host = {\n      useCaseSensitiveFileNames: true,\n      fileExists: existsSync,\n      readDirectory: this.readDirectory\n    };\n    this.parsed = ts.parseJsonConfigFileContent(config, host, basePath);\n\n    check(this.parsed.errors);\n\n    // Default codegen goes to the current directory\n    // Parsed options are already converted to absolute paths\n    this.ngOptions = config.angularCompilerOptions || {};\n    this.ngOptions.genDir = path.join(basePath, this.ngOptions.genDir || '.');\n    for (const key of Object.keys(this.parsed.options)) {\n      this.ngOptions[key] = this.parsed.options[key];\n    }\n    return {parsed: this.parsed, ngOptions: this.ngOptions};\n  }\n\n  typeCheck(compilerHost: ts.CompilerHost, program: ts.Program): void {\n    debug('Checking global diagnostics...');\n    check(program.getGlobalDiagnostics());\n\n    let diagnostics: ts.Diagnostic[] = [];\n    debug('Type checking...');\n\n    for (let sf of program.getSourceFiles()) {\n      diagnostics.push(...ts.getPreEmitDiagnostics(program, sf));\n    }\n    check(diagnostics);\n  }\n\n  emit(compilerHost: TsickleHost, oldProgram: ts.Program): number {\n    // Create a new program since the host may be different from the old program.\n    const program = ts.createProgram(this.parsed.fileNames, this.parsed.options, compilerHost);\n    debug('Emitting outputs...');\n    const emitResult = program.emit();\n    let diagnostics: ts.Diagnostic[] = [];\n    diagnostics.push(...emitResult.diagnostics);\n\n    check(compilerHost.diagnostics);\n    return emitResult.emitSkipped ? 1 : 0;\n  }\n}\nexport var tsc: CompilerInterface = new Tsc();\n"]}