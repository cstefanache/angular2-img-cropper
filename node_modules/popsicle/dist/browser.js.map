{"version":3,"file":"browser.js","sourceRoot":"","sources":["../lib/browser.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise = require('any-promise')\nimport { RawHeaders } from './base'\nimport Request from './request'\nimport Response from './response'\nimport { stringify, headers } from './plugins/index'\n\nexport type Types = 'text' | 'document' | 'blob' | 'arraybuffer' | 'json' | string\n\n/**\n * Browser transport options.\n */\nexport interface Options {\n  type?: Types\n  withCredentials?: boolean\n  overrideMimeType?: string\n}\n\n/**\n * Create a transport object.\n */\nexport function createTransport (options: Options) {\n  return {\n    use,\n    abort,\n    open (request: Request) {\n      return handle(request, options)\n    }\n  }\n}\n\n/**\n * Default `use`.\n */\nconst use = [stringify(), headers()]\n\n/**\n * Default open handler.\n */\nfunction handle (request: Request, options: Options): Promise<Response> {\n  return new Promise(function (resolve, reject) {\n    const type = options.type || 'text'\n    const { url, method } = request\n\n    // Loading HTTP resources from HTTPS is restricted and uncatchable.\n    if (window.location.protocol === 'https:' && /^http\\:/.test(url)) {\n      return reject(request.error(`The request to \"${url}\" was blocked`, 'EBLOCKED'))\n    }\n\n    const xhr = request._raw = new XMLHttpRequest()\n\n    function done () {\n      return new Promise<Response>(resolve => {\n        return resolve(new Response({\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.statusText,\n          rawHeaders: parseToRawHeaders(xhr.getAllResponseHeaders()),\n          body: type === 'text' ? xhr.responseText : xhr.response,\n          url: xhr.responseURL\n        }))\n      })\n    }\n\n    xhr.onload = () => resolve(done())\n    xhr.onabort = () => resolve(done())\n\n    xhr.onerror = function () {\n      return reject(request.error(`Unable to connect to \"${request.url}\"`, 'EUNAVAILABLE'))\n    }\n\n    // Use `progress` events to avoid calculating byte length.\n    xhr.onprogress = function (e: ProgressEvent) {\n      if (e.lengthComputable) {\n        request.downloadLength = e.total\n      }\n\n      request._setDownloadedBytes(e.loaded)\n    }\n\n    xhr.upload.onloadend = () => request.downloaded = 1\n\n    // No upload will occur with these requests.\n    if (method === 'GET' || method === 'HEAD' || !xhr.upload) {\n      request.uploadLength = 0\n      request._setUploadedBytes(0, 1)\n    } else {\n      xhr.upload.onprogress = function (e: ProgressEvent) {\n        if (e.lengthComputable) {\n          request.uploadLength = e.total\n        }\n\n        request._setUploadedBytes(e.loaded)\n      }\n\n      xhr.upload.onloadend = () => request.uploaded = 1\n    }\n\n    // XHR can fail to open when site CSP is set.\n    try {\n      xhr.open(method, url)\n    } catch (e) {\n      return reject(request.error(`Refused to connect to \"${url}\"`, 'ECSP', e))\n    }\n\n    // Send cookies with CORS.\n    if (options.withCredentials) {\n      xhr.withCredentials = true\n    }\n\n    // Enable overriding the response MIME handling.\n    if (options.overrideMimeType) {\n      xhr.overrideMimeType(options.overrideMimeType)\n    }\n\n    // Use the passed in type for the response.\n    if (type !== 'text') {\n      try {\n        xhr.responseType = type\n      } finally {\n        if (xhr.responseType !== type) {\n          return reject(request.error(`Unsupported type: ${type}`, 'ETYPE'))\n        }\n      }\n    }\n\n    for (let i = 0; i < request.rawHeaders.length; i += 2) {\n      xhr.setRequestHeader(request.rawHeaders[i], request.rawHeaders[i + 1])\n    }\n\n    xhr.send(request.body)\n  })\n}\n\n/**\n * Close the current HTTP request.\n */\nfunction abort (request: Request) {\n  request._raw.abort()\n}\n\n/**\n * Parse a headers string into an array of raw headers.\n */\nfunction parseToRawHeaders (headers: string): RawHeaders {\n  const rawHeaders: RawHeaders = []\n  const lines = headers.split(/\\r?\\n/)\n\n  for (const line of lines) {\n    if (line) {\n      const indexOf = line.indexOf(':')\n      const name = line.substr(0, indexOf).trim()\n      const value = line.substr(indexOf + 1).trim()\n\n      rawHeaders.push(name, value)\n    }\n  }\n\n  return rawHeaders\n}\n"]}