{"version":3,"file":"base.js","sourceRoot":"","sources":["../lib/base.ts"],"names":[],"mappings":";AACA,oBAAmC,KACnC,CAAC,CADuC;AACxC,4BAAoC,aACpC,CAAC,CADgD;AACjD,IAAO,MAAM,WAAW,OAAO,CAAC,CAAA;AAkChC,qBAAsB,GAAW;IAC/B,IAAM,KAAK,GAAG,GAAG,CAAC,WAAW,EAAE,CAAA;IAE/B,EAAE,CAAC,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,SAAS,CAAA;IAClB,CAAC;IAED,MAAM,CAAC,KAAK,CAAA;AACd,CAAC;AAKD,cAAe,GAAY;IACzB,MAAM,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACtD,CAAC;AAKD,gBAAiB,CAAoB,EAAE,CAAS;IAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;QACd,MAAM,CAAC,CAAC,CAAA;IACV,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAChD,CAAC;AAKD;IAIE,cAAa,EAAgD;YAA9C,YAAG,EAAE,oBAAO,EAAE,0BAAU,EAAE,gBAAK;QAH9C,QAAG,GAAQ,EAAE,CAAA;QACb,eAAU,GAAe,EAAE,CAAA;QAGzB,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QAChB,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,KAAK,KAAK,QAAQ,GAAG,mBAAU,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAA;QACxF,CAAC;QAGD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,SAAS,CAAC,iDAA+C,UAAU,CAAC,MAAQ,CAAC,CAAA;YACzF,CAAC;YAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACxB,CAAC;IACH,CAAC;IAED,sBAAI,qBAAG;aAAP;YACE,MAAM,CAAC,YAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACzB,CAAC;aAED,UAAS,GAAW;YAClB,IAAI,CAAC,GAAG,GAAG,WAAK,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QACnC,CAAC;;;OAJA;IAMD,sBAAI,uBAAK;aAKT;YACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAA;QACvB,CAAC;aAPD,UAAW,KAAqB;YAC9B,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,mBAAU,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;YACtE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAA;QACxB,CAAC;;;OAAA;IAMD,sBAAI,yBAAO;aAAX;YACE,IAAM,OAAO,GAAY,EAAE,CAAA;YAE3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnD,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC3C,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC1D,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;YACtB,CAAC;YAED,MAAM,CAAC,OAAO,CAAA;QAChB,CAAC;aAED,UAAa,OAAgB;YAC3B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAA;YAEpB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,GAAG,CAAC,CAAc,UAAoB,EAApB,KAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAApB,cAAoB,EAApB,IAAoB,CAAC;oBAAlC,IAAM,GAAG,SAAA;oBACZ,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;iBAC/B;YACH,CAAC;QACH,CAAC;;;OAVA;IAYD,wBAAS,GAAT;QACE,IAAM,OAAO,GAAY,EAAE,CAAA;QAE3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACnD,IAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;YAC9B,IAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAC1D,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;QACtB,CAAC;QAED,MAAM,CAAC,OAAO,CAAA;IAChB,CAAC;IAED,kBAAG,GAAH,UAAK,IAAY,EAAE,KAAyB;QAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;QAExB,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,qBAAM,GAAN,UAAQ,IAAY,EAAE,KAAyB;QAC7C,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAc,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,CAAC;gBAAnB,IAAM,GAAG,cAAA;gBACZ,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;oBAChB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;gBACjC,CAAC;aACF;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;YACnC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,mBAAI,GAAJ,UAAM,IAAY;QAChB,IAAM,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,UAAkB,CAAA;QAEtB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACnD,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBAChD,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;YACjC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,UAAU,CAAA;IACnB,CAAC;IAED,kBAAG,GAAH,UAAK,IAAY;QACf,IAAM,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QAEjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACnD,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;IAED,qBAAM,GAAN,UAAQ,IAAY;QAClB,IAAM,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QACjC,IAAM,MAAM,GAAa,EAAE,CAAA;QAE3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACnD,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACrC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;IAED,qBAAM,GAAN,UAAQ,IAAY;QAClB,IAAM,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAA;QAEhC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;YACvB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;YAChC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAID,mBAAI,GAAJ,UAAM,KAAc;QAClB,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAA;QACvC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;IACxC,CAAC;IACH,WAAC;AAAD,CAAC,AA7JD,IA6JC;AA7JD;sBA6JC,CAAA","sourcesContent":["import arrify = require('arrify')\nimport { parse, format, Url } from 'url'\nimport { parse as parseQuery } from 'querystring'\nimport extend = require('xtend')\n\n/**\n * Query parameters in object notation.\n */\nexport interface Query {\n  [key: string]: string | string[]\n}\n\n/**\n * Headers in object notation.\n */\nexport interface Headers {\n  [name: string]: string | string[]\n}\n\n/**\n * Headers stored in a continuous array.\n */\nexport type RawHeaders = string[]\n\n/**\n * Base request/response options.\n */\nexport interface BaseOptions {\n  url?: string\n  query?: string | Query\n  headers?: Headers\n  rawHeaders?: RawHeaders\n}\n\n/**\n * Consistently lower case a header name.\n */\nfunction lowerHeader (key: string) {\n  const lower = key.toLowerCase()\n\n  if (lower === 'referrer') {\n    return 'referer'\n  }\n\n  return lower\n}\n\n/**\n * Extract the content type from a header string.\n */\nfunction type (str?: string) {\n  return str == null ? null : str.split(/ *; */, 1)[0]\n}\n\n/**\n * Concat two header values together.\n */\nfunction concat (a: string | string[], b: string): string | string[] {\n  if (a == null) {\n    return b\n  }\n\n  return Array.isArray(a) ? a.concat(b) : [a, b]\n}\n\n/**\n * Create a base class for requests and responses.\n */\nexport default class Base {\n  Url: Url = {}\n  rawHeaders: RawHeaders = []\n\n  constructor ({ url, headers, rawHeaders, query }: BaseOptions) {\n    if (url != null) {\n      this.url = url\n    }\n\n    if (query != null) {\n      this.query = extend(this.query, typeof query === 'string' ? parseQuery(query) : query)\n    }\n\n    // Enables proxying of `rawHeaders`.\n    if (rawHeaders) {\n      if (rawHeaders.length % 2 === 1) {\n        throw new TypeError(`Expected raw headers length to be even, was ${rawHeaders.length}`)\n      }\n\n      this.rawHeaders = rawHeaders.slice(0)\n    } else {\n      this.headers = headers\n    }\n  }\n\n  get url () {\n    return format(this.Url)\n  }\n\n  set url (url: string) {\n    this.Url = parse(url, true, true)\n  }\n\n  set query (query: string | Query) {\n    this.Url.query = typeof query === 'string' ? parseQuery(query) : query\n    this.Url.search = null\n  }\n\n  get query () {\n    return this.Url.query\n  }\n\n  get headers () {\n    const headers: Headers = {}\n\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\n      const key = lowerHeader(this.rawHeaders[i])\n      const value = concat(headers[key], this.rawHeaders[i + 1])\n      headers[key] = value\n    }\n\n    return headers\n  }\n\n  set headers (headers: Headers) {\n    this.rawHeaders = []\n\n    if (headers) {\n      for (const key of Object.keys(headers)) {\n        this.append(key, headers[key])\n      }\n    }\n  }\n\n  toHeaders () {\n    const headers: Headers = {}\n\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\n      const key = this.rawHeaders[i]\n      const value = concat(headers[key], this.rawHeaders[i + 1])\n      headers[key] = value\n    }\n\n    return headers\n  }\n\n  set (name: string, value?: string | string[]): this {\n    this.remove(name)\n    this.append(name, value)\n\n    return this\n  }\n\n  append (name: string, value?: string | string[]) {\n    if (Array.isArray(value)) {\n      for (const val of value) {\n        if (val != null) {\n          this.rawHeaders.push(name, val)\n        }\n      }\n    } else {\n      if (value != null) {\n        this.rawHeaders.push(name, value)\n      }\n    }\n\n    return this\n  }\n\n  name (name: string): string {\n    const lowered = lowerHeader(name)\n    let headerName: string\n\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\n        headerName = this.rawHeaders[i]\n      }\n    }\n\n    return headerName\n  }\n\n  get (name: string): string {\n    const lowered = lowerHeader(name)\n\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\n        return this.rawHeaders[i + 1]\n      }\n    }\n  }\n\n  getAll (name: string): string[] {\n    const lowered = lowerHeader(name)\n    const result: string[] = []\n\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\n        result.push(this.rawHeaders[i + 1])\n      }\n    }\n\n    return result\n  }\n\n  remove (name: string) {\n    const lowered = lowerHeader(name)\n    let len = this.rawHeaders.length\n\n    while ((len -= 2) >= 0) {\n      if (lowerHeader(this.rawHeaders[len]) === lowered) {\n        this.rawHeaders.splice(len, 2)\n      }\n    }\n\n    return this\n  }\n\n  type (): string\n  type (value: string): this\n  type (value?: string): string | this {\n    if (arguments.length === 0) {\n      return type(this.get('Content-Type'))\n    }\n\n    return this.set('Content-Type', value)\n  }\n}\n"]}