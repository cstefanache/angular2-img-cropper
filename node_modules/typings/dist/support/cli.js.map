{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../src/support/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk = require('chalk')\nimport Promise = require('any-promise')\nimport archy = require('archy')\nimport * as os from 'os'\nimport { DependencyTree, DependencyBranch } from 'typings-core'\n\nconst pkg = require('../../package.json')\n\n/**\n * Options for the execution.\n */\nexport interface PrintOptions {\n  verbose: boolean\n}\n\n/**\n * Log a trivial string, without bells or whistles.\n */\nexport function log (message: string) {\n  console.error(message)\n}\n\n/**\n * Format a message line.\n */\nfunction formatLine (color: Function, type: string, line: string, prefix?: string) {\n  return `${chalk.bgBlack.white('typings')} ${color(type)} ${prefix ? chalk.magenta(`${prefix} `) : ''}${line}`\n}\n\n/**\n * Log an info message.\n */\nexport function logInfo (message: string, prefix?: string) {\n  const output = message.split(/\\r?\\n/g).map(line => {\n    return formatLine(chalk.bgBlack.cyan, 'INFO', line, prefix)\n  }).join('\\n')\n\n  log(output)\n}\n\n/**\n * Log a warning message.\n */\nexport function logWarning (message: string, prefix?: string) {\n  const output = message.split(/\\r?\\n/g).map(line => {\n    return formatLine(chalk.bgYellow.black, 'WARN', line, prefix)\n  }).join('\\n')\n\n  log(output)\n}\n\n/**\n * Log an error message.\n */\nexport function logError (message: string, prefix?: string) {\n  const output = message.split(/\\r?\\n/g).map(line => {\n    return formatLine(chalk.bgBlack.red, 'ERR!', line, prefix)\n  }).join('\\n')\n\n  log(output)\n}\n\n/**\n * Handle a CLI function handler.\n */\nexport function handle (promise: any, options: PrintOptions) {\n  return Promise.resolve(promise).catch(err => handleError(err, options))\n}\n\n/**\n * Final error handling for the CLI.\n */\nexport function handleError (error: Error, options: PrintOptions): any {\n  let cause = (error as any).cause\n\n  logError(error.message, 'message')\n\n  while (cause) {\n    logError(cause.message, 'caused by')\n\n    cause = (cause as any).cause\n  }\n\n  if (options.verbose && error.stack) {\n    log('')\n    logError(error.stack, 'stack')\n  }\n\n  log('')\n  logError(process.cwd(), 'cwd')\n  logError(`${os.type()} ${os.release()}`, 'system')\n  logError(process.argv.map(arg => JSON.stringify(arg)).join(' '), 'command')\n  logError(process.version, 'node -v')\n  logError(pkg.version, `typings -v`)\n\n  if ((error as any).code) {\n    logError((error as any).code, 'code')\n  }\n\n  log('')\n  logError('If you need help, you may report this error at:')\n  logError(`  <https://github.com/typings/typings/issues>`)\n\n  process.exit(1)\n}\n\n/**\n * Options for archifying the dependency tree.\n */\nexport interface ArchifyOptions {\n  name?: string\n  tree: DependencyTree\n  unicode?: boolean\n}\n\n/**\n * Make the dependency into the CLI name.\n */\nfunction toDependencyName (name: string, node: DependencyTree, suffix?: string) {\n  const fullname = node.version ? `${name}@${node.version}` : name\n\n  return suffix ? `${fullname} ${suffix}` : fullname\n}\n\n/**\n * Convert a dependency tree for \"archy\" to render.\n */\nexport function archifyDependencyTree (options: ArchifyOptions) {\n  const result: archy.Tree = {\n    label: options.name ? toDependencyName(options.name, options.tree) : '',\n    nodes: []\n  }\n\n  // Append a list of dependency to the node list.\n  function children (nodes: (string | archy.Tree)[], dependencies: DependencyBranch, suffix?: string) {\n    for (const name of Object.keys(dependencies).sort()) {\n      const tree = dependencies[name]\n\n      nodes.push(traverse(\n        {\n          label: toDependencyName(name, tree, suffix),\n          nodes: []\n        },\n        tree\n      ))\n    }\n  }\n\n  // Recursively traverse the dependencies to print the tree.\n  function traverse (result: archy.Tree, tree: DependencyTree) {\n    const { nodes } = result\n\n    children(nodes, tree.dependencies)\n    children(nodes, tree.devDependencies, chalk.gray('(dev)'))\n    children(nodes, tree.peerDependencies, chalk.gray('(peer)'))\n    children(nodes, tree.globalDependencies, chalk.gray('(global)'))\n    children(nodes, tree.globalDevDependencies, chalk.gray('(global dev)'))\n\n    return result\n  }\n\n  const archyTree = traverse(result, options.tree)\n\n  // Print \"no dependencies\" on empty tree.\n  if (archyTree.nodes.length === 0) {\n    archyTree.nodes.push(chalk.gray('(No dependencies)'))\n  }\n\n  return archy(archyTree, '', { unicode: options.unicode })\n}\n"]}