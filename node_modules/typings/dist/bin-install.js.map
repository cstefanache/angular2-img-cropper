{"version":3,"file":"bin-install.js","sourceRoot":"","sources":["../src/bin-install.ts"],"names":[],"mappings":";AACA,IAAO,OAAO,WAAW,SAAS,CAAC,CAAA;AACnC,6BAAyD,cACzD,CAAC,CADsE;AACvE,oBAAyD,eAEzD,CAAC,CAFuE;AAExE;IACE,MAAM,CAAC,0yCAkCR,CAAA;AACD,CAAC;AApCe,YAAI,OAoCnB,CAAA;AAoBD,cAAsB,IAAc,EAAE,OAAgB;IAC5C,6BAAO,EAAE,yBAAO,CAAY;IAEpC,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC;QAC3C,cAAQ,CAAC,+DAA+D,EAAE,YAAY,CAAC,CAAA;QACvF,MAAM,CAAA;IACR,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,sBAAO,CAAC,OAAO,CAAC;aACpB,IAAI,CAAC,UAAC,MAAM;YACH,sBAAI,EAAE,kBAAI,CAAW;YAE7B,OAAO,CAAC,GAAG,CAAC,2BAAqB,CAAC,EAAE,UAAI,EAAE,UAAI,EAAE,gBAAO,EAAE,CAAC,CAAC,CAAA;QAC7D,CAAC,CAAC,CAAA;IACN,CAAC;IAGD,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,UAAU,EAA+B;YAA7B,wBAAS,EAAE,0BAAU,EAAE,cAAI;QAC7D,aAAO,CAAC,0BAAuB,SAAS,sCAA+B,IAAI,YAAM,UAAU,MAAG,EAAE,WAAW,CAAC,CAAA;IAC9G,CAAC,CAAC,CAAA;IAGF,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAU,EAAsB;YAApB,cAAI,EAAE,8BAAY;QAC7D,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAA;QAElE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,aAAO,CACL,OAAI,IAAI,wCAAkC,OAAO,CAAC,IAAI,CAAC,qCAAkC,EACzF,oBAAoB,CACrB,CAAA;QACH,CAAC;IACH,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,qCAAsB,CAAC,IAAI,EAAE,OAAO,CAAC;SACzC,IAAI,CAAC,UAAA,OAAO;QACX,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,CAAC;YAAxB,IAAM,MAAM,gBAAA;YACP,wBAAI,EAAE,kBAAI,CAAW;YAE7B,OAAO,CAAC,GAAG,CAAC,2BAAqB,CAAC,EAAE,YAAI,EAAE,UAAI,EAAE,gBAAO,EAAE,CAAC,CAAC,CAAA;SAC5D;IACH,CAAC,CAAC,CAAA;AACN,CAAC;AA1Ce,YAAI,OA0CnB,CAAA","sourcesContent":["import Promise = require('any-promise')\nimport listify = require('listify')\nimport { install, installDependenciesRaw, Emitter } from 'typings-core'\nimport { archifyDependencyTree, logInfo, logError } from './support/cli'\n\nexport function help () {\n  return `\ntypings install (with no arguments, in package directory)\ntypings install [<name>=]<location>\n\n  <name>      Alternate name of the definition\n  <location>  The location to read from (described below)\n\nValid Locations:\n  [<source>~]<pkg>[@<version>][#<tag>]\n  file:<path>\n  github:<org>/<repo>[/<path>][#<commitish>]\n  bitbucket:<org>/<repo>[/<path>][#<commitish>]\n  npm:<pkg>[/<path>]\n  bower:<pkg>[/<path>]\n  http(s)://<host>/<path>\n\n  <source>    The registry mirror: \"npm\", \"bower\", \"env\", \"global\", \"lib\" or \"dt\"\n              When not specified, \\`defaultSource\\` in \\`.typingsrc\\` will be used.\n  <path>      Path to a \\`.d.ts\\` file or \\`typings.json\\`\n  <host>      A domain name (with optional port)\n  <version>   A semver range (E.g. \">=4.0\")\n  <tag>       The specific tag of a registry entry\n  <commitish> A git commit, tag or branch\n\nOptions:\n  [--save|-S]       Persist to \"dependencies\"\n  [--save-dev|-D]   Persist to \"devDependencies\"\n  [--save-peer|-P]  Persist to \"peerDependencies\"\n  [--global|-G]     Install and persist as a global definition\n    [-SG]           Persist to \"globalDependencies\"\n    [-DG]           Persist to \"globalDevDependencies\"\n  [--production]    Install only production dependencies (omits dev dependencies)\n\nAliases: i, in\n`\n}\n\nexport interface Options {\n  verbose: boolean\n  save: boolean\n  saveDev: boolean\n  savePeer: boolean\n  global: boolean\n  unicode: boolean\n  emitter: Emitter\n  production: boolean\n  cwd: string\n  name?: string\n  source?: string\n  /**\n   * Deprecated\n   */\n  ambient: boolean\n}\n\nexport function exec (args: string[], options: Options): Promise<void> {\n  const { emitter, unicode } = options\n\n  if (typeof options.ambient !== 'undefined') {\n    logError('The \"ambient\" flag is deprecated. Please use \"global\" instead', 'deprecated')\n    return\n  }\n\n  if (args.length === 0) {\n    return install(options)\n      .then((result) => {\n        const { name, tree } = result\n\n        console.log(archifyDependencyTree({ name, tree, unicode }))\n      })\n  }\n\n  // Log messages on stripped references.\n  emitter.on('reference', function ({ reference, resolution, name }) {\n    logInfo(`Stripped reference \"${reference}\" during installation from \"${name}\" (${resolution})`, 'reference')\n  })\n\n  // Log global dependencies list.\n  emitter.on('globaldependencies', function ({ name, dependencies }) {\n    const deps = Object.keys(dependencies).map(x => JSON.stringify(x))\n\n    if (deps.length) {\n      logInfo(\n        `\"${name}\" lists global dependencies on ${listify(deps)} that must be installed manually`,\n        'globaldependencies'\n      )\n    }\n  })\n\n  return installDependenciesRaw(args, options)\n    .then(results => {\n      for (const result of results) {\n        const { name, tree } = result\n\n        console.log(archifyDependencyTree({ name, tree, unicode }))\n      }\n    })\n}\n"]}