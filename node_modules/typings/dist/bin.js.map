{"version":3,"file":"bin.js","sourceRoot":"","sources":["../src/bin.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport minimist = require('minimist')\nimport wordwrap = require('wordwrap')\nimport hasUnicode = require('has-unicode')\nimport { join, relative, resolve } from 'path'\nimport chalk = require('chalk')\nimport updateNotifier = require('update-notifier')\nimport extend = require('xtend')\nimport { EventEmitter } from 'events'\nimport { handle, logWarning, logInfo } from './support/cli'\nimport { Emitter } from 'typings-core'\nimport { aliases } from './aliases'\n\nconst pkg = require('../package.json')\n\ninterface Argv {\n  help: boolean\n  version: boolean\n  dev: boolean\n  save: boolean\n  saveDev: boolean\n  savePeer: boolean\n  verbose: boolean\n  production: boolean\n  cwd?: string\n  out?: string\n  source?: string\n  offset?: number\n  limit?: number\n  sort?: string\n  unicode?: boolean\n}\n\ninterface Args extends Argv {\n  _: string[]\n  emitter: Emitter\n}\n\nconst unicodeConfig = process.env.TYPINGS_CONFIG_UNICODE || process.env.NPM_CONFIG_UNICODE\n\nconst argv = minimist<Argv>(process.argv.slice(2), {\n  boolean: ['version', 'save', 'saveDev', 'savePeer', 'global', 'verbose', 'production', 'unicode'],\n  string: ['cwd', 'out', 'name', 'source', 'offset', 'limit', 'sort'],\n  alias: {\n    global: ['G'],\n    version: ['v'],\n    save: ['S'],\n    saveDev: ['save-dev', 'D'],\n    savePeer: ['savePeer', 'P'],\n    verbose: ['V'],\n    out: ['o'],\n    help: ['h']\n  },\n  default: {\n    unicode: unicodeConfig ? isTrue(unicodeConfig) : hasUnicode(),\n    production: process.env.NODE_ENV === 'production'\n  }\n})\n\nfunction isTrue (value: string) {\n  return value === '1' || value === 'true'\n}\n\nconst cwd = argv.cwd ? resolve(argv.cwd) : process.cwd()\nconst emitter: Emitter = new EventEmitter()\nconst args: Args = extend(argv, { emitter, cwd })\n\n// Notify the user of updates.\nupdateNotifier({ pkg }).notify()\n\n// Execute with normalizations applied.\nexec(args)\n\n// Log warnings on enoent events.\nemitter.on('enoent', function ({ path }) {\n  logWarning(`Path \"${path}\" is missing`, 'enoent')\n})\n\n// Log warning when typings come packaged.\nemitter.on('hastypings', function ({ name, typings }) {\n  logWarning(\n    `Typings for \"${name}\" already exist in \"${relative(cwd, typings)}\". You should ` +\n    `let TypeScript resolve the packaged typings and uninstall the copy installed by Typings`,\n    'hastypings'\n  )\n})\n\n// Emit postmessage events.\nemitter.on('postmessage', function ({ message, name }) {\n  logInfo(`${name}: ${message}`, 'postmessage')\n})\n\n// Log bad locations.\nemitter.on('badlocation', function ({ raw }) {\n  logWarning(`\"${raw}\" is mutable and may change, consider specifying a commit hash`, 'badlocation')\n})\n\n// Log deprecated registry versions.\nemitter.on('deprecated', function ({ date, raw, parent }) {\n  // Only log warnings for top-level packages.\n  if (parent == null || parent.raw == null) {\n    logWarning(`${date.toLocaleDateString()}: \"${raw}\" is deprecated (updated, replaced or removed)`, 'deprecated')\n  }\n})\n\n// Log prune usages.\nemitter.on('prune', function ({ name, global, resolution }) {\n  const suffix = chalk.gray(` (${resolution})` + (global ? ' (global)' : ''))\n\n  logInfo(`${name}${suffix}`, 'prune')\n})\n\n/**\n * Handle the CLI commands.\n */\nfunction exec (options: Args): any {\n  if (options._.length) {\n    const command = aliases[options._[0]]\n    const args = options._.slice(1)\n\n    if (command != null) {\n      if (options.help) {\n        return console.log(command.help())\n      }\n\n      return handle(command.exec(args, options), options)\n    }\n  } else if (options.version) {\n    console.log(pkg.version)\n    return\n  }\n\n  const wrap = wordwrap(4, 80)\n\n  console.log(`\nUsage: typings <command>\n\nCommands:\n${wrap(Object.keys(aliases).sort().join(', '))}\n\ntypings <command> -h   Get help for <command>\ntypings <command> -V   Enable verbose logging\n\ntypings --version      Print the CLI version\n\ntypings@${pkg.version} ${join(__dirname, '..')}\n`)\n}\n"]}