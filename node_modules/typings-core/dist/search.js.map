{"version":3,"file":"search.js","sourceRoot":"","sources":["../src/search.ts"],"names":[],"mappings":";AAAA,IAAO,MAAM,WAAW,OAAO,CAAC,CAAA;AAEhC,IAAO,IAAI,WAAW,aAAa,CAAC,CAAA;AACpC,4BAA0B,aAC1B,CAAC,CADsC;AACvC,oBAAwB,KACxB,CAAC,CAD4B;AAC7B,mBAA6B,YAC7B,CAAC,CADwC;AACzC,mBAAe,YAKf,CAAC,CAL0B;AAiC3B,oBAAqC,MAAS;IAC5C,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;IAG7B,GAAG,CAAC,CAAc,UAAmB,EAAnB,KAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAnB,cAAmB,EAAnB,IAAmB,CAAC;QAAjC,IAAM,GAAG,SAAA;QACZ,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAA;QACpB,CAAC;KACF;IAED,MAAM,CAAC,MAAM,CAAA;AACf,CAAC;AAKD,gBAAwB,OAA2B;IAA3B,uBAA2B,GAA3B,YAA2B;IACjD,IAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE;QACrC,OAAO;QACP,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,OAAO;QACP,OAAO;QACP,MAAM;KACP,CAAC,CAAC,CAAA;IAEH,MAAM,CAAC,iBAAY,CAAC,aAAO,CAAC,YAAE,CAAC,WAAW,EAAE,YAAU,uBAAS,CAAC,KAAK,CAAG,CAAC,CAAC,CAAA;AAC5E,CAAC;AAZe,cAAM,SAYrB,CAAA","sourcesContent":["import extend = require('xtend')\nimport Promise = require('any-promise')\nimport pick = require('object.pick')\nimport { stringify } from 'querystring'\nimport { resolve } from 'url'\nimport { readJsonFrom } from './utils/fs'\nimport rc from './utils/rc'\n\n/**\n * Query parameters used for searching.\n */\nexport interface SearchOptions {\n  query?: string\n  name?: string\n  source?: string\n  offset?: string\n  limit?: string\n  order?: string\n  sort?: string\n}\n\n/**\n * The result from searching the API.\n */\nexport interface SearchResults {\n  total: number\n  results: Array<{\n    name: string\n    source: string\n    homepage: string\n    description: string\n    updated: string\n    versions: number\n  }>\n}\n\n/**\n * Remove `null` keys before searching.\n */\nfunction tidyParams <T extends any> (params: T): T {\n  const result = extend(params)\n\n  // Loop over and delete empty values.\n  for (const key of Object.keys(result)) {\n    if (result[key] == null) {\n      delete result[key]\n    }\n  }\n\n  return result\n}\n\n/**\n * Search the registry for typings.\n */\nexport function search (options: SearchOptions = {}): Promise<SearchResults> {\n  const query = tidyParams(pick(options, [\n    'query',\n    'name',\n    'source',\n    'offset',\n    'limit',\n    'order',\n    'sort'\n  ]))\n\n  return readJsonFrom(resolve(rc.registryURL, `search?${stringify(query)}`))\n}\n"]}