{"version":3,"file":"install.spec.js","sourceRoot":"","sources":["../src/install.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import test = require('blue-tape')\nimport Promise = require('any-promise')\nimport { join } from 'path'\nimport { EventEmitter } from 'events'\nimport nock = require('nock')\nimport { install, installDependencyRaw } from './install'\nimport { readFile, readConfig, writeFile, rimraf } from './utils/fs'\nimport { CONFIG_FILE } from './utils/config'\nimport rc from './utils/rc'\n\ntest('install', t => {\n  const emitter = new EventEmitter()\n\n  t.test('install everything', t => {\n    const FIXTURE_DIR = join(__dirname, '__test__/install-fixture')\n\n    return rimraf(join(FIXTURE_DIR, 'typings'))\n      .then(() => {\n        return install({\n          cwd: FIXTURE_DIR,\n          emitter\n        })\n      })\n      .then(function () {\n        return Promise.all([\n          readFile(join(FIXTURE_DIR, 'typings/index.d.ts'), 'utf8'),\n          readFile(join(FIXTURE_DIR, 'typings/modules/test/index.d.ts'), 'utf8'),\n          readFile(join(FIXTURE_DIR, 'typings/globals/test/index.d.ts'), 'utf8')\n        ])\n      })\n      .then(function ([mainDts, mainFile, globalMainFile]) {\n        t.equal(mainDts, [\n          `/// <reference path=\"globals/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/test/index.d.ts\" />`,\n          ``\n        ].join('\\n'))\n\n        t.equal(mainFile, [\n          `// Generated by typings`,\n          `// Source: custom_typings/module.d.ts`,\n          `declare module \\'test\\' {`,\n          `function test (): boolean`,\n          ``,\n          `export default test`,\n          `}`,\n          ``\n        ].join('\\n'))\n\n        t.equal(globalMainFile, [\n          `// Generated by typings`,\n          `// Source: custom_typings/global.d.ts`,\n          `declare module \"x\" {}`,\n          ''\n        ].join('\\n'))\n      })\n  })\n\n  t.test('install dependency', t => {\n    const DEPENDENCY = '@scope/test=file:custom_typings/module.d.ts'\n    const REGISTRY_DEPENDENCY = 'registry:dt/node@>=4.0'\n    const PEER_DEPENDENCY = 'file:custom_typings/named/typings.json'\n    const GLOBAL_DEPENDENCY = 'file:custom_typings/global.d.ts'\n    const FIXTURE_DIR = join(__dirname, '__test__/install-dependency-fixture')\n    const CONFIG = join(FIXTURE_DIR, CONFIG_FILE)\n\n    nock(rc.registryURL)\n      .get('/entries/dt/node/versions/%3E%3D4.0/latest')\n      .reply(200, {\n        tag: '4.0.0+20160226132328',\n        version: '4.0.0',\n        description: null,\n        compiler: null,\n        location: 'github:DefinitelyTyped/DefinitelyTyped/node/node.d.ts#48c1e3c1d6baefa4f1a126f188c27c4fefd36bff',\n        updated: '2016-02-26T13:23:28.000Z'\n      })\n\n    nock('https://raw.githubuserstuff.com/')\n      .get('/DefinitelyTyped/DefinitelyTyped/48c1e3c1d6baefa4f1a126f188c27c4fefd36bff/node/node.d.ts')\n      .reply(200, '// Type definitions for Node.js v4.x')\n\n    rc.urlRewrites = { '(.*)content(.*)': '$1stuff$2' }\n\n    return writeFile(CONFIG, '{}')\n      .then(function () {\n        return rimraf(join(FIXTURE_DIR, 'typings'))\n      })\n      .then(function () {\n        return Promise.all([\n          installDependencyRaw(DEPENDENCY, {\n            cwd: FIXTURE_DIR,\n            saveDev: true,\n            emitter\n          }),\n          installDependencyRaw(REGISTRY_DEPENDENCY, {\n            cwd: FIXTURE_DIR,\n            save: true,\n            global: true,\n            emitter\n          }),\n          installDependencyRaw(GLOBAL_DEPENDENCY, {\n            cwd: FIXTURE_DIR,\n            saveDev: true,\n            global: true,\n            emitter\n          }),\n          installDependencyRaw(PEER_DEPENDENCY, {\n            cwd: FIXTURE_DIR,\n            savePeer: true,\n            emitter\n          })\n        ])\n      })\n      .then(function () {\n        return readConfig(CONFIG)\n      })\n      .then(function (config) {\n        t.deepEqual(config, {\n          devDependencies: {\n            '@scope/test': 'file:custom_typings/module.d.ts'\n          },\n          peerDependencies: {\n            named: PEER_DEPENDENCY\n          },\n          globalDependencies: {\n            node: 'registry:dt/node#4.0.0+20160226132328'\n          },\n          globalDevDependencies: {\n            global: 'file:custom_typings/global.d.ts'\n          }\n        })\n      })\n  })\n\n  t.test('install empty', t => {\n    const FIXTURE_DIR = join(__dirname, '__test__/install-empty')\n\n    return install({\n      cwd: FIXTURE_DIR,\n      emitter\n    })\n      .then(function () {\n        return Promise.all([\n          readFile(join(FIXTURE_DIR, 'typings/main/index.d.ts'), 'utf8'),\n          readFile(join(FIXTURE_DIR, 'typings/browser/index.d.ts'), 'utf8')\n        ])\n      })\n      .then(function ([main, browser]) {\n        t.equal(main, '')\n        t.equal(browser, '')\n      })\n  })\n})\n"]}