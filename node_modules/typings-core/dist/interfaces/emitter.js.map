{"version":3,"file":"emitter.js","sourceRoot":"","sources":["../../src/interfaces/emitter.ts"],"names":[],"mappings":"","sourcesContent":["import { EventEmitter } from 'events'\n\nimport { Dependencies } from './config'\nimport { DependencyTree } from './dependencies'\n\n/**\n * Custom event emitter for tracking Typings changes.\n */\nexport interface Emitter extends EventEmitter {\n  on (event: 'reference', listener: (e: ReferenceEvent) => any): this\n  on (event: 'resolve', listener: (e: ResolveEvent) => any): this\n  on (event: 'resolved', listener: (e: ResolvedEvent) => any): this\n  on (event: 'enoent', listener: (e: EnoentEvent) => any): this\n  on (event: 'compile', listener: (e: CompileEvent) => any): this\n  on (event: 'compiled', listener: (e: CompiledEvent) => any): this\n  on (event: 'hastypings', listener: (e: HasTypingsEvent) => any): this\n  on (event: 'postmessage', listener: (e: PostMessageEvent) => any): this\n  on (event: 'globaldependencies', listener: (e: GlobalDependenciesEvent) => any): this\n  on (event: 'badlocation', listener: (e: BadLocationEvent) => any): this\n  on (event: 'deprecated', listener: (e: DeprecatedEvent) => any): this\n  on (event: 'prune', listener: (e: PruneEvent) => any): this\n  on (event: string, listener: Function): this\n\n  emit (event: 'reference', e: ReferenceEvent): boolean\n  emit (event: 'resolve', e: ResolveEvent): boolean\n  emit (event: 'resolved', e: ResolvedEvent): boolean\n  emit (event: 'enoent', e: EnoentEvent): boolean\n  emit (event: 'compile', e: CompileEvent): boolean\n  emit (event: 'compiled', e: CompiledEvent): boolean\n  emit (event: 'hastypings', e: HasTypingsEvent): boolean\n  emit (event: 'postmessage', e: PostMessageEvent): boolean\n  emit (event: 'globaldependencies', e: GlobalDependenciesEvent): boolean\n  emit (event: 'badlocation', e: BadLocationEvent): boolean\n  emit (event: 'deprecated', e: DeprecatedEvent): boolean\n  emit (event: 'prune', e: PruneEvent): boolean\n  emit (event: string, ...args: any[]): boolean\n}\n\n/**\n * Emit stripped references.\n */\nexport interface ReferenceEvent {\n  name: string\n  path: string\n  tree: DependencyTree\n  resolution: string\n  reference: string\n}\n\n/**\n * Emit when resolving a dependency.\n */\nexport interface ResolveEvent {\n  src: string\n  raw: string\n  name: string\n  parent: DependencyTree\n}\n\n/**\n * Emit when the dependency is resolved.\n */\nexport interface ResolvedEvent extends ResolveEvent {\n  tree: DependencyTree\n}\n\n/**\n * Emitted when a non-critical file is missing.\n */\nexport interface EnoentEvent {\n  path: string\n}\n\n/**\n * Emit when a path is being compiled.\n */\nexport interface CompileEvent {\n  name: string\n  path: string\n  tree: DependencyTree\n  resolution: boolean\n}\n\n/**\n * Emit when a path is compiled.\n */\nexport interface CompiledEvent extends CompileEvent {\n  contents: string\n}\n\n/**\n * Emit a \"hastypings\" event when native typings exist during install.\n */\nexport interface HasTypingsEvent {\n  source: string\n  name: string\n  path: string\n  typings: string\n}\n\n/**\n * Message emitted from a module after installation.\n */\nexport interface PostMessageEvent {\n  name: string\n  message: string\n}\n\n/**\n * Emits known global module dependencies by top-level Typings.\n */\nexport interface GlobalDependenciesEvent {\n  name: string\n  raw: string\n  dependencies: Dependencies\n}\n\n/**\n * Emitted when a known mutable source is being installed.\n */\nexport interface BadLocationEvent {\n  type: string\n  raw: string\n  location: string\n}\n\n/**\n * Emitted when a dependency has been \"deprecated\".\n */\nexport interface DeprecatedEvent {\n  parent: DependencyTree\n  raw: string\n  date: Date\n}\n\n/**\n * Event triggered when pruning type definitions.\n */\nexport interface PruneEvent {\n  name: string\n  global: boolean\n  resolution: string\n}\n"]}