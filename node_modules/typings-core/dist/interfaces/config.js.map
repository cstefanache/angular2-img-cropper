{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/interfaces/config.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * The JSON configuration format.\n */\nexport interface ConfigJson {\n  /**\n   * The entry point to the definition (canonical to `\"main\"` in NPM's `package.json`).\n   */\n  main?: string\n  /**\n   * A string, or map of paths, to override during resolution. See spec:\n   * https://github.com/defunctzombie/package-browser-field-spec\n   */\n  browser?: Browser\n  /**\n   * The semver range this definition is typed for.\n   */\n  version?: string\n  /**\n   * Homepage url of the source package.\n   */\n  homepage?: string\n  /**\n   * Map of resolutions to install.\n   */\n  resolution?: string | ResolutionMap\n  /**\n   * Used as an alternative or to complement `main`, specify an array of files that are\n   * exported but aren't already part of the resolution from `main`.\n   */\n  files?: string[]\n  /**\n   * Denote that this definition _must_ be installed as global.\n   */\n  global?: boolean\n  /**\n   * A message to emit to users after typings installation.\n   */\n  postmessage?: string\n  /**\n   * The name of the definition.\n   */\n  name?: string\n  /**\n   * A map of dependencies required by the project.\n   */\n  dependencies?: Dependencies\n  /**\n   * A map of dependencies required by the project during development.\n   */\n  devDependencies?: Dependencies\n  /**\n   * A map of dependencies expected in the parent project for this dependency to work.\n   */\n  peerDependencies?: Dependencies\n  /**\n   * A map of global dependencies required by the project.\n   */\n  globalDependencies?: Dependencies\n  /**\n   * A map of global dependencies required by the project during development.\n   */\n  globalDevDependencies?: Dependencies\n}\n\n/**\n * A dependency string is a string that maps to a resource. For example,\n * \"file:foo/bar\" or \"npm:typescript\".\n */\nexport type DependencyString = string\n\n/**\n * Browser field overrides like NPM.\n */\nexport type Browser = string | Overrides\n\n/**\n * Override map for file lookups.\n */\nexport interface Overrides {\n  [dependency: string]: string\n}\n\n/**\n * Dependencies can be an array for graceful degradation over services.\n */\nexport interface Dependencies {\n  [name: string]: DependencyString\n}\n\n/**\n * A map of installation resolutions.\n */\nexport interface ResolutionMap {\n  main?: string\n  browser?: string\n  [resolution: string]: string\n}\n"]}