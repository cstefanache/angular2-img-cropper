{"version":3,"file":"prune.spec.js","sourceRoot":"","sources":["../src/prune.spec.ts"],"names":[],"mappings":";AAAA,IAAO,IAAI,WAAW,WAAW,CAAC,CAAA;AAClC,IAAO,OAAO,WAAW,aAAa,CAAC,CAAA;AACvC,qBAAqB,MACrB,CAAC,CAD0B;AAC3B,sBAAsB,SACtB,CAAC,CAD8B;AAC/B,mBAAoD,YAEpD,CAAC,CAF+D;AAEhE,IAAM,sBAAsB,GAAG,yCAAyC,CAAA;AACxE,IAAM,eAAe,GAAG,yCAAyC,CAAA;AACjE,IAAM,mBAAmB,GAAG,sCAAsC,CAAA;AAClE,IAAM,YAAY,GAAG,sCAAsC,CAAA;AAC3D,IAAM,aAAa,GAAG,4BAA4B,CAAA;AAClD,IAAM,UAAU,GAAG,yBAAyB,CAAA;AAE5C,IAAI,CAAC,OAAO,EAAE,UAAA,CAAC;IACb,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,UAAA,CAAC;QACnC,IAAM,WAAW,GAAG,WAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAA;QAEhE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC;aACxC,IAAI,CAAC;YACH,MAAM,CAAC,aAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAA;QACrC,CAAC,CAAC;aACD,IAAI,CAAC;YACJ,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACjB,aAAQ,CAAC,WAAI,CAAC,WAAW,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC;gBAClD,aAAQ,CAAC,WAAI,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,MAAM,CAAC;gBAC/C,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;gBACjD,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;gBAC1C,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;gBAC9C,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;aACxC,CAAC,CAAA;QACJ,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,EAON;gBANC,kBAAU,EACV,eAAO,EACP,kCAA0B,EAC1B,4BAAoB,EACpB,+BAAuB,EACvB,yBAAiB;YAEjB,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE;gBAClB,oDAAkD;gBAClD,oDAAkD;gBAClD,EAAE;aACH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;YAEb,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE;gBACf,oDAAkD;gBAClD,oDAAkD;gBAClD,EAAE;aACH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;YAEb,CAAC,CAAC,KAAK,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAA;YACzC,CAAC,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAA;YACnC,CAAC,CAAC,KAAK,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAA;YACtC,CAAC,CAAC,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAA;QAClC,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,CAAC,CAAC,IAAI,CAAC,6BAA6B,EAAE,UAAA,CAAC;QACrC,IAAM,WAAW,GAAG,WAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAA;QAEhE,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC;aACxC,IAAI,CAAC;YACH,MAAM,CAAC,aAAK,CAAC;gBACV,GAAG,EAAE,WAAW;gBAChB,UAAU,EAAE,IAAI;aAClB,CAAC,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC;YACJ,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACjB,aAAQ,CAAC,WAAI,CAAC,WAAW,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC;gBAClD,aAAQ,CAAC,WAAI,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,MAAM,CAAC;gBAC/C,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;gBACjD,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;gBAC1C,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;gBAC9C,WAAM,CAAC,WAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;aACxC,CAAC,CAAA;QACJ,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,EAON;gBANC,kBAAU,EACV,eAAO,EACP,kCAA0B,EAC1B,4BAAoB,EACpB,+BAAuB,EACvB,yBAAiB;YAEjB,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YACzB,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;YAEtB,CAAC,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAA;YAC1C,CAAC,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAA;YACpC,CAAC,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAA;YACvC,CAAC,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,iCAAkC,SAAiB;IACjD,IAAM,kBAAkB,GAAG,4BAA4B,CAAA;IACvD,IAAM,WAAW,GAAG,qCAAqC,CAAA;IAEzD,IAAM,IAAI,GAAG;QACX,WAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC;QAC5C,WAAI,CAAC,SAAS,EAAE,8BAA8B,CAAC;QAC/C,WAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC;QAC5C,WAAI,CAAC,SAAS,EAAE,8BAA8B,CAAC;KAChD,CAAA;IAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,WAAM,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAC;SAC7C,IAAI,CAAC;QACJ,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACjB,cAAS,CAAC,WAAI,CAAC,SAAS,EAAE,sBAAsB,CAAC,EAAE,kBAAkB,CAAC;YACtE,cAAS,CAAC,WAAI,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,WAAW,CAAC;YACxD,cAAS,CAAC,WAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,EAAE,kBAAkB,CAAC;YACnE,cAAS,CAAC,WAAI,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE,WAAW,CAAC;YACrD,cAAS,CAAC,WAAI,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE;gBACxC,oDAAkD;gBAClD,oDAAkD;gBAClD,0DAAwD;gBACxD,EAAE;aACH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACb,cAAS,CAAC,WAAI,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE;gBACrC,oDAAkD;gBAClD,oDAAkD;gBAClD,0DAAwD;gBACxD,EAAE;aACH,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACd,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACN,CAAC","sourcesContent":["import test = require('blue-tape')\nimport Promise = require('any-promise')\nimport { join } from 'path'\nimport { prune } from './prune'\nimport { readFile, writeFile, mkdirp, isFile } from './utils/fs'\n\nconst BROWSER_GLOBAL_TYPINGS = 'typings/browser/globals/test/index.d.ts'\nconst BROWSER_TYPINGS = 'typings/browser/modules/test/index.d.ts'\nconst MAIN_GLOBAL_TYPINGS = 'typings/main/globals/test/index.d.ts'\nconst MAIN_TYPINGS = 'typings/main/modules/test/index.d.ts'\nconst BROWSER_INDEX = 'typings/browser/index.d.ts'\nconst MAIN_INDEX = 'typings/main/index.d.ts'\n\ntest('prune', t => {\n  t.test('remove extraneous typings', t => {\n    const FIXTURE_DIR = join(__dirname, '__test__/prune-extraneous')\n\n    return generateTestDefinitions(FIXTURE_DIR)\n      .then(() => {\n         return prune({ cwd: FIXTURE_DIR })\n      })\n      .then(() => {\n        return Promise.all([\n          readFile(join(FIXTURE_DIR, BROWSER_INDEX), 'utf8'),\n          readFile(join(FIXTURE_DIR, MAIN_INDEX), 'utf8'),\n          isFile(join(FIXTURE_DIR, BROWSER_GLOBAL_TYPINGS)),\n          isFile(join(FIXTURE_DIR, BROWSER_TYPINGS)),\n          isFile(join(FIXTURE_DIR, MAIN_GLOBAL_TYPINGS)),\n          isFile(join(FIXTURE_DIR, MAIN_TYPINGS))\n        ])\n      })\n      .then(([\n        browserDts,\n        mainDts,\n        hasBrowserGlobalDefinition,\n        hasBrowserDefinition,\n        hasMainGlobalDefinition,\n        hasMainDefinition\n      ]) => {\n        t.equal(browserDts, [\n          `/// <reference path=\"globals/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/test/index.d.ts\" />`,\n          ``\n        ].join('\\n'))\n\n        t.equal(mainDts, [\n          `/// <reference path=\"globals/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/test/index.d.ts\" />`,\n          ``\n        ].join('\\n'))\n\n        t.equal(hasBrowserGlobalDefinition, true)\n        t.equal(hasBrowserDefinition, true)\n        t.equal(hasMainGlobalDefinition, true)\n        t.equal(hasMainDefinition, true)\n      })\n  })\n\n  t.test('remove all dev dependencies', t => {\n    const FIXTURE_DIR = join(__dirname, '__test__/prune-production')\n\n    return generateTestDefinitions(FIXTURE_DIR)\n      .then(() => {\n         return prune({\n            cwd: FIXTURE_DIR,\n            production: true\n         })\n      })\n      .then(() => {\n        return Promise.all([\n          readFile(join(FIXTURE_DIR, BROWSER_INDEX), 'utf8'),\n          readFile(join(FIXTURE_DIR, MAIN_INDEX), 'utf8'),\n          isFile(join(FIXTURE_DIR, BROWSER_GLOBAL_TYPINGS)),\n          isFile(join(FIXTURE_DIR, BROWSER_TYPINGS)),\n          isFile(join(FIXTURE_DIR, MAIN_GLOBAL_TYPINGS)),\n          isFile(join(FIXTURE_DIR, MAIN_TYPINGS))\n        ])\n      })\n      .then(([\n        browserDts,\n        mainDts,\n        hasBrowserGlobalDefinition,\n        hasBrowserDefinition,\n        hasMainGlobalDefinition,\n        hasMainDefinition\n      ]) => {\n        t.equal(browserDts, `\\n`)\n        t.equal(mainDts, `\\n`)\n\n        t.equal(hasBrowserGlobalDefinition, false)\n        t.equal(hasBrowserDefinition, false)\n        t.equal(hasMainGlobalDefinition, false)\n        t.equal(hasMainDefinition, false)\n      })\n  })\n})\n\nfunction generateTestDefinitions (directory: string) {\n  const FAKE_GLOBAL_MODULE = `declare module 'test' {}\\n`\n  const FAKE_MODULE = `export function test (): boolean;\\n`\n\n  const dirs = [\n    join(directory, 'typings/main/globals/test'),\n    join(directory, 'typings/browser/globals/test'),\n    join(directory, 'typings/main/modules/test'),\n    join(directory, 'typings/browser/modules/test')\n  ]\n\n  return Promise.all(dirs.map(dir => mkdirp(dir)))\n    .then(() => {\n      return Promise.all([\n        writeFile(join(directory, BROWSER_GLOBAL_TYPINGS), FAKE_GLOBAL_MODULE),\n        writeFile(join(directory, BROWSER_TYPINGS), FAKE_MODULE),\n        writeFile(join(directory, MAIN_GLOBAL_TYPINGS), FAKE_GLOBAL_MODULE),\n        writeFile(join(directory, MAIN_TYPINGS), FAKE_MODULE),\n        writeFile(join(directory, BROWSER_INDEX), [\n          `/// <reference path=\"globals/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/extraneous/index.d.ts\" />`,\n          ``\n        ].join('\\n')),\n        writeFile(join(directory, MAIN_INDEX), [\n          `/// <reference path=\"globals/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/test/index.d.ts\" />`,\n          `/// <reference path=\"modules/extraneous/index.d.ts\" />`,\n          ``\n        ].join('\\n'))\n      ])\n    })\n}\n"]}