{"version":3,"file":"uninstall.js","sourceRoot":"","sources":["../src/uninstall.ts"],"names":[],"mappings":";AAAA,IAAO,MAAM,WAAW,OAAO,CAAC,CAAA;AAChC,IAAO,OAAO,WAAW,aAAa,CAAC,CAAA;AACvC,uBAA6B,QAC7B,CAAC,CADoC;AACrC,qBAAwB,MACxB,CAAC,CAD6B;AAC9B,mBAA0F,YAC1F,CAAC,CADqG;AACtG,qBAA+B,cAC/B,CAAC,CAD4C;AAC7C,qBAA2E,cAC3E,CAAC,CADwF;AAkBzF,6BAAqC,IAAY,EAAE,OAAmC;IACpF,MAAM,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAA;AAC/C,CAAC;AAFe,2BAAmB,sBAElC,CAAA;AAKD,+BAAuC,KAAe,EAAE,OAAmC;IACzF,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,qBAAY,EAAE,CAAA;IAErD,MAAM,CAAC,qBAAc,CAAC,OAAO,CAAC,GAAG,CAAC;SAC/B,IAAI,CACH,UAAC,UAAU;QACT,IAAM,GAAG,GAAG,cAAO,CAAC,UAAU,CAAC,CAAA;QAE/B,MAAM,CAAC,eAAU,CAAC,UAAU,CAAC;aAC1B,IAAI,CAAC,UAAA,MAAM;YACV,IAAM,WAAW,GAAG,2BAAoB,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;YAEpE,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,wBAAW,EAAE,QAAG,EAAE,gBAAO,EAAE,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;IACN,CAAC,EACD;QACE,IAAM,WAAW,GAAG,2BAAoB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QAE5D,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,gBAAO,EAAE,wBAAW,EAAE,CAAC,CAAA;IAClD,CAAC,CACF;SACA,IAAI,CAAC,UAAA,OAAO;QACX,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;aAC1D,IAAI,CAAC,cAAM,OAAA,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,EAA3B,CAA2B,CAAC;aACvC,IAAI,CAAC,cAAM,OAAA,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,EAA7B,CAA6B,CAAC;aACzC,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;AACN,CAAC;AA3Be,6BAAqB,wBA2BpC,CAAA;AASD,uBAAwB,IAAY,EAAE,OAAyC;IACrE,qBAAG,EAAE,uBAAM,EAAE,yBAAO,EAAE,iCAAW,CAAY;IAErD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;QAClD,IAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QAC9B,IAAA,yEAAmF,EAA3E,wBAAS,EAAE,0BAAU,EAAE,kBAAM,CAA8C;QAEnF,MAAM,CAAC,WAAM,CAAC,UAAU,CAAC;aACtB,IAAI,CAAC,UAAA,MAAM;YACV,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAA;gBAE5C,MAAM,CAAA;YACR,CAAC;YAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACjB,WAAM,CAAC,UAAU,CAAC;gBAClB,WAAM,CAAC,MAAM,CAAC;aACf,CAAC;iBACC,IAAI,CAAC,cAAM,OAAA,eAAU,CAAC,SAAS,EAAE,GAAG,CAAC,EAA1B,CAA0B,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAC,CAAA;AACL,CAAC;AAKD,uBAAwB,KAAe,EAAE,OAAmC;IAC1E,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,oBAAe,CAAC,OAAO,CAAC,GAAG,EAAE,UAAA,MAAM;YACxC,GAAG,CAAC,CAAe,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,CAAC;gBAApB,IAAM,IAAI,cAAA;gBACb,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,IAAI,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACjE,OAAO,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;wBACxC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,mBAAgB,IAAI,6CAAyC,CAAC,CAAC,CAAA;wBACrG,CAAC;oBACH,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACrD,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;wBAClC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,mBAAgB,IAAI,sCAAkC,CAAC,CAAC,CAAA;wBAC9F,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;oBACpB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC,MAAM,CAAC,qBAAqB,IAAI,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACvE,OAAO,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;wBAC3C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,mBAAgB,IAAI,iDAA6C,CAAC,CAAC,CAAA;wBACzG,CAAC;oBACH,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BAC3D,OAAO,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;wBACrC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,mBAAgB,IAAI,0CAAsC,CAAC,CAAC,CAAA;wBAClG,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC7D,OAAO,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;oBACtC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,mBAAgB,IAAI,2CAAuC,CAAC,CAAC,CAAA;oBACnG,CAAC;gBACH,CAAC;aACF;YAED,MAAM,CAAC,MAAM,CAAA;QACf,CAAC,CAAC,CAAA;IACJ,CAAC;AACH,CAAC;AAKD,qBAAsB,KAAe,EAAE,OAAyC;IACtE,2BAAM,EAAE,iCAAW,CAAY;IAEvC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;QAClD,IAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QAC9B,IAAM,MAAM,GAAG,wBAAiB,CAAC,IAAI,CAAC,CAAA;QACtC,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,wBAAiB,CAAC,EAAE,UAAI,EAAE,UAAI,EAAE,cAAM,EAAE,CAAC,CAAC,UAAU,EAApD,CAAoD,CAAC,CAAA;QAErF,MAAM,CAAC,qBAAgB,CAAC,MAAM,EAAE,UAAA,UAAU;YACxC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAvB,CAAuB,CAAC,CAAA;QACxD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAC,CAAA;AACL,CAAC","sourcesContent":["import extend = require('xtend')\nimport Promise = require('any-promise')\nimport { EventEmitter } from 'events'\nimport { dirname } from 'path'\nimport { transformConfig, transformDtsFile, rmdirUntil, unlink, isFile, readConfig } from './utils/fs'\nimport { findConfigFile } from './utils/find'\nimport { getDependencyPath, normalizeResolutions, getDefinitionPath } from './utils/path'\nimport { Emitter, ResolutionMap } from './interfaces'\n\n/**\n * Uninstall options.\n */\nexport interface UninstallDependencyOptions {\n  save?: boolean\n  saveDev?: boolean\n  savePeer?: boolean\n  global?: boolean\n  cwd: string\n  emitter?: Emitter\n}\n\n/**\n * Uninstall a single dependency.\n */\nexport function uninstallDependency (name: string, options: UninstallDependencyOptions) {\n  return uninstallDependencies([name], options)\n}\n\n/**\n * Uninstall a list of dependencies.\n */\nexport function uninstallDependencies (names: string[], options: UninstallDependencyOptions) {\n  const emitter = options.emitter || new EventEmitter()\n\n  return findConfigFile(options.cwd)\n    .then(\n      (configFile) => {\n        const cwd = dirname(configFile)\n\n        return readConfig(configFile)\n          .then(config => {\n            const resolutions = normalizeResolutions(config.resolution, options)\n\n            return extend(options, { resolutions, cwd, emitter })\n          })\n      },\n      () => {\n        const resolutions = normalizeResolutions(undefined, options)\n\n        return extend(options, { emitter, resolutions })\n      }\n    )\n    .then(options => {\n      return Promise.all(names.map(x => uninstallFrom(x, options)))\n        .then(() => writeBundle(names, options))\n        .then(() => writeToConfig(names, options))\n        .then(() => undefined)\n    })\n}\n\ninterface UninstallDependencyNestedOptions extends UninstallDependencyOptions {\n  resolutions: ResolutionMap\n}\n\n/**\n * Uninstall the dependency.\n */\nfunction uninstallFrom (name: string, options: UninstallDependencyNestedOptions) {\n  const { cwd, global, emitter, resolutions } = options\n\n  return Promise.all(Object.keys(resolutions).map(type => {\n    const path = resolutions[type]\n    const { directory, definition, config } = getDependencyPath({ path, name, global })\n\n    return isFile(definition)\n      .then(exists => {\n        if (!exists) {\n          emitter.emit('enoent', { path: definition })\n\n          return\n        }\n\n        return Promise.all([\n          unlink(definition),\n          unlink(config)\n        ])\n          .then(() => rmdirUntil(directory, cwd))\n      })\n  }))\n}\n\n/**\n * Delete the dependency from the configuration file.\n */\nfunction writeToConfig (names: string[], options: UninstallDependencyOptions) {\n  if (options.save || options.saveDev || options.savePeer) {\n    return transformConfig(options.cwd, config => {\n      for (const name of names) {\n        if (options.save) {\n          if (options.global) {\n            if (config.globalDependencies && config.globalDependencies[name]) {\n              delete config.globalDependencies[name]\n            } else {\n              return Promise.reject(new TypeError(`Typings for \"${name}\" are not listed in global dependencies`))\n            }\n          } else {\n            if (config.dependencies && config.dependencies[name]) {\n              delete config.dependencies[name]\n            } else {\n              return Promise.reject(new TypeError(`Typings for \"${name}\" are not listed in dependencies`))\n            }\n          }\n        }\n\n        if (options.saveDev) {\n          if (options.global) {\n            if (config.globalDevDependencies && config.globalDevDependencies[name]) {\n              delete config.globalDevDependencies[name]\n            } else {\n              return Promise.reject(new TypeError(`Typings for \"${name}\" are not listed in global dev dependencies`))\n            }\n          } else {\n            if (config.devDependencies && config.devDependencies[name]) {\n              delete config.devDependencies[name]\n            } else {\n              return Promise.reject(new TypeError(`Typings for \"${name}\" are not listed in dev dependencies`))\n            }\n          }\n        }\n\n        if (options.savePeer) {\n          if (config.peerDependencies && config.peerDependencies[name]) {\n            delete config.peerDependencies[name]\n          } else {\n            return Promise.reject(new TypeError(`Typings for \"${name}\" are not listed in peer dependencies`))\n          }\n        }\n      }\n\n      return config\n    })\n  }\n}\n\n/**\n * Write the uninstall result to the bundle.\n */\nfunction writeBundle (names: string[], options: UninstallDependencyNestedOptions) {\n  const { global, resolutions } = options\n\n  return Promise.all(Object.keys(resolutions).map(type => {\n    const path = resolutions[type]\n    const bundle = getDefinitionPath(path)\n    const paths = names.map(name => getDependencyPath({ path, name, global }).definition)\n\n    return transformDtsFile(bundle, references => {\n      return references.filter(x => paths.indexOf(x) === -1)\n    })\n  }))\n}\n"]}