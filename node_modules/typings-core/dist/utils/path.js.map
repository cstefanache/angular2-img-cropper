{"version":3,"file":"path.js","sourceRoot":"","sources":["../../src/utils/path.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve, dirname, relative, extname, join, sep } from 'path'\nimport { resolve as resolveUrl, parse as parseUrl, format as formatUrl } from 'url'\nimport isAbsolute = require('is-absolute')\nimport { DEFAULT_TYPINGS_DIR } from './config'\nimport { ResolutionMap } from '../interfaces'\n\n/**\n * Consistent EOL behaviour.\n */\nexport const EOL = '\\n'\n\n/**\n * Check if a path looks like a HTTP url.\n */\nexport function isHttp (url: string) {\n  return /^https?\\:\\/\\//i.test(url)\n}\n\n/**\n * Check if a path looks like a definition file.\n */\nexport function isDefinition (path: string): boolean {\n  if (isHttp(path)) {\n    return isDefinition(parseUrl(path).pathname)\n  }\n\n  return /\\.d\\.ts$/.test(path)\n}\n\n/**\n * Check if a path looks like a module name.\n */\nexport function isModuleName (value: string) {\n  return !isHttp(value) && !isAbsolute(value) && value.charAt(0) !== '.'\n}\n\n/**\n * Normalize Windows slashes.\n */\nexport function normalizeSlashes (path: string) {\n  return path.replace(/\\\\/g, '/')\n}\n\n/**\n * Join URL parts together.\n */\nexport function joinUrl (from: string, to: string) {\n  return `${from.replace(/\\/$/, '')}/${to.replace(/^\\//, '')}`\n}\n\n/**\n * Resolve a path directly from another.\n */\nexport function resolveFrom (from: string, to: string) {\n  // Replace the entire path.\n  if (isHttp(to)) {\n    return to\n  }\n\n  // Resolve relative HTTP requests.\n  if (isHttp(from)) {\n    const url = parseUrl(from)\n    url.pathname = resolveUrl(url.pathname, to)\n    return formatUrl(url)\n  }\n\n  return resolve(dirname(from), to)\n}\n\n/**\n * Make a path relative to another.\n */\nexport function relativeTo (from: string, to: string): string {\n  if (isHttp(from)) {\n    const fromUrl = parseUrl(from)\n\n    if (isHttp(to)) {\n      const toUrl = parseUrl(to)\n\n      if (toUrl.auth !== fromUrl.auth || toUrl.host !== fromUrl.host) {\n        return to\n      }\n\n      let relativeUrl = relativeTo(fromUrl.pathname, toUrl.pathname)\n\n      if (toUrl.search) {\n        relativeUrl += toUrl.search\n      }\n\n      if (toUrl.hash) {\n        relativeUrl += toUrl.hash\n      }\n\n      return relativeUrl\n    }\n\n    return relativeTo(fromUrl.pathname, to)\n  }\n\n  return relative(dirname(from), to)\n}\n\n/**\n * Append `.d.ts` to a path.\n */\nexport function toDefinition (path: string) {\n  if (isHttp(path)) {\n    const url = parseUrl(path)\n    url.pathname = toDefinition(url.pathname)\n    return formatUrl(url)\n  }\n\n  return `${path}.d.ts`\n}\n\n/**\n * Remove `.d.ts` from a path.\n */\nexport function pathFromDefinition (path: string): string {\n  if (isHttp(path)) {\n    return pathFromDefinition(parseUrl(path).pathname)\n  }\n\n  return path.replace(/\\.d\\.ts$/, '')\n}\n\n/**\n * Normalize a path to `.d.ts` file.\n */\nexport function normalizeToDefinition (path: string) {\n  if (isDefinition(path)) {\n    return path\n  }\n\n  if (isHttp(path)) {\n    const url = parseUrl(path)\n    url.pathname = normalizeToDefinition(path)\n    return formatUrl(url)\n  }\n\n  const ext = extname(path)\n\n  return toDefinition(ext ? path.slice(0, -ext.length) : path)\n}\n\n/**\n * Get definition installation paths.\n */\nexport function getDefinitionPath (path: string): string {\n  return join(path, 'index.d.ts')\n}\n\nexport interface LocationOptions {\n  name: string\n  path: string\n  global: boolean\n}\n\nexport interface DependencyLocationResult {\n  definition: string\n  directory: string\n  config: string\n}\n\n/**\n * Return the dependency output locations based on definition options.\n */\nexport function getDependencyPath (options: LocationOptions): DependencyLocationResult {\n  const type = options.global ? 'globals' : 'modules'\n\n  const directory = join(options.path, type, options.name)\n  const definition = getDefinitionPath(directory)\n  const config = join(directory, 'typings.json')\n\n  return { directory, definition, config }\n}\n\n/**\n * Return information about the typings path.\n */\nexport function getInfoFromDependencyLocation (location: string, bundle: string) {\n  const parts = relativeTo(bundle, location).split(sep)\n\n  return {\n    location,\n    global: parts[0] === 'globals',\n    name: parts.slice(1, -1).join('/')\n  }\n}\n\n/**\n * Detect the EOL character of a string.\n */\nexport function detectEOL (contents: string) {\n  const match = contents.match(/\\r\\n|\\r|\\n/)\n  return match ? match[0] : undefined\n}\n\n/**\n * Replace new line characters globally.\n */\nexport function normalizeEOL (contents: string, eol: string) {\n  return contents.replace(/\\r\\n|\\r|\\n/g, eol)\n}\n\n/**\n * Generate a resolved locations map.\n */\nexport function normalizeResolutions (resolutions: string | ResolutionMap, options: { cwd: string }): ResolutionMap {\n  const resolutionMap: ResolutionMap = {}\n\n  if (typeof resolutions === 'object') {\n    for (const type of Object.keys(resolutions)) {\n      resolutionMap[type] = join(options.cwd, resolutions[type])\n    }\n  } else if (typeof resolutions === 'string') {\n    resolutionMap.main = join(options.cwd, resolutions)\n  } else {\n    resolutionMap.main = join(options.cwd, DEFAULT_TYPINGS_DIR)\n  }\n\n  return resolutionMap\n}\n"]}