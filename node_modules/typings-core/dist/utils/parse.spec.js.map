{"version":3,"file":"parse.spec.js","sourceRoot":"","sources":["../../src/utils/parse.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import test = require('blue-tape')\nimport { normalize } from 'path'\nimport { parseDependency, resolveDependency, expandRegistry } from './parse'\nimport { CONFIG_FILE } from './config'\nimport { Dependency } from '../interfaces'\n\ntest('parse', t => {\n  t.test('parse dependency', t => {\n    t.test('parse filename', t => {\n      const actual = parseDependency('file:./foo/bar.d.ts')\n      const expected: Dependency = {\n        raw: 'file:./foo/bar.d.ts',\n        location: normalize('foo/bar.d.ts'),\n        meta: {\n          name: 'bar',\n          path: normalize('foo/bar.d.ts')\n        },\n        type: 'file'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse filename relative', t => {\n      const actual = parseDependency('file:foo/bar.d.ts')\n      const expected: Dependency = {\n        raw: 'file:foo/bar.d.ts',\n        location: normalize('foo/bar.d.ts'),\n        meta: {\n          name: 'bar',\n          path: normalize('foo/bar.d.ts')\n        },\n        type: 'file'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse npm', t => {\n      const actual = parseDependency('npm:foobar')\n      const expected: Dependency = {\n        raw: 'npm:foobar',\n        type: 'npm',\n        meta: {\n          name: 'foobar',\n          path: 'package.json'\n        },\n        location: normalize('foobar/package.json')\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse scoped npm packages', t => {\n      const actual = parseDependency('npm:@foo/bar')\n      const expected: Dependency = {\n        raw: 'npm:@foo/bar',\n        type: 'npm',\n        meta: {\n          name: '@foo/bar',\n          path: 'package.json'\n        },\n        location: normalize('@foo/bar/package.json')\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse npm filename', t => {\n      const actual = parseDependency('npm:typescript/bin/lib.es6.d.ts')\n      const expected: Dependency = {\n        raw: 'npm:typescript/bin/lib.es6.d.ts',\n        type: 'npm',\n        meta: {\n          name: 'typescript',\n          path: normalize('bin/lib.es6.d.ts')\n        },\n        location: normalize('typescript/bin/lib.es6.d.ts')\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse bower', t => {\n      const actual = parseDependency('bower:foobar')\n      const expected: Dependency = {\n        raw: 'bower:foobar',\n        type: 'bower',\n        meta: {\n          name: 'foobar',\n          path: 'bower.json'\n        },\n        location: normalize('foobar/bower.json')\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse bower filename', t => {\n      const actual = parseDependency('bower:foobar/' + CONFIG_FILE)\n      const expected: Dependency = {\n        raw: 'bower:foobar/' + CONFIG_FILE,\n        type: 'bower',\n        meta: {\n          name: 'foobar',\n          path: CONFIG_FILE\n        },\n        location: normalize('foobar/' + CONFIG_FILE)\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse github', t => {\n      const actual = parseDependency('github:foo/bar')\n      const expected: Dependency = {\n        raw: 'github:foo/bar',\n        type: 'github',\n        meta: {\n          name: undefined,\n          org: 'foo',\n          path: CONFIG_FILE,\n          repo: 'bar',\n          sha: 'master'\n        },\n        location: 'https://raw.githubusercontent.com/foo/bar/master/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse github with sha and append config file', t => {\n      const actual = parseDependency('github:foo/bar#test')\n      const expected: Dependency = {\n        raw: 'github:foo/bar#test',\n        type: 'github',\n        meta: {\n          name: undefined,\n          org: 'foo',\n          path: CONFIG_FILE,\n          repo: 'bar',\n          sha: 'test'\n        },\n        location: 'https://raw.githubusercontent.com/foo/bar/test/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse github paths to `.d.ts` files', t => {\n      const actual = parseDependency('github:foo/bar/typings/file.d.ts')\n      const expected: Dependency = {\n        raw: 'github:foo/bar/typings/file.d.ts',\n        type: 'github',\n        meta: {\n          name: 'file',\n          org: 'foo',\n          path: 'typings/file.d.ts',\n          repo: 'bar',\n          sha: 'master'\n        },\n        location: 'https://raw.githubusercontent.com/foo/bar/master/typings/file.d.ts'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse github paths to config file', t => {\n      const actual = parseDependency('github:foo/bar/src/' + CONFIG_FILE)\n      const expected: Dependency = {\n        raw: 'github:foo/bar/src/' + CONFIG_FILE,\n        type: 'github',\n        meta: {\n          name: undefined,\n          org: 'foo',\n          path: `src/${CONFIG_FILE}`,\n          repo: 'bar',\n          sha: 'master'\n        },\n        location: 'https://raw.githubusercontent.com/foo/bar/master/src/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse bitbucket', t => {\n      const actual = parseDependency('bitbucket:foo/bar')\n      const expected: Dependency = {\n        raw: 'bitbucket:foo/bar',\n        type: 'bitbucket',\n        meta: {\n          name: undefined,\n          org: 'foo',\n          path: CONFIG_FILE,\n          repo: 'bar',\n          sha: 'master'\n        },\n        location: 'https://bitbucket.org/foo/bar/raw/master/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse bitbucket and append config file to path', t => {\n      const actual = parseDependency('bitbucket:foo/bar/dir')\n      const expected: Dependency = {\n        raw: 'bitbucket:foo/bar/dir',\n        type: 'bitbucket',\n        meta: {\n          name: undefined,\n          org: 'foo',\n          path: `dir/${CONFIG_FILE}`,\n          repo: 'bar',\n          sha: 'master'\n        },\n        location: 'https://bitbucket.org/foo/bar/raw/master/dir/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse bitbucket with sha', t => {\n      const actual = parseDependency('bitbucket:foo/bar#abc')\n      const expected: Dependency = {\n        raw: 'bitbucket:foo/bar#abc',\n        type: 'bitbucket',\n        meta: {\n          name: undefined,\n          org: 'foo',\n          path: CONFIG_FILE,\n          repo: 'bar',\n          sha: 'abc'\n        },\n        location: 'https://bitbucket.org/foo/bar/raw/abc/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse url', t => {\n      const actual = parseDependency('http://example.com/foo/' + CONFIG_FILE)\n      const expected: Dependency = {\n        raw: 'http://example.com/foo/' + CONFIG_FILE,\n        type: 'http',\n        meta: {},\n        location: 'http://example.com/foo/' + CONFIG_FILE\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse registry', t => {\n      const actual = parseDependency('registry:dt/node')\n      const expected: Dependency = {\n        raw: 'registry:dt/node',\n        type: 'registry',\n        meta: { name: 'node', source: 'dt', tag: undefined as string, version: undefined as string },\n        location: 'https://api.typings.org/entries/dt/node/versions/latest'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse registry with scoped package', t => {\n      const actual = parseDependency('registry:npm/@scoped/npm')\n      const expected: Dependency = {\n        raw: 'registry:npm/@scoped/npm',\n        type: 'registry',\n        meta: { name: '@scoped/npm', source: 'npm', tag: undefined as string, version: undefined as string },\n        location: 'https://api.typings.org/entries/npm/%40scoped%2Fnpm/versions/latest'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse registry with tag', t => {\n      const actual = parseDependency('registry:npm/dep#3.0.0-2016')\n      const expected: Dependency = {\n        raw: 'registry:npm/dep#3.0.0-2016',\n        type: 'registry',\n        meta: { name: 'dep', source: 'npm', tag: '3.0.0-2016', version: undefined as string },\n        location: 'https://api.typings.org/entries/npm/dep/tags/3.0.0-2016'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('parse registry with version', t => {\n      const actual = parseDependency('registry:npm/dep@^4.0')\n      const expected: Dependency = {\n        raw: 'registry:npm/dep@^4.0',\n        type: 'registry',\n        meta: { name: 'dep', source: 'npm', tag: undefined as string, version: '^4.0' },\n        location: 'https://api.typings.org/entries/npm/dep/versions/%5E4.0/latest'\n      }\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('expand registry with default source', t => {\n      const actual = expandRegistry('domready')\n      const expected = 'registry:npm/domready'\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('expand registry with provided source', t => {\n      const actual = expandRegistry('env~atom')\n      const expected = 'registry:env/atom'\n\n      t.deepEqual(actual, expected)\n      t.end()\n    })\n\n    t.test('unknown scheme', t => {\n      t.throws(() => parseDependency('random:fake/dep'), /Unknown dependency: /)\n      t.end()\n    })\n  })\n\n  t.test('resolve dependency', t => {\n    t.equal(resolveDependency('github:foo/bar/baz/x.d.ts', '../lib/test.d.ts'), 'github:foo/bar/lib/test.d.ts')\n    t.equal(resolveDependency('http://example.com/foo/bar.d.ts', 'x.d.ts'), 'http://example.com/foo/x.d.ts')\n\n    t.end()\n  })\n})\n"]}