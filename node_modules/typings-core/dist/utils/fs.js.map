{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../src/utils/fs.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,aACpB,CAAC,CADgC;AACjC,IAAO,MAAM,WAAW,OAAO,CAAC,CAAA;AAChC,IAAO,OAAO,WAAW,aAAa,CAAC,CAAA;AACvC,IAAO,OAAO,WAAW,SAAS,CAAC,CAAA;AACnC,IAAO,QAAQ,WAAW,WAAW,CAAC,CAAA;AACtC,IAAO,KAAK,WAAW,YAAY,CAAC,CAAA;AACpC,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAA;AACrC,IAAO,cAAc,WAAW,iBAAiB,CAAC,CAAA;AAClD,IAAO,aAAa,WAAW,gBAAgB,CAAC,CAAA;AAChD,IAAO,eAAe,WAAW,kBAAkB,CAAC,CAAA;AACpD,IAAO,YAAY,WAAW,eAAe,CAAC,CAAA;AAC9C,IAAO,QAAQ,WAAW,WAAW,CAAC,CAAA;AACtC,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAA;AACjC,IAAO,IAAI,WAAW,YAAY,CAAC,CAAA;AACnC,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAA;AACrC,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAA;AACjC,IAAO,WAAW,WAAW,sBAAsB,CAAC,CAAA;AACpD,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAA;AACjC,gCAA2B,iBAC3B,CAAC,CAD2C;AAC5C,IAAO,KAAK,WAAW,OAAO,CAAC,CAAA;AAC/B,qBAA8B,MAC9B,CAAC,CADmC;AACpC,oBAAkC,KAClC,CAAC,CADsC;AACvC,IAAO,QAAQ,WAAW,iBAAiB,CAAC,CAAA;AAC5C,uBAA4B,UAC5B,CAAC,CADqC;AACtC,qBAAqD,QACrD,CAAC,CAD4D;AAC7D,2BAAqD,cACrD,CAAC,CADkE;AAEnE,mBAAe,MACf,CAAC,CADoB;AACrB,sBAAkB,SAClB,CAAC,CAD0B;AAC3B,sBAAkB,SAElB,CAAC,CAF0B;AAE3B,IAAM,GAAG,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAA;AACzC,IAAM,WAAW,GAAG,WAAQ,CAAC,YAAE,CAAC,WAAW,CAAC,CAAA;AAC5C,IAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;AAUjB,aAAK,GAAY,MAAM,CAAC,EAAE,EAAE,OAAO,CAA8B,KAAK,CAAC,CAAC,CAAA;AACxE,YAAI,GAAkB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;AAClD,gBAAQ,GAAe,MAAM,CAAC,EAAE,EAAE,OAAO,CAAyB,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;AAC/E,iBAAS,GAAgB,OAAO,CAAgC,EAAE,CAAC,SAAS,CAAC,CAAA;AAC7E,cAAM,GAAmB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAiB,MAAM,CAAC,CAAC,CAAA;AACpE,cAAM,GAAiB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAe,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;AACnE,YAAI,GAAW,MAAM,CAAC,EAAE,EAAE,OAAO,CAAiC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;AACjF,cAAM,GAAiB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAe,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;AACzE,cAAM,GAAiB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAe,MAAM,CAAC,CAAC,CAAA;AAChE,eAAO,GAAqB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;AAC3D,aAAK,GAAiB,MAAM,CAAC,EAAE,EAAE,OAAO,CAAe,EAAE,CAAC,KAAK,CAAC,CAAC,CAAA;AAK9E,oBAA4B,IAAY,EAAE,KAAa;IACrD,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC;IAED,MAAM,CAAC,eAAO,CAAC,IAAI,CAAC;SACjB,IAAI,CAAC,UAAA,KAAK;QAET,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAA;QACR,CAAC;QAED,MAAM,CAAC,aAAK,CAAC,IAAI,CAAC;aACf,IAAI,CAAC,cAAM,OAAA,UAAU,CAAC,cAAO,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,EAAhC,CAAgC,CAAC,CAAA;IACjD,CAAC,CAAC;SACD,KAAK,CAAC,UAAA,GAAG;QACR,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAA;QACR,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,GAAG,CAAC,CAAA;IAClC,CAAC,CAAC,CAAA;AACN,CAAC;AAtBe,kBAAU,aAsBzB,CAAA;AAKD,gBAAwB,IAAY;IAClC,MAAM,CAAC,YAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,EAAE,EAAb,CAAa,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAA;AAC5D,CAAC;AAFe,cAAM,SAErB,CAAA;AAKD,kBAA0B,IAAY,EAAE,UAAoB;IAC1D,MAAM,CAAC,gBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;SAC1B,IAAI,CAAC,QAAQ,CAAC;SACd,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,EAArC,CAAqC,CAAC,CAAA;AAC5D,CAAC;AAJe,gBAAQ,WAIvB,CAAA;AAKD,mBAA2B,IAAY,EAAE,IAAS,EAAE,MAAwB,EAAE,GAAY;IACxF,MAAM,CAAC,iBAAS,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAA;AAC1D,CAAC;AAFe,iBAAS,YAExB,CAAA;AAKD,oBAA4B,IAAY;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAA;AACnE,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAKD,wBAAgC,IAAY;IAC1C,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAA;AACvE,CAAC;AAFe,sBAAc,iBAE7B,CAAA;AAKD,qBAA6B,MAAkB,EAAE,IAAY;IAE3D,MAAM,CAAC,MAAM,CAAA;AACf,CAAC;AAHe,mBAAW,cAG1B,CAAA;AAKY,aAAK,GAAG,WAAW,CAAC;IAC/B,KAAK,EAAE,YAAE,CAAC,KAAK;IACf,SAAS,EAAE,YAAE,CAAC,SAAS;IACvB,UAAU,EAAE,YAAE,CAAC,UAAU;IACzB,OAAO,EAAE,YAAE,CAAC,OAAO;CACpB,CAAC,CAAA;AAKW,gBAAQ,GAAG,MAAM,CAAC,CAAC,EAAE,kBAAmB,GAAW;IACtD,wDAAkB,EAAE,oBAAE,EAAE,sBAAG,EAAE,wBAAI,EAAE,kCAAS,CAAO;IAE3D,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;QAClB,QAAG;QACH,OAAO,EAAE;YACP,YAAY,EAAE,QAAQ,CAAC,SAAS,EAAE;gBAChC,WAAW,EAAE,OAAO,CAAC,OAAO;gBAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,cAAc,EAAE,GAAG,CAAC,OAAO;aAC5B,CAAC;SACH;QACD,SAAS,EAAE,QAAQ,CAAC,eAAe,CAAC;YAClC,MAAE;YACF,QAAG;YACH,UAAI;YACJ,KAAK,EAAE,aAAK,CAAC,GAAG,CAAC;YACjB,sCAAkB;SACnB,CAAC;KACH,CAAC;SAEC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;SAExB,GAAG,CAAC,eAAe,CAAC,YAAE,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;SAE1C,GAAG,CAAC,UAAU,OAAO,EAAE,IAAI;QAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,eAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1B,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,eAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAA;YACzD,CAAC;YAED,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAU,QAAQ;gBACnC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;oBACtC,eAAK,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAA;gBAC1D,CAAC;gBAED,MAAM,CAAC,QAAQ,CAAA;YACjB,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,MAAM,CAAC,IAAI,EAAE,CAAA;IACf,CAAC,CAAC;SAED,GAAG,CAAC,UAAU,OAAO,EAAE,IAAI;QAClB,mCAAQ,CAAgB;QAEhC,EAAE,CAAC,CAAC,YAAE,CAAC,WAAW,IAAI,CAAC,QAAQ,KAAK,2BAA2B,IAAI,QAAQ,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAClG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,WAAS,YAAE,CAAC,WAAa,CAAC,CAAA;QACzD,CAAC;QAED,MAAM,CAAC,IAAI,EAAE,CAAA;IACf,CAAC,CAAC;SAED,GAAG,CAAC,aAAa,EAAE,CAAC;SAEpB,IAAI,CAAC,UAAU,QAAQ;QACtB,eAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAA;QAEzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAA;IACtB,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAKF,sBAA8B,IAAY;IACxC,MAAM,CAAC,aAAM,CAAC,IAAI,CAAC,GAAG,gBAAQ,CAAC,IAAI,CAAC,GAAG,gBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;AAC/D,CAAC;AAFe,oBAAY,eAE3B,CAAA;AAKD,sBAA8B,IAAY,EAAE,UAAoB;IAC9D,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;SACtB,IAAI,CAAC,QAAQ,CAAC;SACd,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,EAArC,CAAqC,CAAC,CAAA;AAC5D,CAAC;AAJe,oBAAY,eAI3B,CAAA;AAKD,uBAA+B,IAAS,EAAE,MAAwB,EAAE,GAAiB;IAAjB,mBAAiB,GAAjB,gBAAiB;IACnF,MAAM,CAAC,mBAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAA;AACzE,CAAC;AAFe,qBAAa,gBAE5B,CAAA;AAKD,mBAA2B,QAAgB,EAAE,IAAY,EAAE,UAAmB;IAC5E,EAAE,CAAC,CAAC,QAAQ,KAAK,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,EAAE,CAAA;IACX,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AACpC,CAAC;AANe,iBAAS,YAMxB,CAAA;AAKD,uBAA+B,IAAY,EAAE,SAAyD;IACpG,gBAAiB,QAAgB;QAC/B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;aACxC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,iBAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAzB,CAAyB,CAAC,CAAA;IAChD,CAAC;IAED,IAAM,QAAQ,GAAM,IAAI,UAAO,CAAA;IAC/B,IAAM,WAAW,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAA;IAE5D,IAAM,MAAM,GAAG,YAAI,CAAC,QAAQ,EAAE,WAAW,CAAC;SACvC,IAAI,CAAC;QACJ,MAAM,CAAC,gBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IAC/B,CAAC,CAAC;SACD,IAAI,CACH,UAAC,QAAQ,IAAK,OAAA,MAAM,CAAC,QAAQ,CAAC,EAAhB,CAAgB,EAC9B,cAAM,OAAA,MAAM,CAAC,SAAS,CAAC,EAAjB,CAAiB,CACxB,CAAA;IAEH,MAAM,CAAC,yBAAc,CAAC,MAAM,EAAE,cAAM,OAAA,cAAM,CAAC,QAAQ,CAAC,EAAhB,CAAgB,CAAC,CAAA;AACvD,CAAC;AAnBe,qBAAa,gBAmB5B,CAAA;AAKD,uBAAmC,IAAY,EAAE,SAAyB,EAAE,UAAoB;IAC9F,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,UAAC,QAAQ;QAClC,IAAM,MAAM,GAAG,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,SAAS,CAAA;QACnE,IAAM,IAAI,GAAG,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,GAAG,SAAS,CAAA;QACnF,IAAM,GAAG,GAAG,QAAQ,GAAG,gBAAS,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAA;QAEtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACpC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,EAAhC,CAAgC,CAAC,CAAA;IACnD,CAAC,CAAC,CAAA;AACJ,CAAC;AATe,qBAAa,gBAS5B,CAAA;AAKD,yBAAiC,GAAW,EAAE,SAA6C;IACzF,IAAM,IAAI,GAAG,WAAI,CAAC,GAAG,EAAE,oBAAW,CAAC,CAAA;IAEnC,MAAM,CAAC,aAAa,CAClB,IAAI,EACJ,UAAC,MAAW;QAAX,sBAAW,GAAX,WAAW;QACV,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;aACzD,IAAI,CAAC,UAAA,MAAM;YACV,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;YACrD,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;YAC7D,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;YAC3D,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;YACjE,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,qBAAqB,GAAG,QAAQ,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAA;YACvE,CAAC;YAED,MAAM,CAAC,MAAM,CAAA;QACf,CAAC,CAAC,CAAA;IACN,CAAC,EACD,IAAI,CACL,CAAA;AACH,CAAC;AAjCe,uBAAe,kBAiC9B,CAAA;AAKD,0BAAkC,IAAY,EAAE,SAA8D;IAC5G,IAAM,GAAG,GAAG,cAAO,CAAC,IAAI,CAAC,CAAA;IAEzB,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,UAAA,QAAQ;QACjC,IAAM,OAAO,GAAG,4BAAe,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;QAE9C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aACvC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,gCAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAA9C,CAA8C,CAAC,CAAA;IACpE,CAAC,CAAC,CAAA;AACJ,CAAC;AATe,wBAAgB,mBAS/B,CAAA;AAKD,oBAA4B,IAAoB;IAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;QAClB,MAAM,EAAE,SAAS;QACjB,YAAY,EAAE,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC;QACnD,eAAe,EAAE,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC;QACzD,gBAAgB,EAAE,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC3D,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC;QAC/D,qBAAqB,EAAE,kBAAkB,CAAC,IAAI,CAAC,qBAAqB,CAAC;KACtE,CAAC,CAAA;AACJ,CAAC;AATe,kBAAU,aASzB,CAAA;AAKD,4BAAoC,YAA8B;IAChE,IAAM,IAAI,GAAqB,EAAE,CAAA;IACjC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IAGtC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAA;IACR,CAAC;IAED,GAAG,CAAC,CAAc,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,CAAC;QAAlB,IAAM,GAAG,aAAA;QACZ,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAA;KAC1C;IAED,MAAM,CAAC,IAAI,CAAA;AACb,CAAC;AAde,0BAAkB,qBAcjC,CAAA","sourcesContent":["import * as fs from 'graceful-fs'\nimport extend = require('xtend')\nimport Promise = require('any-promise')\nimport thenify = require('thenify')\nimport stripBom = require('strip-bom')\nimport parse = require('parse-json')\nimport popsicle = require('popsicle')\nimport popsicleStatus = require('popsicle-status')\nimport popsicleRetry = require('popsicle-retry')\nimport popsicleRewrite = require('popsicle-rewrite')\nimport detectIndent = require('detect-indent')\nimport sortKeys = require('sort-keys')\nimport Mkdirp = require('mkdirp')\nimport uniq = require('array-uniq')\nimport lockfile = require('lockfile')\nimport Rimraf = require('rimraf')\nimport createProxy = require('popsicle-proxy-agent')\nimport Throat = require('throat')\nimport promiseFinally from 'promise-finally'\nimport Touch = require('touch')\nimport { join, dirname } from 'path'\nimport { parse as parseUrl } from 'url'\nimport template = require('string-template')\nimport { CONFIG_FILE } from './config'\nimport { isHttp, EOL, detectEOL, normalizeEOL } from './path'\nimport { parseReferences, stringifyReferences } from './references'\nimport { ConfigJson, DependencyTree, DependencyBranch } from '../interfaces'\nimport rc from './rc'\nimport store from './store'\nimport debug from './debug'\n\nconst pkg = require('../../package.json')\nconst registryURL = parseUrl(rc.registryURL)\nconst throat = Throat(Promise)\n\nexport type Stats = fs.Stats\n\nexport type LockOp = (path: string, options?: lockfile.Options) => Promise<void>\nexport type TouchOp = (path: string, options?: Touch.Options) => Promise<void>\nexport type ReadFileOp = (path: string, encoding: string) => Promise<string>\nexport type WriteFileOp = (path: string, contents: string | Buffer) => Promise<void>\nexport type PathOp <T> = (path: string) => Promise<T>\n\nexport const touch: TouchOp = throat(10, thenify<string, Touch.Options, void>(Touch))\nexport const stat: PathOp<Stats> = throat(10, thenify(fs.stat))\nexport const readFile: ReadFileOp = throat(10, thenify<string, string, string>(fs.readFile))\nexport const writeFile: WriteFileOp = thenify<string, string | Buffer, void>(fs.writeFile)\nexport const mkdirp: PathOp<string> = throat(10, thenify<string, string>(Mkdirp))\nexport const unlink: PathOp<void> = throat(10, thenify<string, void>(fs.unlink))\nexport const lock: LockOp = throat(10, thenify<string, lockfile.Options, void>(lockfile.lock))\nexport const unlock: PathOp<void> = throat(10, thenify<string, void>(lockfile.unlock))\nexport const rimraf: PathOp<void> = throat(10, thenify<string, void>(Rimraf))\nexport const readdir: PathOp<string[]> = throat(10, thenify(fs.readdir))\nexport const rmdir: PathOp<void> = throat(10, thenify<string, void>(fs.rmdir))\n\n/**\n * Remove directories until a root directory, while empty.\n */\nexport function rmdirUntil (path: string, until: string): Promise<void> {\n  if (path === until) {\n    return Promise.resolve()\n  }\n\n  return readdir(path)\n    .then(files => {\n      // Exit loop when files exist.\n      if (files.length) {\n        return\n      }\n\n      return rmdir(path)\n        .then(() => rmdirUntil(dirname(path), until))\n    })\n    .catch(err => {\n      if (err.code === 'ENOENT') {\n        return\n      }\n\n      return Promise.reject<void>(err)\n    })\n}\n\n/**\n * Verify a path exists and is a file.\n */\nexport function isFile (path: string): Promise<boolean> {\n  return stat(path).then(stat => stat.isFile(), () => false)\n}\n\n/**\n * Read JSON from a path.\n */\nexport function readJson (path: string, allowEmpty?: boolean): Promise<any> {\n  return readFile(path, 'utf8')\n    .then(stripBom)\n    .then(contents => parseJson(contents, path, allowEmpty))\n}\n\n/**\n * Write JSON to a file.\n */\nexport function writeJson (path: string, json: any, indent?: string | number, eol?: string) {\n  return writeFile(path, stringifyJson(json, indent, eol))\n}\n\n/**\n * Read a configuration file.\n */\nexport function readConfig (path: string): Promise<ConfigJson> {\n  return readJson(path, true).then(data => parseConfig(data, path))\n}\n\n/**\n * Read a configuration file from anywhere (HTTP or local).\n */\nexport function readConfigFrom (path: string): Promise<ConfigJson> {\n  return readJsonFrom(path, true).then(data => parseConfig(data, path))\n}\n\n/**\n * Parse a config object with helpful validation.\n */\nexport function parseConfig (config: ConfigJson, path: string): ConfigJson {\n  // TODO(blakeembrey): Validate config object.\n  return config\n}\n\n/**\n * Create a proxy agent function.\n */\nexport const proxy = createProxy({\n  proxy: rc.proxy,\n  httpProxy: rc.httpProxy,\n  httpsProxy: rc.httpsProxy,\n  noProxy: rc.noProxy\n})\n\n/**\n * Read a file over HTTP, using a file cache and status check.\n */\nexport const readHttp = throat(5, function readHttp (url: string): Promise<string> {\n  const { rejectUnauthorized, ca, key, cert, userAgent } = rc\n\n  return popsicle.get({\n    url,\n    headers: {\n      'User-Agent': template(userAgent, {\n        nodeVersion: process.version,\n        platform: process.platform,\n        arch: process.arch,\n        typingsVersion: pkg.version\n      })\n    },\n    transport: popsicle.createTransport({\n      ca,\n      key,\n      cert,\n      agent: proxy(url),\n      rejectUnauthorized\n    })\n  })\n    // Check responses are \"200 OK\".\n    .use(popsicleStatus(200))\n    // Enable URL rewrite\n    .use(popsicleRewrite(rc.urlRewrites || {}))\n    // Enable tracking of repeat users on the registry.\n    .use(function (request, next) {\n      if (request.Url.host === registryURL.host) {\n        if (store.get('clientId')) {\n          request.set('Typings-Client-Id', store.get('clientId'))\n        }\n\n        return next().then(function (response) {\n          if (response.get('Typings-Client-Id')) {\n            store.set('clientId', response.get('Typings-Client-Id'))\n          }\n\n          return response\n        })\n      }\n\n      return next()\n    })\n    // Enable access tokens with GitHub.\n    .use(function (request, next) {\n      const { hostname } = request.Url\n\n      if (rc.githubToken && (hostname === 'raw.githubusercontent.com' || hostname === 'api.github.com')) {\n        request.set('Authorization', `token ${rc.githubToken}`)\n      }\n\n      return next()\n    })\n    // Retry failed HTTP requests.\n    .use(popsicleRetry())\n    // Return only the response body.\n    .then(function (response) {\n      debug('http response', response.toJSON())\n\n      return response.body\n    })\n})\n\n/**\n * Read a file from anywhere (HTTP or local filesystem).\n */\nexport function readFileFrom (from: string): Promise<string> {\n  return isHttp(from) ? readHttp(from) : readFile(from, 'utf8')\n}\n\n/**\n * Read JSON from anywhere.\n */\nexport function readJsonFrom (from: string, allowEmpty?: boolean): Promise<any> {\n  return readFileFrom(from)\n    .then(stripBom)\n    .then(contents => parseJson(contents, from, allowEmpty))\n}\n\n/**\n * Stringify an object as JSON for the filesystem (appends EOL).\n */\nexport function stringifyJson (json: any, indent?: number | string, eol: string = EOL) {\n  return normalizeEOL(JSON.stringify(json, null, indent || 2), eol) + eol\n}\n\n/**\n * Parse a string as JSON.\n */\nexport function parseJson (contents: string, path: string, allowEmpty: boolean) {\n  if (contents === '' && allowEmpty) {\n    return {}\n  }\n\n  return parse(contents, null, path)\n}\n\n/**\n * Transform a file contents (read and write in a single operation).\n */\nexport function transformFile (path: string, transform: (contents: string) => string | Promise<string>): Promise<void> {\n  function handle (contents: string) {\n    return Promise.resolve(transform(contents))\n      .then(contents => writeFile(path, contents))\n  }\n\n  const lockfile = `${path}.lock`\n  const lockOptions = { wait: 250, retries: 25, stale: 60000 }\n\n  const result = lock(lockfile, lockOptions)\n    .then(() => {\n      return readFile(path, 'utf8')\n    })\n    .then(\n      (contents) => handle(contents),\n      () => handle(undefined)\n    )\n\n  return promiseFinally(result, () => unlock(lockfile))\n}\n\n/**\n * Transform a JSON file in a single operation.\n */\nexport function transformJson <T> (path: string, transform: (json: T) => T, allowEmpty?: boolean) {\n  return transformFile(path, (contents) => {\n    const indent = contents ? detectIndent(contents).indent : undefined\n    const json = contents ? parseJson(stripBom(contents), path, allowEmpty) : undefined\n    const eol = contents ? detectEOL(contents) : undefined\n\n    return Promise.resolve(transform(json))\n      .then(json => stringifyJson(json, indent, eol))\n  })\n}\n\n/**\n * Transform a configuration file in a single operation.\n */\nexport function transformConfig (cwd: string, transform: (config: ConfigJson) => ConfigJson) {\n  const path = join(cwd, CONFIG_FILE)\n\n  return transformJson<ConfigJson>(\n    path,\n    (config = {}) => {\n      return Promise.resolve(transform(parseConfig(config, path)))\n        .then(config => {\n          if (config.dependencies) {\n            config.dependencies = sortKeys(config.dependencies)\n          }\n\n          if (config.peerDependencies) {\n            config.peerDependencies = sortKeys(config.peerDependencies)\n          }\n\n          if (config.devDependencies) {\n            config.devDependencies = sortKeys(config.devDependencies)\n          }\n\n          if (config.globalDependencies) {\n            config.globalDependencies = sortKeys(config.globalDependencies)\n          }\n\n          if (config.globalDevDependencies) {\n            config.globalDevDependencies = sortKeys(config.globalDevDependencies)\n          }\n\n          return config\n        })\n    },\n    true\n  )\n}\n\n/**\n * Transform a `.d.ts` file with references in-place.\n */\nexport function transformDtsFile (path: string, transform: (typings: string[]) => string[] | Promise<string[]>) {\n  const cwd = dirname(path)\n\n  return transformFile(path, contents => {\n    const typings = parseReferences(contents, cwd)\n\n    return Promise.resolve(transform(typings))\n      .then(typings => stringifyReferences(uniq(typings).sort(), cwd))\n  })\n}\n\n/**\n * Convert the dependency tree into a JSON-safe structure.\n */\nexport function treeToJson (tree: DependencyTree) {\n  return extend(tree, {\n    parent: undefined,\n    dependencies: dependenciesToJson(tree.dependencies),\n    devDependencies: dependenciesToJson(tree.devDependencies),\n    peerDependencies: dependenciesToJson(tree.peerDependencies),\n    globalDependencies: dependenciesToJson(tree.globalDependencies),\n    globalDevDependencies: dependenciesToJson(tree.globalDevDependencies)\n  })\n}\n\n/**\n * Convert a map of dependencies to JSON-safe structures.\n */\nexport function dependenciesToJson (dependencies: DependencyBranch) {\n  const json: DependencyBranch = {}\n  const keys = Object.keys(dependencies)\n\n  // Omit empty dependency objects.\n  if (keys.length === 0) {\n    return\n  }\n\n  for (const key of keys) {\n    json[key] = treeToJson(dependencies[key])\n  }\n\n  return json\n}\n"]}