{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../src/utils/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import invariant = require('invariant')\nimport { resolve as resolveUrl } from 'url'\nimport { normalize, join, basename, dirname } from 'path'\nimport { Dependency, DependencyMeta } from '../interfaces'\nimport { CONFIG_FILE } from './config'\nimport { isDefinition, normalizeSlashes, pathFromDefinition, joinUrl } from './path'\nimport rc from './rc'\n\n/**\n * Parse the git host options from the raw string.\n */\nfunction gitFromPath (src: string) {\n  const index = src.indexOf('#')\n  const sha = index === -1 ? 'master' : src.substr(index + 1)\n  const segments = index === -1 ? src.split('/') : src.substr(0, index).split('/')\n  const org = segments.shift()\n  const repo = segments.shift()\n  let path = segments.join('/')\n  let name: string\n\n  // Automatically look for the config file in the root.\n  if (segments.length === 0) {\n    path = CONFIG_FILE\n  } else if (isDefinition(path)) {\n    name = basename(pathFromDefinition(path))\n  } else if (segments[segments.length - 1] !== CONFIG_FILE) {\n    path += `/${CONFIG_FILE}`\n  }\n\n  return { org, repo, path, sha, name }\n}\n\n/**\n * Split the protocol from the rest of the string.\n */\nfunction splitProtocol (raw: string): [string, string] {\n  const index = raw.indexOf(':')\n\n  if (index === -1) {\n    return [undefined, raw]\n  }\n\n  return [raw.substr(0, index), normalizeSlashes(raw.substr(index + 1))]\n}\n\n/**\n * Parse the dependency string.\n */\nexport function parseDependency (raw: string): Dependency {\n  const [type, src] = splitProtocol(raw)\n\n  // `file:path/to/file.d.ts`\n  if (type === 'file') {\n    const location = normalize(src)\n    const filename = basename(location)\n    const name = isDefinition(filename) ? pathFromDefinition(filename) : undefined\n\n    invariant(\n      filename === CONFIG_FILE || isDefinition(filename),\n      `Only \".d.ts\" and \"${CONFIG_FILE}\" files are supported`\n    )\n\n    return {\n      raw,\n      type,\n      meta: {\n        name: name,\n        path: location\n      },\n      location\n    }\n  }\n\n  // `bitbucket:org/repo/path#sha`\n  if (type === 'github') {\n    const meta = gitFromPath(src)\n    const { org, repo, path, sha } = meta\n    const location = `https://raw.githubusercontent.com/${org}/${repo}/${sha}/${path}`\n\n    return {\n      raw,\n      meta,\n      type,\n      location\n    }\n  }\n\n  // `bitbucket:org/repo/path#sha`\n  if (type === 'bitbucket') {\n    const meta = gitFromPath(src)\n    const { org, repo, path, sha } = meta\n    const location = `https://bitbucket.org/${org}/${repo}/raw/${sha}/${path}`\n\n    return {\n      raw,\n      meta,\n      type,\n      location\n    }\n  }\n\n  // `npm:dependency`, `npm:@scoped/dependency`\n  if (type === 'npm') {\n    const parts = src.split('/')\n    const isScoped = parts.length > 0 && parts[0].charAt(0) === '@'\n    const hasPath = isScoped ? parts.length > 2 : parts.length > 1\n\n    if (!hasPath) {\n      parts.push('package.json')\n    }\n\n    return {\n      raw,\n      type: 'npm',\n      meta: {\n        name: isScoped ? parts.slice(0, 2).join('/') : parts[0],\n        path: join(...parts.slice(isScoped ? 2 : 1))\n      },\n      location: join(...parts)\n    }\n  }\n\n  // `bower:dependency`\n  if (type === 'bower') {\n    const parts = src.split('/')\n\n    if (parts.length === 1) {\n      parts.push('bower.json')\n    }\n\n    return {\n      raw,\n      type: 'bower',\n      meta: {\n        name: parts[0],\n        path: join(...parts.slice(1))\n      },\n      location: join(...parts)\n    }\n  }\n\n  // `http://example.com/foo.d.ts`\n  if (type === 'http' || type === 'https') {\n    return {\n      raw,\n      type,\n      meta: {},\n      location: raw\n    }\n  }\n\n  // `registry:source/module#tag`, `registry:source/module@version`\n  if (type === 'registry') {\n    const parts = /^([^\\/]+)\\/(.+?)(?:@(.*?)|#(.*?))?$/.exec(src)\n\n    if (parts == null) {\n      throw new TypeError(`Unable to parse: ${raw}`)\n    }\n\n    const [, source, name, version, tag] = parts\n\n    if (version != null && tag != null) {\n      throw new TypeError(`Unable to use tag and version together: ${raw}`)\n    }\n\n    let path = `entries/${encodeURIComponent(source)}/${encodeURIComponent(name)}`\n\n    // Select the best API to get the registry version.\n    if (tag) {\n      path += `/tags/${encodeURIComponent(tag)}`\n    } else if (version) {\n      path += `/versions/${encodeURIComponent(version)}/latest`\n    } else {\n      path += '/versions/latest'\n    }\n\n    return {\n      raw,\n      type,\n      meta: {\n        source,\n        name,\n        version,\n        tag\n      },\n      location: joinUrl(rc.registryURL, path)\n    }\n  }\n\n  throw new TypeError(`Unknown dependency: ${raw}`)\n}\n\n/**\n * Resolve a path relative to the raw string.\n */\nexport function resolveDependency (raw: string, filename: string) {\n  const { type, meta, location } = parseDependency(raw)\n\n  if (type === 'http' || type === 'https') {\n    return resolveUrl(location, filename)\n  }\n\n  if (type === 'github' || type === 'bitbucket') {\n    const { org, repo, sha } = meta\n    const path = join(dirname(meta.path), filename)\n\n    return buildDependencyExpression(type, { org, repo, sha, path })\n  }\n\n  if (type === 'npm' || type === 'bower') {\n    const { name } = meta\n    const path = join(dirname(meta.path), filename)\n\n    return buildDependencyExpression(type, { name, path })\n  }\n\n  if (type === 'file') {\n    const path = join(location, filename)\n\n    return buildDependencyExpression(type, { path })\n  }\n\n  throw new TypeError(`Unable to resolve dependency from \"${raw}\"`)\n}\n\n/**\n * Options to use when parsing a dependency string.\n */\nexport interface ParseDependencyOptions {\n  name?: string\n  source?: string\n}\n\n/**\n * Parse and expand the CLI dependency expression.\n */\nexport function parseDependencyExpression (raw: string, options?: ParseDependencyOptions) {\n  const [, name, scheme, registry] = /^(?:([^=!:#]+)=)?(?:([\\w]+\\:.+)|((?:[\\w]+\\~)?.+))$/.exec(raw)\n\n  return {\n    name: name || options.name,\n    location: scheme || expandRegistry(registry, options)\n  }\n}\n\n/**\n * Build a dependency expression from metadata.\n */\nexport function buildDependencyExpression (type: string, meta: DependencyMeta): string {\n  if (type === 'github' || type === 'bitbucket') {\n    const { org, repo, sha } = meta\n    const resolvedPath = normalizeSlashes(meta.path)\n\n    return `${type}:${org}/${repo}/${resolvedPath}${sha === 'master' ? '' : '#' + sha}`\n  }\n\n  if (type === 'npm' || type === 'bower') {\n    const { path } = meta\n    const resolvedPath = path ? `/${normalizeSlashes(path)}` : ''\n\n    return `${type}:${meta.name}${resolvedPath}`\n  }\n\n  if (type === 'file') {\n    return `file:${normalizeSlashes(meta.path)}`\n  }\n\n  throw new TypeError(`Unable to expand dependency type: \"${type}\"`)\n}\n\n/**\n * Parse the registry dependency string.\n */\nexport function expandRegistry (raw: string, options: ParseDependencyOptions = {}) {\n  if (typeof raw !== 'string') {\n    throw new TypeError(`Expected registry name to be a string, not ${typeof raw}`)\n  }\n\n  const indexOf = raw.indexOf('~')\n  let source = options.source || rc.defaultSource\n  let name: string\n\n  if (indexOf === -1) {\n    name = raw\n  } else {\n    source = raw.substr(0, indexOf)\n    name = raw.substr(indexOf + 1)\n  }\n\n  return `registry:${source}/${name}`\n}\n"]}