{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../src/bundle.ts"],"names":[],"mappings":";AAAA,IAAO,OAAO,WAAW,aAAa,CAAC,CAAA;AACvC,qBAAiC,MACjC,CAAC,CADsC;AACvC,uBAA6B,QAC7B,CAAC,CADoC;AACrC,6BAAuC,oBACvC,CAAC,CAD0D;AAC3D,wBAAuC,eACvC,CAAC,CADqD;AACtD,mBAAkC,YAClC,CAAC,CAD6C;AAmB9C,gBAAwB,OAAsB;IACpC,qBAAG,EAAE,uBAAM,EAAE,iBAAG,CAAY;IACpC,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,qBAAY,EAAE,CAAA;IACrD,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,MAAM,CAAA;IAE/C,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,sCAAsC,CAAC,CAAC,CAAA;IAC9E,CAAC;IAED,MAAM,CAAC,qCAAsB,CAAC,EAAE,QAAG,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,gBAAO,EAAE,CAAC;SACvE,IAAI,CAAC,UAAA,IAAI;QACR,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAA;QAEtC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS,CACjC,yFAAyF,CAC1F,CAAC,CAAA;QACJ,CAAC;QAED,MAAM,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,QAAG,EAAE,UAAI,EAAE,cAAM,EAAE,gBAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAA;IAChF,CAAC,CAAC;SACD,IAAI,CAAC,UAAC,MAAqB;QAC1B,IAAM,IAAI,GAAG,cAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;QAE9B,MAAM,CAAC,WAAM,CAAC,cAAO,CAAC,IAAI,CAAC,CAAC;aACzB,IAAI,CAAC;YACJ,MAAM,CAAC,cAAS,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAA;QACpD,CAAC,CAAC;aACD,IAAI,CAAC,cAAM,OAAA,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,EAAvB,CAAuB,CAAC,CAAA;IACxC,CAAC,CAAC,CAAA;AACN,CAAC;AA9Be,cAAM,SA8BrB,CAAA","sourcesContent":["import Promise = require('any-promise')\nimport { resolve, dirname } from 'path'\nimport { EventEmitter } from 'events'\nimport { resolveAllDependencies } from './lib/dependencies'\nimport { CompileResult, compile } from './lib/compile'\nimport { writeFile, mkdirp } from './utils/fs'\nimport { Emitter } from './interfaces'\nimport { InstallResult } from './install'\n\n/**\n * Bundle configuration options.\n */\nexport interface BundleOptions {\n  name?: string\n  cwd: string\n  global?: boolean\n  resolution?: string\n  out: string\n  emitter?: Emitter\n}\n\n/**\n * Bundle the current typings project into a single global definition.\n */\nexport function bundle (options: BundleOptions): Promise<InstallResult> {\n  const { cwd, global, out } = options\n  const emitter = options.emitter || new EventEmitter()\n  const resolution = options.resolution || 'main'\n\n  if (out == null) {\n    return Promise.reject(new TypeError('Out file path is required for bundle'))\n  }\n\n  return resolveAllDependencies({ cwd, dev: false, global: false, emitter })\n    .then(tree => {\n      const name = options.name || tree.name\n\n      if (name == null) {\n        return Promise.reject(new TypeError(\n          'Unable to infer typings name from project. Use the `--name` flag to specify it manually'\n        ))\n      }\n\n      return compile(tree, [resolution], { cwd, name, global, emitter, meta: true })\n    })\n    .then((output: CompileResult) => {\n      const path = resolve(cwd, out)\n\n      return mkdirp(dirname(path))\n        .then(() => {\n          return writeFile(path, output.results[resolution])\n        })\n        .then(() => ({ tree: output.tree }))\n    })\n}\n"]}