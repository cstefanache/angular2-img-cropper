{"version":3,"file":"dependencies.js","sourceRoot":"","sources":["../../src/lib/dependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import extend = require('xtend')\nimport listify = require('listify')\nimport invariant = require('invariant')\nimport zipObject = require('zip-object')\nimport Promise = require('any-promise')\nimport { resolve, dirname, join } from 'path'\nimport { resolve as resolveUrl } from 'url'\nimport { readJson, readConfigFrom, readJsonFrom } from '../utils/fs'\nimport { parseDependency } from '../utils/parse'\nimport { findUp, findConfigFile } from '../utils/find'\nimport { isDefinition, isHttp } from '../utils/path'\nimport { CONFIG_FILE, PROJECT_NAME } from '../utils/config'\nimport { search } from '../search'\nimport { Dependency, DependencyBranch, Dependencies, DependencyTree, Emitter } from '../interfaces'\nimport TypingsError from './error'\n\n/**\n * Default dependency config options.\n */\nexport const DEFAULT_DEPENDENCY: DependencyTree = {\n  src: undefined,\n  raw: undefined,\n  main: undefined,\n  browser: undefined,\n  typings: undefined,\n  browserTypings: undefined,\n  version: undefined,\n  files: undefined,\n  global: undefined,\n  postmessage: undefined,\n  dependencies: {},\n  devDependencies: {},\n  peerDependencies: {},\n  globalDependencies: {},\n  globalDevDependencies: {}\n}\n\n/**\n * Options for resolving dependencies.\n */\nexport interface Options {\n  cwd: string\n  emitter: Emitter\n  name?: string\n  dev?: boolean\n  peer?: boolean\n  global?: boolean\n  parent?: DependencyTree\n}\n\n/**\n * Resolve all dependencies at the current path.\n */\nexport function resolveAllDependencies (options: Options): Promise<DependencyTree> {\n  return Promise.all([\n    resolveBowerDependencies(options).catch(() => extend(DEFAULT_DEPENDENCY)),\n    resolveNpmDependencies(options).catch(() => extend(DEFAULT_DEPENDENCY)),\n    resolveTypeDependencies(options).catch(() => extend(DEFAULT_DEPENDENCY))\n  ])\n    .then((trees) => mergeDependencies(DEFAULT_DEPENDENCY, ...trees))\n}\n\n/**\n * Resolve a single dependency object.\n */\nexport function resolveDependency (dependency: Dependency, options: Options): Promise<DependencyTree> {\n  const { type, location, raw, meta } = dependency\n\n  if (type === 'registry') {\n    return resolveDependencyRegistry(dependency, options)\n  }\n\n  if (type === 'github' || type === 'bitbucket') {\n    if (meta.sha === 'master') {\n      options.emitter.emit('badlocation', { type, raw, location })\n    }\n  }\n\n  return resolveDependencyInternally(type, location, raw, options)\n}\n\n/**\n * Internal version of `resolveDependency`, skipping the registry handling.\n */\nfunction resolveDependencyInternally (type: string, location: string, raw: string, options: Options) {\n  if (type === 'npm') {\n    return resolveNpmDependency(location, raw, options)\n  }\n\n  if (type === 'bower') {\n    return resolveBowerDependency(location, raw, options)\n  }\n\n  return resolveFileDependency(location, raw, options)\n}\n\n/**\n * Resolving a registry dependency has an intermediate step.\n */\nfunction resolveDependencyRegistry (dependency: Dependency, options: Options) {\n  const { location, meta } = dependency\n\n  return readJsonFrom(location)\n    .then(\n      function (entry) {\n        // Rewrite dependency type and location, but recreate `raw`.\n        const { type, location } = parseDependency(entry.location)\n        const raw = `registry:${meta.source}/${meta.name}#${entry.tag}`\n\n        if (entry.deprecated) {\n          options.emitter.emit('deprecated', {\n            parent: options.parent,\n            raw: dependency.raw,\n            date: new Date(entry.deprecated)\n          })\n        }\n\n        return resolveDependencyInternally(type, location, raw, options)\n      },\n      function (error) {\n        // Wrap 404 responses in user prompt.\n        if (error.code === 'EINVALIDSTATUS' && error.status === 404) {\n          return search({ name: meta.name })\n            .then(res => {\n              let message = `Unable to find \"${meta.name}\" (\"${meta.source}\") in the registry.`\n\n              if (res.total > 0) {\n                const plur = res.total === 1 ? 'source' : 'sources'\n\n                message += `\\nHowever, we found \"${meta.name}\" for ${res.total} other ${plur}: `\n                message += `${listify(res.results.map(x => JSON.stringify(x.source)))}`\n                message += `\\nYou can install these using the \"source\" option.`\n              }\n\n              message += '\\nWe could use your help adding these typings to the registry: '\n              message += 'https://github.com/typings/registry'\n\n              return Promise.reject(new TypingsError(message, error))\n            })\n        }\n\n        return Promise.reject(error)\n      }\n    )\n}\n\n/**\n * Resolve a dependency in NPM.\n */\nfunction resolveNpmDependency (pkgName: string, raw: string, options: Options) {\n  return findUp(options.cwd, join('node_modules', pkgName))\n    .then(\n      function (modulePath: string) {\n        if (isDefinition(modulePath)) {\n          return resolveFileDependency(modulePath, raw, options)\n        }\n\n        return resolveNpmDependencyFrom(modulePath, raw, options)\n      },\n      function (error) {\n        return Promise.reject(resolveError(raw, error, options))\n      }\n    )\n}\n\n/**\n * Resolve a dependency in Bower.\n */\nfunction resolveBowerDependency (name: string, raw: string, options: Options) {\n  return resolveBowerComponentPath(options.cwd)\n    .then(\n      function (componentPath: string) {\n        const modulePath = resolve(componentPath, name)\n\n        if (isDefinition(modulePath)) {\n          return resolveFileDependency(modulePath, raw, options)\n        }\n\n        return resolveBowerDependencyFrom(modulePath, raw, componentPath, options)\n      },\n      function (error) {\n        return Promise.reject(resolveError(raw, error, options))\n      }\n    )\n}\n\n/**\n * Resolve a local file dependency.\n */\nfunction resolveFileDependency (location: string, raw: string, options: Options): Promise<DependencyTree> {\n  const { name, parent } = options\n  let src: string\n\n  if (isHttp(location)) {\n    src = location\n  } else if (parent && isHttp(parent.src)) {\n    src = resolveUrl(parent.src, location)\n  } else {\n    src = resolve(options.cwd, location)\n  }\n\n  if (!isDefinition(src)) {\n    return resolveTypeDependencyFrom(src, raw, options)\n  }\n\n  options.emitter.emit('resolve', { name, src, raw, parent })\n\n  const tree: DependencyTree = extend(DEFAULT_DEPENDENCY, {\n    typings: src,\n    src,\n    raw,\n    parent\n  })\n\n  options.emitter.emit('resolved', { name, src, tree, raw, parent })\n\n  // Resolve direct typings using `typings` property.\n  return Promise.resolve(tree)\n}\n\n/**\n * Follow and resolve bower dependencies.\n */\nexport function resolveBowerDependencies (options: Options): Promise<DependencyTree> {\n  return findUp(options.cwd, 'bower.json')\n    .then(\n      function (bowerJsonPath: string) {\n        return resolveBowerComponentPath(dirname(bowerJsonPath))\n          .then(function (componentPath: string) {\n            return resolveBowerDependencyFrom(bowerJsonPath, undefined, componentPath, options)\n          })\n      },\n      function (cause) {\n        return Promise.reject(new TypingsError(`Unable to resolve Bower dependencies`, cause))\n      }\n    )\n}\n\n/**\n * Resolve bower dependencies from a path.\n */\nfunction resolveBowerDependencyFrom (\n  src: string,\n  raw: string,\n  componentPath: string,\n  options: Options\n): Promise<DependencyTree> {\n  const { name, parent } = options\n\n  checkCircularDependency(parent, src)\n\n  options.emitter.emit('resolve', { name, src, raw, parent })\n\n  return readJson(src)\n    .then(\n      function (bowerJson: any = {}) {\n        const tree = extend(DEFAULT_DEPENDENCY, {\n          name: bowerJson.name,\n          version: bowerJson.version,\n          main: bowerJson.main,\n          browser: bowerJson.browser,\n          typings: bowerJson.typings,\n          browserTypings: bowerJson.browserTypings,\n          global: false,\n          src,\n          raw,\n          parent\n        })\n\n        const dependencyMap = extend(bowerJson.dependencies)\n        const devDependencyMap = extend(options.dev ? bowerJson.devDependencies : {})\n        const dependencyOptions = extend(options, { parent: tree })\n\n        options.emitter.emit('resolved', { name: name || tree.name, src, tree, raw, parent })\n\n        return Promise.all([\n          resolveBowerDependencyMap(componentPath, dependencyMap, dependencyOptions),\n          resolveBowerDependencyMap(componentPath, devDependencyMap, dependencyOptions),\n          maybeResolveTypeDependencyFrom(join(src, '..', CONFIG_FILE), raw, options)\n        ])\n          .then(function ([dependencies, devDependencies, typedPackage]) {\n            tree.dependencies = dependencies\n            tree.devDependencies = devDependencies\n\n            return mergeDependencies(tree, typedPackage)\n          })\n      },\n      function (error) {\n        return Promise.reject(resolveError(raw, error, options))\n      }\n    )\n}\n\n/**\n * Resolve the path to bower components.\n */\nfunction resolveBowerComponentPath (path: string): Promise<string> {\n  return readJson(resolve(path, '.bowerrc'))\n    .then(\n      function (bowerrc: any = {}) {\n        return resolve(path, bowerrc.directory || 'bower_components')\n      },\n      function () {\n        return resolve(path, 'bower_components')\n      }\n    )\n}\n\n/**\n * Recursively resolve dependencies from a list and component path.\n */\nfunction resolveBowerDependencyMap (\n  componentPath: string,\n  dependencies: Dependencies,\n  options: Options\n): Promise<DependencyBranch> {\n  const keys = Object.keys(dependencies)\n\n  return Promise.all(keys.map(function (name) {\n    const modulePath = resolve(componentPath, name, 'bower.json')\n    const resolveOptions: Options = extend(options, { name, dev: false, global: false, peer: false })\n\n    return resolveBowerDependencyFrom(modulePath, `bower:${name}`, componentPath, resolveOptions)\n  }))\n    .then(results => zipObject(keys, results))\n}\n\n/**\n * Follow and resolve npm dependencies.\n */\nexport function resolveNpmDependencies (options: Options): Promise<DependencyTree> {\n  return findUp(options.cwd, 'package.json')\n    .then(\n      function (packgeJsonPath: string) {\n        return resolveNpmDependencyFrom(packgeJsonPath, undefined, options)\n      },\n      function (cause) {\n        return Promise.reject(new TypingsError(`Unable to resolve NPM dependencies`, cause))\n      }\n    )\n}\n\n/**\n * Resolve NPM dependencies from `package.json`.\n */\nfunction resolveNpmDependencyFrom (src: string, raw: string, options: Options): Promise<DependencyTree> {\n  const { name, parent } = options\n\n  checkCircularDependency(parent, src)\n\n  options.emitter.emit('resolve', { name, src, raw, parent })\n\n  return readJson(src)\n    .then(\n      function (packageJson: any = {}) {\n        const tree: DependencyTree = extend(DEFAULT_DEPENDENCY, {\n          name: packageJson.name,\n          version: packageJson.version,\n          main: packageJson.main,\n          browser: packageJson.browser,\n          typings: packageJson.typings,\n          browserTypings: packageJson.browserTypings,\n          global: false,\n          src,\n          raw,\n          parent\n        })\n\n        const dependencyMap = extend(packageJson.dependencies)\n        const devDependencyMap = extend(options.dev ? packageJson.devDependencies : {})\n        const peerDependencyMap = extend(options.peer ? packageJson.peerDependencies : {})\n        const dependencyOptions = extend(options, { parent: tree })\n\n        options.emitter.emit('resolved', { name: name || tree.name, src, tree, raw, parent })\n\n        return Promise.all([\n          resolveNpmDependencyMap(src, dependencyMap, dependencyOptions),\n          resolveNpmDependencyMap(src, devDependencyMap, dependencyOptions),\n          resolveNpmDependencyMap(src, peerDependencyMap, dependencyOptions),\n          maybeResolveTypeDependencyFrom(join(src, '..', CONFIG_FILE), raw, options)\n        ])\n          .then(function ([dependencies, devDependencies, peerDependencies, typedPackage]) {\n            tree.dependencies = dependencies\n            tree.devDependencies = devDependencies\n            tree.peerDependencies = peerDependencies\n\n            return mergeDependencies(tree, typedPackage)\n          })\n      },\n      function (error) {\n        return Promise.reject(resolveError(raw, error, options))\n      }\n    )\n}\n\n/**\n * Recursively resolve dependencies from a list and component path.\n */\nfunction resolveNpmDependencyMap (src: string, dependencies: any, options: Options): Promise<DependencyBranch> {\n  const cwd = dirname(src)\n  const keys = Object.keys(dependencies)\n\n  return Promise.all(keys.map(function (name) {\n    const resolveOptions: Options = extend(options, { name, cwd, dev: false, peer: false, global: false })\n\n    return resolveNpmDependency(join(name, 'package.json'), `npm:${name}`, resolveOptions)\n  }))\n    .then(results => zipObject(keys, results))\n}\n\n/**\n * Follow and resolve type dependencies.\n */\nexport function resolveTypeDependencies (options: Options): Promise<DependencyTree> {\n  return findConfigFile(options.cwd)\n    .then(\n      function (path: string) {\n        return resolveTypeDependencyFrom(path, undefined, options)\n      },\n      function (cause) {\n        return Promise.reject(new TypingsError(`Unable to resolve Typings dependencies`, cause))\n      }\n    )\n}\n\n/**\n * Resolve type dependencies from an exact path.\n */\nfunction resolveTypeDependencyFrom (src: string, raw: string, options: Options) {\n  const { name, parent } = options\n\n  checkCircularDependency(parent, src)\n\n  options.emitter.emit('resolve', { name, src, raw, parent })\n\n  return readConfigFrom(src)\n    .then<DependencyTree>(\n      function (config) {\n        const tree = extend(DEFAULT_DEPENDENCY, {\n          name: config.name,\n          main: config.main,\n          version: config.version,\n          browser: config.browser,\n          files: Array.isArray(config.files) ? config.files : undefined,\n          type: PROJECT_NAME,\n          global: typeof config.global === 'boolean' ? !!config.global : undefined,\n          postmessage: typeof config.postmessage === 'string' ? config.postmessage : undefined,\n          src,\n          raw,\n          parent\n        })\n\n        const { global, dev, peer } = options\n\n        const dependencyMap = extend(config.dependencies)\n        const devDependencyMap = extend(dev ? config.devDependencies : {})\n        const peerDependencyMap = extend(peer ? config.peerDependencies : {})\n        const globalDependencyMap = extend(global ? config.globalDependencies : {})\n        const globalDevDependencyMap = extend(global && dev ? config.globalDevDependencies : {})\n        const dependencyOptions = extend(options, { parent: tree })\n\n        options.emitter.emit('resolved', { name: name || tree.name, src, tree, raw, parent })\n\n        // Emit \"expected\" global modules when installing top-level.\n        if (parent == null && config.globalDependencies) {\n          options.emitter.emit('globaldependencies', {\n            name: name || tree.name,\n            raw,\n            dependencies: config.globalDependencies\n          })\n        }\n\n        return Promise.all([\n          resolveTypeDependencyMap(src, dependencyMap, dependencyOptions),\n          resolveTypeDependencyMap(src, devDependencyMap, dependencyOptions),\n          resolveTypeDependencyMap(src, peerDependencyMap, dependencyOptions),\n          resolveTypeDependencyMap(src, globalDependencyMap, dependencyOptions),\n          resolveTypeDependencyMap(src, globalDevDependencyMap, dependencyOptions)\n        ])\n          .then(function ([\n            dependencies,\n            devDependencies,\n            peerDependencies,\n            globalDependencies,\n            globalDevDependencies\n          ]) {\n            tree.dependencies = dependencies\n            tree.devDependencies = devDependencies\n            tree.peerDependencies = peerDependencies\n            tree.globalDependencies = globalDependencies\n            tree.globalDevDependencies = globalDevDependencies\n\n            return tree\n          })\n      },\n      function (error) {\n        return Promise.reject(resolveError(raw, error, options))\n      }\n    )\n}\n\n/**\n * Resolve type dependency ignoring not found issues (E.g. when mixed resolve NPM/Bower).\n */\nfunction maybeResolveTypeDependencyFrom (src: string, raw: string, options: Options) {\n  return resolveTypeDependencyFrom(src, raw, options).catch(() => extend(DEFAULT_DEPENDENCY))\n}\n\n/**\n * Resolve type dependency map from a cache directory.\n */\nfunction resolveTypeDependencyMap (src: string, dependencies: any, options: Options) {\n  const cwd = dirname(src)\n  const keys = Object.keys(dependencies)\n\n  return Promise.all(keys.map(function (name) {\n    const resolveOptions: Options = extend(options, { name, cwd, dev: false, global: false, peer: false })\n\n    return resolveDependency(parseDependency(dependencies[name]), resolveOptions)\n  }))\n    .then(results => zipObject(keys, results))\n}\n\n/**\n * Check whether the filename is a circular dependency.\n */\nfunction checkCircularDependency (tree: DependencyTree, filename: string) {\n  if (tree) {\n    const currentSrc = tree.src\n\n    while (tree) {\n      invariant(tree.src !== filename, `Circular dependency detected using \"${currentSrc}\"`)\n\n      tree = tree.parent\n    }\n  }\n}\n\n/**\n * Create a resolved failure error message.\n */\nfunction resolveError (raw: string, cause: Error, options: Options) {\n  const { name } = options\n  let message = `Unable to resolve ${raw == null ? 'typings' : `\"${raw}\"`}`\n\n  if (name != null) {\n    message += ` from \"${name}\"`\n  }\n\n  return new TypingsError(message, cause)\n}\n\n/**\n * Merge dependency trees together.\n */\nfunction mergeDependencies (root: DependencyTree, ...trees: DependencyTree[]): DependencyTree {\n  const dependency = extend(root)\n\n  for (const tree of trees) {\n    // Skip empty dependency trees.\n    if (tree == null) {\n      continue\n    }\n\n    const { name, raw, src, main, browser, typings, browserTypings, parent, files, global } = tree\n\n    // The parent needs to always be set.\n    if (parent != null) {\n      dependency.parent = parent\n    }\n\n    // Merge known global properties.\n    if (global != null) {\n      dependency.global = global\n    }\n\n    if (typeof name === 'string') {\n      dependency.name = name\n    }\n\n    if (typeof raw === 'string') {\n      dependency.raw = raw\n    }\n\n    // Handle `main` and `typings` overrides all together.\n    if (main != null || browser != null || typings != null || browserTypings != null || files != null) {\n      dependency.src = src\n      dependency.main = main\n      dependency.files = files\n      dependency.browser = browser\n      dependency.typings = typings\n      dependency.browserTypings = browserTypings\n    }\n\n    dependency.postmessage = tree.postmessage || dependency.postmessage\n    dependency.dependencies = extend(dependency.dependencies, tree.dependencies)\n    dependency.devDependencies = extend(dependency.devDependencies, tree.devDependencies)\n    dependency.peerDependencies = extend(dependency.peerDependencies, tree.peerDependencies)\n    dependency.globalDependencies = extend(dependency.globalDependencies, tree.globalDependencies)\n    dependency.globalDevDependencies = extend(dependency.globalDevDependencies, tree.globalDevDependencies)\n  }\n\n  return dependency\n}\n"]}